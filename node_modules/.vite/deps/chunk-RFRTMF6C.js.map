{
  "version": 3,
  "sources": ["../../vuetify/src/directives/touch/index.ts"],
  "sourcesContent": ["// Types\nimport type {\n  DirectiveBinding,\n  ObjectDirective,\n} from 'vue'\n\n// Utilities\nimport { keys } from '@/util'\n\nexport interface TouchHandlers {\n  start?: (wrapperEvent: { originalEvent: TouchEvent } & TouchWrapper) => void\n  end?: (wrapperEvent: { originalEvent: TouchEvent } & TouchWrapper) => void\n  move?: (wrapperEvent: { originalEvent: TouchEvent } & TouchWrapper) => void\n  left?: (wrapper: TouchWrapper) => void\n  right?: (wrapper: TouchWrapper) => void\n  up?: (wrapper: TouchWrapper) => void\n  down?: (wrapper: TouchWrapper) => void\n}\n\nexport interface TouchWrapper extends TouchHandlers {\n  touchstartX: number\n  touchstartY: number\n  touchmoveX: number\n  touchmoveY: number\n  touchendX: number\n  touchendY: number\n  offsetX: number\n  offsetY: number\n}\n\nexport interface TouchValue extends TouchHandlers {\n  parent?: boolean\n  options?: AddEventListenerOptions\n}\n\nexport interface TouchStoredHandlers {\n  touchstart: (e: TouchEvent) => void\n  touchend: (e: TouchEvent) => void\n  touchmove: (e: TouchEvent) => void\n}\n\nexport interface TouchDirectiveBinding extends Omit<DirectiveBinding, 'value'> {\n  value?: TouchValue\n}\n\nconst handleGesture = (wrapper: TouchWrapper) => {\n  const { touchstartX, touchendX, touchstartY, touchendY } = wrapper\n  const dirRatio = 0.5\n  const minDistance = 16\n  wrapper.offsetX = touchendX - touchstartX\n  wrapper.offsetY = touchendY - touchstartY\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && (touchendX < touchstartX - minDistance) && wrapper.left(wrapper)\n    wrapper.right && (touchendX > touchstartX + minDistance) && wrapper.right(wrapper)\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && (touchendY < touchstartY - minDistance) && wrapper.up(wrapper)\n    wrapper.down && (touchendY > touchstartY + minDistance) && wrapper.down(wrapper)\n  }\n}\n\nfunction touchstart (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchstartX = touch.clientX\n  wrapper.touchstartY = touch.clientY\n\n  wrapper.start?.({ originalEvent: event, ...wrapper })\n}\n\nfunction touchend (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchendX = touch.clientX\n  wrapper.touchendY = touch.clientY\n\n  wrapper.end?.({ originalEvent: event, ...wrapper })\n\n  handleGesture(wrapper)\n}\n\nfunction touchmove (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchmoveX = touch.clientX\n  wrapper.touchmoveY = touch.clientY\n\n  wrapper.move?.({ originalEvent: event, ...wrapper })\n}\n\nfunction createHandlers (value: TouchHandlers = {}): TouchStoredHandlers {\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end,\n  }\n\n  return {\n    touchstart: (e: TouchEvent) => touchstart(e, wrapper),\n    touchend: (e: TouchEvent) => touchend(e, wrapper),\n    touchmove: (e: TouchEvent) => touchmove(e, wrapper),\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const value = binding.value\n  const target = value?.parent ? el.parentElement : el\n  const options = value?.options ?? { passive: true }\n  const uid = binding.instance?.$.uid // TODO: use custom uid generator\n\n  if (!target || !uid) return\n\n  const handlers = createHandlers(binding.value)\n\n  target._touchHandlers = target._touchHandlers ?? Object.create(null)\n  target._touchHandlers![uid] = handlers\n\n  keys(handlers).forEach(eventName => {\n    target.addEventListener(eventName, handlers[eventName], options)\n  })\n}\n\nfunction unmounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const target = binding.value?.parent ? el.parentElement : el\n  const uid = binding.instance?.$.uid\n\n  if (!target?._touchHandlers || !uid) return\n\n  const handlers = target._touchHandlers[uid]\n\n  keys(handlers).forEach(eventName => {\n    target.removeEventListener(eventName, handlers[eventName])\n  })\n\n  delete target._touchHandlers[uid]\n}\n\nexport const Touch: ObjectDirective = {\n  mounted,\n  unmounted,\n}\n\nexport default Touch\n"],
  "mappings": "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",
  "names": ["handleGesture", "wrapper", "touchstartX", "touchendX", "touchstartY", "touchendY", "dirRatio", "minDistance", "offsetX", "offsetY", "Math", "abs", "left", "right", "up", "down", "touchstart", "event", "touch", "changedTouches", "clientX", "clientY", "start", "originalEvent", "touchend", "end", "touchmove", "touchmoveX", "touchmoveY", "move", "createHandlers", "value", "e", "mounted", "el", "binding", "target", "parent", "parentElement", "options", "passive", "uid", "instance", "$", "handlers", "_touchHandlers", "Object", "create", "keys", "forEach", "eventName", "addEventListener", "unmounted", "removeEventListener", "Touch"]
}
