import "./chunk-OGC77DMH.js";
import {
  Fragment,
  createBlock,
  createCommentVNode,
  createSSRApp,
  createSlots,
  createTextVNode,
  createVNode,
  h,
  mergeProps,
  openBlock,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  vModelSelect,
  version,
  withCtx,
  withDirectives,
  withModifiers
} from "./chunk-EFKF2LRE.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/algoliasearch-helper/src/functions/merge.js
var require_merge = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/merge.js"(exports, module) {
    "use strict";
    function clone(value) {
      if (typeof value === "object" && value !== null) {
        return _merge(Array.isArray(value) ? [] : {}, value);
      }
      return value;
    }
    function isObjectOrArrayOrFunction(value) {
      return typeof value === "function" || Array.isArray(value) || Object.prototype.toString.call(value) === "[object Object]";
    }
    function _merge(target, source) {
      if (target === source) {
        return target;
      }
      for (var key in source) {
        if (!Object.prototype.hasOwnProperty.call(source, key) || key === "__proto__") {
          continue;
        }
        var sourceVal = source[key];
        var targetVal = target[key];
        if (typeof targetVal !== "undefined" && typeof sourceVal === "undefined") {
          continue;
        }
        if (isObjectOrArrayOrFunction(targetVal) && isObjectOrArrayOrFunction(sourceVal)) {
          target[key] = _merge(targetVal, sourceVal);
        } else {
          target[key] = clone(sourceVal);
        }
      }
      return target;
    }
    function merge(target) {
      if (!isObjectOrArrayOrFunction(target)) {
        target = {};
      }
      for (var i4 = 1, l7 = arguments.length; i4 < l7; i4++) {
        var source = arguments[i4];
        if (isObjectOrArrayOrFunction(source)) {
          _merge(target, source);
        }
      }
      return target;
    }
    module.exports = merge;
  }
});

// node_modules/algoliasearch-helper/src/functions/defaultsPure.js
var require_defaultsPure = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/defaultsPure.js"(exports, module) {
    "use strict";
    module.exports = function defaultsPure() {
      var sources = Array.prototype.slice.call(arguments);
      return sources.reduceRight(function(acc, source) {
        Object.keys(Object(source)).forEach(function(key) {
          if (source[key] === void 0) {
            return;
          }
          if (acc[key] !== void 0) {
            delete acc[key];
          }
          acc[key] = source[key];
        });
        return acc;
      }, {});
    };
  }
});

// node_modules/algoliasearch-helper/src/functions/intersection.js
var require_intersection = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/intersection.js"(exports, module) {
    "use strict";
    function intersection(arr1, arr2) {
      return arr1.filter(function(value, index3) {
        return arr2.indexOf(value) > -1 && arr1.indexOf(value) === index3;
      });
    }
    module.exports = intersection;
  }
});

// node_modules/algoliasearch-helper/src/functions/find.js
var require_find = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/find.js"(exports, module) {
    "use strict";
    module.exports = function find2(array, comparator) {
      if (!Array.isArray(array)) {
        return void 0;
      }
      for (var i4 = 0; i4 < array.length; i4++) {
        if (comparator(array[i4])) {
          return array[i4];
        }
      }
    };
  }
});

// node_modules/algoliasearch-helper/src/functions/valToNumber.js
var require_valToNumber = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/valToNumber.js"(exports, module) {
    "use strict";
    function valToNumber(v5) {
      if (typeof v5 === "number") {
        return v5;
      } else if (typeof v5 === "string") {
        return parseFloat(v5);
      } else if (Array.isArray(v5)) {
        return v5.map(valToNumber);
      }
      throw new Error("The value should be a number, a parsable string or an array of those.");
    }
    module.exports = valToNumber;
  }
});

// node_modules/algoliasearch-helper/src/functions/omit.js
var require_omit = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/omit.js"(exports, module) {
    "use strict";
    function _objectWithoutPropertiesLoose9(source, excluded) {
      if (source === null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key;
      var i4;
      for (i4 = 0; i4 < sourceKeys.length; i4++) {
        key = sourceKeys[i4];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    module.exports = _objectWithoutPropertiesLoose9;
  }
});

// node_modules/algoliasearch-helper/src/functions/objectHasKeys.js
var require_objectHasKeys = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/objectHasKeys.js"(exports, module) {
    "use strict";
    function objectHasKeys(obj) {
      return obj && Object.keys(obj).length > 0;
    }
    module.exports = objectHasKeys;
  }
});

// node_modules/algoliasearch-helper/src/utils/isValidUserToken.js
var require_isValidUserToken = __commonJS({
  "node_modules/algoliasearch-helper/src/utils/isValidUserToken.js"(exports, module) {
    "use strict";
    module.exports = function isValidUserToken(userToken) {
      if (userToken === null) {
        return false;
      }
      return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);
    };
  }
});

// node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js
var require_RefinementList = __commonJS({
  "node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js"(exports, module) {
    "use strict";
    var defaultsPure = require_defaultsPure();
    var omit = require_omit();
    var objectHasKeys = require_objectHasKeys();
    var lib = {
      addRefinement: function addRefinement(refinementList, attribute, value) {
        if (lib.isRefined(refinementList, attribute, value)) {
          return refinementList;
        }
        var valueAsString = "" + value;
        var facetRefinement = !refinementList[attribute] ? [valueAsString] : refinementList[attribute].concat(valueAsString);
        var mod = {};
        mod[attribute] = facetRefinement;
        return defaultsPure({}, mod, refinementList);
      },
      removeRefinement: function removeRefinement(refinementList, attribute, value) {
        if (value === void 0) {
          return lib.clearRefinement(refinementList, function(v5, f8) {
            return attribute === f8;
          });
        }
        var valueAsString = "" + value;
        return lib.clearRefinement(refinementList, function(v5, f8) {
          return attribute === f8 && valueAsString === v5;
        });
      },
      toggleRefinement: function toggleRefinement(refinementList, attribute, value) {
        if (value === void 0)
          throw new Error("toggleRefinement should be used with a value");
        if (lib.isRefined(refinementList, attribute, value)) {
          return lib.removeRefinement(refinementList, attribute, value);
        }
        return lib.addRefinement(refinementList, attribute, value);
      },
      clearRefinement: function clearRefinement2(refinementList, attribute, refinementType) {
        if (attribute === void 0) {
          if (!objectHasKeys(refinementList)) {
            return refinementList;
          }
          return {};
        } else if (typeof attribute === "string") {
          return omit(refinementList, [attribute]);
        } else if (typeof attribute === "function") {
          var hasChanged = false;
          var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {
            var values = refinementList[key] || [];
            var facetList = values.filter(function(value) {
              return !attribute(value, key, refinementType);
            });
            if (facetList.length !== values.length) {
              hasChanged = true;
            }
            memo[key] = facetList;
            return memo;
          }, {});
          if (hasChanged)
            return newRefinementList;
          return refinementList;
        }
      },
      isRefined: function isRefined2(refinementList, attribute, refinementValue) {
        var containsRefinements = !!refinementList[attribute] && refinementList[attribute].length > 0;
        if (refinementValue === void 0 || !containsRefinements) {
          return containsRefinements;
        }
        var refinementValueAsString = "" + refinementValue;
        return refinementList[attribute].indexOf(refinementValueAsString) !== -1;
      }
    };
    module.exports = lib;
  }
});

// node_modules/algoliasearch-helper/src/SearchParameters/index.js
var require_SearchParameters = __commonJS({
  "node_modules/algoliasearch-helper/src/SearchParameters/index.js"(exports, module) {
    "use strict";
    var merge = require_merge();
    var defaultsPure = require_defaultsPure();
    var intersection = require_intersection();
    var find2 = require_find();
    var valToNumber = require_valToNumber();
    var omit = require_omit();
    var objectHasKeys = require_objectHasKeys();
    var isValidUserToken = require_isValidUserToken();
    var RefinementList = require_RefinementList();
    function isEqualNumericRefinement(a10, b2) {
      if (Array.isArray(a10) && Array.isArray(b2)) {
        return a10.length === b2.length && a10.every(function(el, i4) {
          return isEqualNumericRefinement(b2[i4], el);
        });
      }
      return a10 === b2;
    }
    function findArray(array, searchedValue) {
      return find2(array, function(currentValue) {
        return isEqualNumericRefinement(currentValue, searchedValue);
      });
    }
    function SearchParameters(newParameters) {
      var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};
      if (params.userToken !== void 0 && !isValidUserToken(params.userToken)) {
        console.warn("[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\n  - Format: [a-zA-Z0-9_-]{1,64}");
      }
      this.facets = params.facets || [];
      this.disjunctiveFacets = params.disjunctiveFacets || [];
      this.hierarchicalFacets = params.hierarchicalFacets || [];
      this.facetsRefinements = params.facetsRefinements || {};
      this.facetsExcludes = params.facetsExcludes || {};
      this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};
      this.numericRefinements = params.numericRefinements || {};
      this.tagRefinements = params.tagRefinements || [];
      this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};
      var self = this;
      Object.keys(params).forEach(function(paramName) {
        var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;
        var isValueDefined = params[paramName] !== void 0;
        if (!isKeyKnown && isValueDefined) {
          self[paramName] = params[paramName];
        }
      });
    }
    SearchParameters.PARAMETERS = Object.keys(new SearchParameters());
    SearchParameters._parseNumbers = function(partialState) {
      if (partialState instanceof SearchParameters)
        return partialState;
      var numbers = {};
      var numberKeys = [
        "aroundPrecision",
        "aroundRadius",
        "getRankingInfo",
        "minWordSizefor2Typos",
        "minWordSizefor1Typo",
        "page",
        "maxValuesPerFacet",
        "distinct",
        "minimumAroundRadius",
        "hitsPerPage",
        "minProximity"
      ];
      numberKeys.forEach(function(k3) {
        var value = partialState[k3];
        if (typeof value === "string") {
          var parsedValue = parseFloat(value);
          numbers[k3] = isNaN(parsedValue) ? value : parsedValue;
        }
      });
      if (Array.isArray(partialState.insideBoundingBox)) {
        numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {
          if (Array.isArray(geoRect)) {
            return geoRect.map(function(value) {
              return parseFloat(value);
            });
          }
          return geoRect;
        });
      }
      if (partialState.numericRefinements) {
        var numericRefinements = {};
        Object.keys(partialState.numericRefinements).forEach(function(attribute) {
          var operators = partialState.numericRefinements[attribute] || {};
          numericRefinements[attribute] = {};
          Object.keys(operators).forEach(function(operator) {
            var values = operators[operator];
            var parsedValues = values.map(function(v5) {
              if (Array.isArray(v5)) {
                return v5.map(function(vPrime) {
                  if (typeof vPrime === "string") {
                    return parseFloat(vPrime);
                  }
                  return vPrime;
                });
              } else if (typeof v5 === "string") {
                return parseFloat(v5);
              }
              return v5;
            });
            numericRefinements[attribute][operator] = parsedValues;
          });
        });
        numbers.numericRefinements = numericRefinements;
      }
      return merge({}, partialState, numbers);
    };
    SearchParameters.make = function makeSearchParameters(newParameters) {
      var instance = new SearchParameters(newParameters);
      var hierarchicalFacets = newParameters.hierarchicalFacets || [];
      hierarchicalFacets.forEach(function(facet) {
        if (facet.rootPath) {
          var currentRefinement = instance.getHierarchicalRefinement(facet.name);
          if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {
            instance = instance.clearRefinements(facet.name);
          }
          currentRefinement = instance.getHierarchicalRefinement(facet.name);
          if (currentRefinement.length === 0) {
            instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);
          }
        }
      });
      return instance;
    };
    SearchParameters.validate = function(currentState, parameters) {
      var params = parameters || {};
      if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {
        return new Error(
          "[Tags] Cannot switch from the managed tag API to the advanced API. It is probably an error, if it is really what you want, you should first clear the tags with clearTags method."
        );
      }
      if (currentState.tagRefinements.length > 0 && params.tagFilters) {
        return new Error(
          "[Tags] Cannot switch from the advanced tag API to the managed API. It is probably an error, if it is not, you should first clear the tags with clearTags method."
        );
      }
      if (currentState.numericFilters && params.numericRefinements && objectHasKeys(params.numericRefinements)) {
        return new Error(
          "[Numeric filters] Can't switch from the advanced to the managed API. It is probably an error, if this is really what you want, you have to first clear the numeric filters."
        );
      }
      if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {
        return new Error(
          "[Numeric filters] Can't switch from the managed API to the advanced. It is probably an error, if this is really what you want, you have to first clear the numeric filters."
        );
      }
      return null;
    };
    SearchParameters.prototype = {
      constructor: SearchParameters,
      clearRefinements: function clearRefinements2(attribute) {
        var patch = {
          numericRefinements: this._clearNumericRefinements(attribute),
          facetsRefinements: RefinementList.clearRefinement(
            this.facetsRefinements,
            attribute,
            "conjunctiveFacet"
          ),
          facetsExcludes: RefinementList.clearRefinement(
            this.facetsExcludes,
            attribute,
            "exclude"
          ),
          disjunctiveFacetsRefinements: RefinementList.clearRefinement(
            this.disjunctiveFacetsRefinements,
            attribute,
            "disjunctiveFacet"
          ),
          hierarchicalFacetsRefinements: RefinementList.clearRefinement(
            this.hierarchicalFacetsRefinements,
            attribute,
            "hierarchicalFacet"
          )
        };
        if (patch.numericRefinements === this.numericRefinements && patch.facetsRefinements === this.facetsRefinements && patch.facetsExcludes === this.facetsExcludes && patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements && patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements) {
          return this;
        }
        return this.setQueryParameters(patch);
      },
      clearTags: function clearTags() {
        if (this.tagFilters === void 0 && this.tagRefinements.length === 0)
          return this;
        return this.setQueryParameters({
          tagFilters: void 0,
          tagRefinements: []
        });
      },
      setIndex: function setIndex(index3) {
        if (index3 === this.index)
          return this;
        return this.setQueryParameters({
          index: index3
        });
      },
      setQuery: function setQuery(newQuery) {
        if (newQuery === this.query)
          return this;
        return this.setQueryParameters({
          query: newQuery
        });
      },
      setPage: function setPage(newPage) {
        if (newPage === this.page)
          return this;
        return this.setQueryParameters({
          page: newPage
        });
      },
      setFacets: function setFacets(facets) {
        return this.setQueryParameters({
          facets
        });
      },
      setDisjunctiveFacets: function setDisjunctiveFacets(facets) {
        return this.setQueryParameters({
          disjunctiveFacets: facets
        });
      },
      setHitsPerPage: function setHitsPerPage(n5) {
        if (this.hitsPerPage === n5)
          return this;
        return this.setQueryParameters({
          hitsPerPage: n5
        });
      },
      setTypoTolerance: function setTypoTolerance(typoTolerance) {
        if (this.typoTolerance === typoTolerance)
          return this;
        return this.setQueryParameters({
          typoTolerance
        });
      },
      addNumericRefinement: function(attribute, operator, v5) {
        var value = valToNumber(v5);
        if (this.isNumericRefined(attribute, operator, value))
          return this;
        var mod = merge({}, this.numericRefinements);
        mod[attribute] = merge({}, mod[attribute]);
        if (mod[attribute][operator]) {
          mod[attribute][operator] = mod[attribute][operator].slice();
          mod[attribute][operator].push(value);
        } else {
          mod[attribute][operator] = [value];
        }
        return this.setQueryParameters({
          numericRefinements: mod
        });
      },
      getConjunctiveRefinements: function(facetName) {
        if (!this.isConjunctiveFacet(facetName)) {
          return [];
        }
        return this.facetsRefinements[facetName] || [];
      },
      getDisjunctiveRefinements: function(facetName) {
        if (!this.isDisjunctiveFacet(facetName)) {
          return [];
        }
        return this.disjunctiveFacetsRefinements[facetName] || [];
      },
      getHierarchicalRefinement: function(facetName) {
        return this.hierarchicalFacetsRefinements[facetName] || [];
      },
      getExcludeRefinements: function(facetName) {
        if (!this.isConjunctiveFacet(facetName)) {
          return [];
        }
        return this.facetsExcludes[facetName] || [];
      },
      removeNumericRefinement: function(attribute, operator, paramValue) {
        if (paramValue !== void 0) {
          if (!this.isNumericRefined(attribute, operator, paramValue)) {
            return this;
          }
          return this.setQueryParameters({
            numericRefinements: this._clearNumericRefinements(function(value, key) {
              return key === attribute && value.op === operator && isEqualNumericRefinement(value.val, valToNumber(paramValue));
            })
          });
        } else if (operator !== void 0) {
          if (!this.isNumericRefined(attribute, operator))
            return this;
          return this.setQueryParameters({
            numericRefinements: this._clearNumericRefinements(function(value, key) {
              return key === attribute && value.op === operator;
            })
          });
        }
        if (!this.isNumericRefined(attribute))
          return this;
        return this.setQueryParameters({
          numericRefinements: this._clearNumericRefinements(function(value, key) {
            return key === attribute;
          })
        });
      },
      getNumericRefinements: function(facetName) {
        return this.numericRefinements[facetName] || {};
      },
      getNumericRefinement: function(attribute, operator) {
        return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];
      },
      _clearNumericRefinements: function _clearNumericRefinements(attribute) {
        if (attribute === void 0) {
          if (!objectHasKeys(this.numericRefinements)) {
            return this.numericRefinements;
          }
          return {};
        } else if (typeof attribute === "string") {
          return omit(this.numericRefinements, [attribute]);
        } else if (typeof attribute === "function") {
          var hasChanged = false;
          var numericRefinements = this.numericRefinements;
          var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {
            var operators = numericRefinements[key];
            var operatorList = {};
            operators = operators || {};
            Object.keys(operators).forEach(function(operator) {
              var values = operators[operator] || [];
              var outValues = [];
              values.forEach(function(value) {
                var predicateResult = attribute({ val: value, op: operator }, key, "numeric");
                if (!predicateResult)
                  outValues.push(value);
              });
              if (outValues.length !== values.length) {
                hasChanged = true;
              }
              operatorList[operator] = outValues;
            });
            memo[key] = operatorList;
            return memo;
          }, {});
          if (hasChanged)
            return newNumericRefinements;
          return this.numericRefinements;
        }
      },
      addFacet: function addFacet(facet) {
        if (this.isConjunctiveFacet(facet)) {
          return this;
        }
        return this.setQueryParameters({
          facets: this.facets.concat([facet])
        });
      },
      addDisjunctiveFacet: function addDisjunctiveFacet(facet) {
        if (this.isDisjunctiveFacet(facet)) {
          return this;
        }
        return this.setQueryParameters({
          disjunctiveFacets: this.disjunctiveFacets.concat([facet])
        });
      },
      addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {
        if (this.isHierarchicalFacet(hierarchicalFacet.name)) {
          throw new Error(
            "Cannot declare two hierarchical facets with the same name: `" + hierarchicalFacet.name + "`"
          );
        }
        return this.setQueryParameters({
          hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])
        });
      },
      addFacetRefinement: function addFacetRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        if (RefinementList.isRefined(this.facetsRefinements, facet, value))
          return this;
        return this.setQueryParameters({
          facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)
        });
      },
      addExcludeRefinement: function addExcludeRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        if (RefinementList.isRefined(this.facetsExcludes, facet, value))
          return this;
        return this.setQueryParameters({
          facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)
        });
      },
      addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {
        if (!this.isDisjunctiveFacet(facet)) {
          throw new Error(
            facet + " is not defined in the disjunctiveFacets attribute of the helper configuration"
          );
        }
        if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value))
          return this;
        return this.setQueryParameters({
          disjunctiveFacetsRefinements: RefinementList.addRefinement(
            this.disjunctiveFacetsRefinements,
            facet,
            value
          )
        });
      },
      addTagRefinement: function addTagRefinement(tag) {
        if (this.isTagRefined(tag))
          return this;
        var modification = {
          tagRefinements: this.tagRefinements.concat(tag)
        };
        return this.setQueryParameters(modification);
      },
      removeFacet: function removeFacet(facet) {
        if (!this.isConjunctiveFacet(facet)) {
          return this;
        }
        return this.clearRefinements(facet).setQueryParameters({
          facets: this.facets.filter(function(f8) {
            return f8 !== facet;
          })
        });
      },
      removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {
        if (!this.isDisjunctiveFacet(facet)) {
          return this;
        }
        return this.clearRefinements(facet).setQueryParameters({
          disjunctiveFacets: this.disjunctiveFacets.filter(function(f8) {
            return f8 !== facet;
          })
        });
      },
      removeHierarchicalFacet: function removeHierarchicalFacet(facet) {
        if (!this.isHierarchicalFacet(facet)) {
          return this;
        }
        return this.clearRefinements(facet).setQueryParameters({
          hierarchicalFacets: this.hierarchicalFacets.filter(function(f8) {
            return f8.name !== facet;
          })
        });
      },
      removeFacetRefinement: function removeFacetRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        if (!RefinementList.isRefined(this.facetsRefinements, facet, value))
          return this;
        return this.setQueryParameters({
          facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)
        });
      },
      removeExcludeRefinement: function removeExcludeRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        if (!RefinementList.isRefined(this.facetsExcludes, facet, value))
          return this;
        return this.setQueryParameters({
          facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)
        });
      },
      removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {
        if (!this.isDisjunctiveFacet(facet)) {
          throw new Error(
            facet + " is not defined in the disjunctiveFacets attribute of the helper configuration"
          );
        }
        if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value))
          return this;
        return this.setQueryParameters({
          disjunctiveFacetsRefinements: RefinementList.removeRefinement(
            this.disjunctiveFacetsRefinements,
            facet,
            value
          )
        });
      },
      removeTagRefinement: function removeTagRefinement(tag) {
        if (!this.isTagRefined(tag))
          return this;
        var modification = {
          tagRefinements: this.tagRefinements.filter(function(t6) {
            return t6 !== tag;
          })
        };
        return this.setQueryParameters(modification);
      },
      toggleRefinement: function toggleRefinement(facet, value) {
        return this.toggleFacetRefinement(facet, value);
      },
      toggleFacetRefinement: function toggleFacetRefinement(facet, value) {
        if (this.isHierarchicalFacet(facet)) {
          return this.toggleHierarchicalFacetRefinement(facet, value);
        } else if (this.isConjunctiveFacet(facet)) {
          return this.toggleConjunctiveFacetRefinement(facet, value);
        } else if (this.isDisjunctiveFacet(facet)) {
          return this.toggleDisjunctiveFacetRefinement(facet, value);
        }
        throw new Error("Cannot refine the undeclared facet " + facet + "; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets");
      },
      toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        return this.setQueryParameters({
          facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)
        });
      },
      toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          throw new Error(facet + " is not defined in the facets attribute of the helper configuration");
        }
        return this.setQueryParameters({
          facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)
        });
      },
      toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {
        if (!this.isDisjunctiveFacet(facet)) {
          throw new Error(
            facet + " is not defined in the disjunctiveFacets attribute of the helper configuration"
          );
        }
        return this.setQueryParameters({
          disjunctiveFacetsRefinements: RefinementList.toggleRefinement(
            this.disjunctiveFacetsRefinements,
            facet,
            value
          )
        });
      },
      toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {
        if (!this.isHierarchicalFacet(facet)) {
          throw new Error(
            facet + " is not defined in the hierarchicalFacets attribute of the helper configuration"
          );
        }
        var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));
        var mod = {};
        var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== void 0 && this.hierarchicalFacetsRefinements[facet].length > 0 && (this.hierarchicalFacetsRefinements[facet][0] === value || this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0);
        if (upOneOrMultipleLevel) {
          if (value.indexOf(separator) === -1) {
            mod[facet] = [];
          } else {
            mod[facet] = [value.slice(0, value.lastIndexOf(separator))];
          }
        } else {
          mod[facet] = [value];
        }
        return this.setQueryParameters({
          hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)
        });
      },
      addHierarchicalFacetRefinement: function(facet, path) {
        if (this.isHierarchicalFacetRefined(facet)) {
          throw new Error(facet + " is already refined.");
        }
        if (!this.isHierarchicalFacet(facet)) {
          throw new Error(facet + " is not defined in the hierarchicalFacets attribute of the helper configuration.");
        }
        var mod = {};
        mod[facet] = [path];
        return this.setQueryParameters({
          hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)
        });
      },
      removeHierarchicalFacetRefinement: function(facet) {
        if (!this.isHierarchicalFacetRefined(facet)) {
          return this;
        }
        var mod = {};
        mod[facet] = [];
        return this.setQueryParameters({
          hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)
        });
      },
      toggleTagRefinement: function toggleTagRefinement(tag) {
        if (this.isTagRefined(tag)) {
          return this.removeTagRefinement(tag);
        }
        return this.addTagRefinement(tag);
      },
      isDisjunctiveFacet: function(facet) {
        return this.disjunctiveFacets.indexOf(facet) > -1;
      },
      isHierarchicalFacet: function(facetName) {
        return this.getHierarchicalFacetByName(facetName) !== void 0;
      },
      isConjunctiveFacet: function(facet) {
        return this.facets.indexOf(facet) > -1;
      },
      isFacetRefined: function isFacetRefined2(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          return false;
        }
        return RefinementList.isRefined(this.facetsRefinements, facet, value);
      },
      isExcludeRefined: function isExcludeRefined(facet, value) {
        if (!this.isConjunctiveFacet(facet)) {
          return false;
        }
        return RefinementList.isRefined(this.facetsExcludes, facet, value);
      },
      isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {
        if (!this.isDisjunctiveFacet(facet)) {
          return false;
        }
        return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);
      },
      isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {
        if (!this.isHierarchicalFacet(facet)) {
          return false;
        }
        var refinements = this.getHierarchicalRefinement(facet);
        if (!value) {
          return refinements.length > 0;
        }
        return refinements.indexOf(value) !== -1;
      },
      isNumericRefined: function isNumericRefined(attribute, operator, value) {
        if (value === void 0 && operator === void 0) {
          return !!this.numericRefinements[attribute];
        }
        var isOperatorDefined = this.numericRefinements[attribute] && this.numericRefinements[attribute][operator] !== void 0;
        if (value === void 0 || !isOperatorDefined) {
          return isOperatorDefined;
        }
        var parsedValue = valToNumber(value);
        var isAttributeValueDefined = findArray(this.numericRefinements[attribute][operator], parsedValue) !== void 0;
        return isOperatorDefined && isAttributeValueDefined;
      },
      isTagRefined: function isTagRefined(tag) {
        return this.tagRefinements.indexOf(tag) !== -1;
      },
      getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {
        var self = this;
        var disjunctiveNumericRefinedFacets = intersection(
          Object.keys(this.numericRefinements).filter(function(facet) {
            return Object.keys(self.numericRefinements[facet]).length > 0;
          }),
          this.disjunctiveFacets
        );
        return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {
          return self.disjunctiveFacetsRefinements[facet].length > 0;
        }).concat(disjunctiveNumericRefinedFacets).concat(this.getRefinedHierarchicalFacets());
      },
      getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {
        var self = this;
        return intersection(
          this.hierarchicalFacets.map(function(facet) {
            return facet.name;
          }),
          Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {
            return self.hierarchicalFacetsRefinements[facet].length > 0;
          })
        );
      },
      getUnrefinedDisjunctiveFacets: function() {
        var refinedFacets = this.getRefinedDisjunctiveFacets();
        return this.disjunctiveFacets.filter(function(f8) {
          return refinedFacets.indexOf(f8) === -1;
        });
      },
      managedParameters: [
        "index",
        "facets",
        "disjunctiveFacets",
        "facetsRefinements",
        "hierarchicalFacets",
        "facetsExcludes",
        "disjunctiveFacetsRefinements",
        "numericRefinements",
        "tagRefinements",
        "hierarchicalFacetsRefinements"
      ],
      getQueryParams: function getQueryParams() {
        var managedParameters = this.managedParameters;
        var queryParams = {};
        var self = this;
        Object.keys(this).forEach(function(paramName) {
          var paramValue = self[paramName];
          if (managedParameters.indexOf(paramName) === -1 && paramValue !== void 0) {
            queryParams[paramName] = paramValue;
          }
        });
        return queryParams;
      },
      setQueryParameter: function setParameter(parameter, value) {
        if (this[parameter] === value)
          return this;
        var modification = {};
        modification[parameter] = value;
        return this.setQueryParameters(modification);
      },
      setQueryParameters: function setQueryParameters(params) {
        if (!params)
          return this;
        var error = SearchParameters.validate(this, params);
        if (error) {
          throw error;
        }
        var self = this;
        var nextWithNumbers = SearchParameters._parseNumbers(params);
        var previousPlainObject = Object.keys(this).reduce(function(acc, key) {
          acc[key] = self[key];
          return acc;
        }, {});
        var nextPlainObject = Object.keys(nextWithNumbers).reduce(
          function(previous, key) {
            var isPreviousValueDefined = previous[key] !== void 0;
            var isNextValueDefined = nextWithNumbers[key] !== void 0;
            if (isPreviousValueDefined && !isNextValueDefined) {
              return omit(previous, [key]);
            }
            if (isNextValueDefined) {
              previous[key] = nextWithNumbers[key];
            }
            return previous;
          },
          previousPlainObject
        );
        return new this.constructor(nextPlainObject);
      },
      resetPage: function() {
        if (this.page === void 0) {
          return this;
        }
        return this.setPage(0);
      },
      _getHierarchicalFacetSortBy: function(hierarchicalFacet) {
        return hierarchicalFacet.sortBy || ["isRefined:desc", "name:asc"];
      },
      _getHierarchicalFacetSeparator: function(hierarchicalFacet) {
        return hierarchicalFacet.separator || " > ";
      },
      _getHierarchicalRootPath: function(hierarchicalFacet) {
        return hierarchicalFacet.rootPath || null;
      },
      _getHierarchicalShowParentLevel: function(hierarchicalFacet) {
        if (typeof hierarchicalFacet.showParentLevel === "boolean") {
          return hierarchicalFacet.showParentLevel;
        }
        return true;
      },
      getHierarchicalFacetByName: function(hierarchicalFacetName) {
        return find2(
          this.hierarchicalFacets,
          function(f8) {
            return f8.name === hierarchicalFacetName;
          }
        );
      },
      getHierarchicalFacetBreadcrumb: function(facetName) {
        if (!this.isHierarchicalFacet(facetName)) {
          return [];
        }
        var refinement = this.getHierarchicalRefinement(facetName)[0];
        if (!refinement)
          return [];
        var separator = this._getHierarchicalFacetSeparator(
          this.getHierarchicalFacetByName(facetName)
        );
        var path = refinement.split(separator);
        return path.map(function(part) {
          return part.trim();
        });
      },
      toString: function() {
        return JSON.stringify(this, null, 2);
      }
    };
    module.exports = SearchParameters;
  }
});

// node_modules/algoliasearch-helper/src/functions/orderBy.js
var require_orderBy = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/orderBy.js"(exports, module) {
    "use strict";
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== void 0;
        var valIsNull = value === null;
        var othIsDefined = other !== void 0;
        var othIsNull = other === null;
        if (!othIsNull && value > other || valIsNull && othIsDefined || !valIsDefined) {
          return 1;
        }
        if (!valIsNull && value < other || othIsNull && valIsDefined || !othIsDefined) {
          return -1;
        }
      }
      return 0;
    }
    function orderBy(collection, iteratees, orders) {
      if (!Array.isArray(collection)) {
        return [];
      }
      if (!Array.isArray(orders)) {
        orders = [];
      }
      var result = collection.map(function(value, index3) {
        return {
          criteria: iteratees.map(function(iteratee) {
            return value[iteratee];
          }),
          index: index3,
          value
        };
      });
      result.sort(function comparer(object, other) {
        var index3 = -1;
        while (++index3 < object.criteria.length) {
          var res = compareAscending(object.criteria[index3], other.criteria[index3]);
          if (res) {
            if (index3 >= orders.length) {
              return res;
            }
            if (orders[index3] === "desc") {
              return -res;
            }
            return res;
          }
        }
        return object.index - other.index;
      });
      return result.map(function(res) {
        return res.value;
      });
    }
    module.exports = orderBy;
  }
});

// node_modules/algoliasearch-helper/src/functions/compact.js
var require_compact = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/compact.js"(exports, module) {
    "use strict";
    module.exports = function compact(array) {
      if (!Array.isArray(array)) {
        return [];
      }
      return array.filter(Boolean);
    };
  }
});

// node_modules/algoliasearch-helper/src/functions/findIndex.js
var require_findIndex = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/findIndex.js"(exports, module) {
    "use strict";
    module.exports = function find2(array, comparator) {
      if (!Array.isArray(array)) {
        return -1;
      }
      for (var i4 = 0; i4 < array.length; i4++) {
        if (comparator(array[i4])) {
          return i4;
        }
      }
      return -1;
    };
  }
});

// node_modules/algoliasearch-helper/src/functions/formatSort.js
var require_formatSort = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/formatSort.js"(exports, module) {
    "use strict";
    var find2 = require_find();
    module.exports = function formatSort(sortBy, defaults) {
      var defaultInstructions = (defaults || []).map(function(sort) {
        return sort.split(":");
      });
      return sortBy.reduce(
        function preparePredicate(out, sort) {
          var sortInstruction = sort.split(":");
          var matchingDefault = find2(defaultInstructions, function(defaultInstruction) {
            return defaultInstruction[0] === sortInstruction[0];
          });
          if (sortInstruction.length > 1 || !matchingDefault) {
            out[0].push(sortInstruction[0]);
            out[1].push(sortInstruction[1]);
            return out;
          }
          out[0].push(matchingDefault[0]);
          out[1].push(matchingDefault[1]);
          return out;
        },
        [[], []]
      );
    };
  }
});

// node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js
var require_escapeFacetValue = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js"(exports, module) {
    "use strict";
    function escapeFacetValue2(value) {
      if (typeof value !== "string")
        return value;
      return String(value).replace(/^-/, "\\-");
    }
    function unescapeFacetValue2(value) {
      if (typeof value !== "string")
        return value;
      return value.replace(/^\\-/, "-");
    }
    module.exports = {
      escapeFacetValue: escapeFacetValue2,
      unescapeFacetValue: unescapeFacetValue2
    };
  }
});

// node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js
var require_generate_hierarchical_tree = __commonJS({
  "node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js"(exports, module) {
    "use strict";
    module.exports = generateTrees;
    var orderBy = require_orderBy();
    var find2 = require_find();
    var prepareHierarchicalFacetSortBy = require_formatSort();
    var fv = require_escapeFacetValue();
    var escapeFacetValue2 = fv.escapeFacetValue;
    var unescapeFacetValue2 = fv.unescapeFacetValue;
    function generateTrees(state) {
      return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {
        var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];
        var hierarchicalFacetRefinement = state.hierarchicalFacetsRefinements[hierarchicalFacet.name] && state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0] || "";
        var hierarchicalSeparator = state._getHierarchicalFacetSeparator(
          hierarchicalFacet
        );
        var hierarchicalRootPath = state._getHierarchicalRootPath(
          hierarchicalFacet
        );
        var hierarchicalShowParentLevel = state._getHierarchicalShowParentLevel(
          hierarchicalFacet
        );
        var sortBy = prepareHierarchicalFacetSortBy(
          state._getHierarchicalFacetSortBy(hierarchicalFacet)
        );
        var rootExhaustive = hierarchicalFacetResult.every(function(facetResult) {
          return facetResult.exhaustive;
        });
        var generateTreeFn = generateHierarchicalTree(
          sortBy,
          hierarchicalSeparator,
          hierarchicalRootPath,
          hierarchicalShowParentLevel,
          hierarchicalFacetRefinement
        );
        var results = hierarchicalFacetResult;
        if (hierarchicalRootPath) {
          results = hierarchicalFacetResult.slice(
            hierarchicalRootPath.split(hierarchicalSeparator).length
          );
        }
        return results.reduce(generateTreeFn, {
          name: state.hierarchicalFacets[hierarchicalFacetIndex].name,
          count: null,
          isRefined: true,
          path: null,
          escapedValue: null,
          exhaustive: rootExhaustive,
          data: null
        });
      };
    }
    function generateHierarchicalTree(sortBy, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel, currentRefinement) {
      return function generateTree(hierarchicalTree, hierarchicalFacetResult, currentHierarchicalLevel) {
        var parent = hierarchicalTree;
        if (currentHierarchicalLevel > 0) {
          var level = 0;
          parent = hierarchicalTree;
          while (level < currentHierarchicalLevel) {
            var data = parent && Array.isArray(parent.data) ? parent.data : [];
            parent = find2(data, function(subtree) {
              return subtree.isRefined;
            });
            level++;
          }
        }
        if (parent) {
          var picked = Object.keys(hierarchicalFacetResult.data).map(function(facetValue) {
            return [facetValue, hierarchicalFacetResult.data[facetValue]];
          }).filter(function(tuple) {
            var facetValue = tuple[0];
            return onlyMatchingTree(
              facetValue,
              parent.path || hierarchicalRootPath,
              currentRefinement,
              hierarchicalSeparator,
              hierarchicalRootPath,
              hierarchicalShowParentLevel
            );
          });
          parent.data = orderBy(
            picked.map(function(tuple) {
              var facetValue = tuple[0];
              var facetCount = tuple[1];
              return format(
                facetCount,
                facetValue,
                hierarchicalSeparator,
                unescapeFacetValue2(currentRefinement),
                hierarchicalFacetResult.exhaustive
              );
            }),
            sortBy[0],
            sortBy[1]
          );
        }
        return hierarchicalTree;
      };
    }
    function onlyMatchingTree(facetValue, parentPath, currentRefinement, hierarchicalSeparator, hierarchicalRootPath, hierarchicalShowParentLevel) {
      if (hierarchicalRootPath && (facetValue.indexOf(hierarchicalRootPath) !== 0 || hierarchicalRootPath === facetValue)) {
        return false;
      }
      return !hierarchicalRootPath && facetValue.indexOf(hierarchicalSeparator) === -1 || hierarchicalRootPath && facetValue.split(hierarchicalSeparator).length - hierarchicalRootPath.split(hierarchicalSeparator).length === 1 || facetValue.indexOf(hierarchicalSeparator) === -1 && currentRefinement.indexOf(hierarchicalSeparator) === -1 || currentRefinement.indexOf(facetValue) === 0 || facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 && (hierarchicalShowParentLevel || facetValue.indexOf(currentRefinement) === 0);
    }
    function format(facetCount, facetValue, hierarchicalSeparator, currentRefinement, exhaustive) {
      var parts = facetValue.split(hierarchicalSeparator);
      return {
        name: parts[parts.length - 1].trim(),
        path: facetValue,
        escapedValue: escapeFacetValue2(facetValue),
        count: facetCount,
        isRefined: currentRefinement === facetValue || currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,
        exhaustive,
        data: null
      };
    }
  }
});

// node_modules/algoliasearch-helper/src/SearchResults/index.js
var require_SearchResults = __commonJS({
  "node_modules/algoliasearch-helper/src/SearchResults/index.js"(exports, module) {
    "use strict";
    var merge = require_merge();
    var defaultsPure = require_defaultsPure();
    var orderBy = require_orderBy();
    var compact = require_compact();
    var find2 = require_find();
    var findIndex2 = require_findIndex();
    var formatSort = require_formatSort();
    var fv = require_escapeFacetValue();
    var escapeFacetValue2 = fv.escapeFacetValue;
    var unescapeFacetValue2 = fv.unescapeFacetValue;
    var generateHierarchicalTree = require_generate_hierarchical_tree();
    function getIndices(attributes) {
      var indices = {};
      attributes.forEach(function(val, idx) {
        indices[val] = idx;
      });
      return indices;
    }
    function assignFacetStats(dest, facetStats, key) {
      if (facetStats && facetStats[key]) {
        dest.stats = facetStats[key];
      }
    }
    function findMatchingHierarchicalFacetFromAttributeName(hierarchicalFacets, hierarchicalAttributeName) {
      return find2(hierarchicalFacets, function facetKeyMatchesAttribute(hierarchicalFacet) {
        var facetNames = hierarchicalFacet.attributes || [];
        return facetNames.indexOf(hierarchicalAttributeName) > -1;
      });
    }
    function SearchResults(state, results, options) {
      var mainSubResponse = results[0];
      this._rawResults = results;
      var self = this;
      Object.keys(mainSubResponse).forEach(function(key) {
        self[key] = mainSubResponse[key];
      });
      Object.keys(options || {}).forEach(function(key) {
        self[key] = options[key];
      });
      this.processingTimeMS = results.reduce(function(sum, result) {
        return result.processingTimeMS === void 0 ? sum : sum + result.processingTimeMS;
      }, 0);
      this.disjunctiveFacets = [];
      this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {
        return [];
      });
      this.facets = [];
      var disjunctiveFacets = state.getRefinedDisjunctiveFacets();
      var facetsIndices = getIndices(state.facets);
      var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);
      var nextDisjunctiveResult = 1;
      var mainFacets = mainSubResponse.facets || {};
      Object.keys(mainFacets).forEach(function(facetKey) {
        var facetValueObject = mainFacets[facetKey];
        var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(
          state.hierarchicalFacets,
          facetKey
        );
        if (hierarchicalFacet) {
          var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);
          var idxAttributeName = findIndex2(state.hierarchicalFacets, function(f8) {
            return f8.name === hierarchicalFacet.name;
          });
          self.hierarchicalFacets[idxAttributeName][facetIndex] = {
            attribute: facetKey,
            data: facetValueObject,
            exhaustive: mainSubResponse.exhaustiveFacetsCount
          };
        } else {
          var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;
          var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;
          var position;
          if (isFacetDisjunctive) {
            position = disjunctiveFacetsIndices[facetKey];
            self.disjunctiveFacets[position] = {
              name: facetKey,
              data: facetValueObject,
              exhaustive: mainSubResponse.exhaustiveFacetsCount
            };
            assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);
          }
          if (isFacetConjunctive) {
            position = facetsIndices[facetKey];
            self.facets[position] = {
              name: facetKey,
              data: facetValueObject,
              exhaustive: mainSubResponse.exhaustiveFacetsCount
            };
            assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);
          }
        }
      });
      this.hierarchicalFacets = compact(this.hierarchicalFacets);
      disjunctiveFacets.forEach(function(disjunctiveFacet) {
        var result = results[nextDisjunctiveResult];
        var facets = result && result.facets ? result.facets : {};
        var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);
        Object.keys(facets).forEach(function(dfacet) {
          var facetResults = facets[dfacet];
          var position;
          if (hierarchicalFacet) {
            position = findIndex2(state.hierarchicalFacets, function(f8) {
              return f8.name === hierarchicalFacet.name;
            });
            var attributeIndex = findIndex2(self.hierarchicalFacets[position], function(f8) {
              return f8.attribute === dfacet;
            });
            if (attributeIndex === -1) {
              return;
            }
            self.hierarchicalFacets[position][attributeIndex].data = merge(
              {},
              self.hierarchicalFacets[position][attributeIndex].data,
              facetResults
            );
          } else {
            position = disjunctiveFacetsIndices[dfacet];
            var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};
            self.disjunctiveFacets[position] = {
              name: dfacet,
              data: defaultsPure({}, facetResults, dataFromMainRequest),
              exhaustive: result.exhaustiveFacetsCount
            };
            assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);
            if (state.disjunctiveFacetsRefinements[dfacet]) {
              state.disjunctiveFacetsRefinements[dfacet].forEach(function(refinementValue) {
                if (!self.disjunctiveFacets[position].data[refinementValue] && state.disjunctiveFacetsRefinements[dfacet].indexOf(unescapeFacetValue2(refinementValue)) > -1) {
                  self.disjunctiveFacets[position].data[refinementValue] = 0;
                }
              });
            }
          }
        });
        nextDisjunctiveResult++;
      });
      state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {
        var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);
        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
        var currentRefinement = state.getHierarchicalRefinement(refinedFacet);
        if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {
          return;
        }
        results.slice(nextDisjunctiveResult).forEach(function(result) {
          var facets = result && result.facets ? result.facets : {};
          Object.keys(facets).forEach(function(dfacet) {
            var facetResults = facets[dfacet];
            var position = findIndex2(state.hierarchicalFacets, function(f8) {
              return f8.name === hierarchicalFacet.name;
            });
            var attributeIndex = findIndex2(self.hierarchicalFacets[position], function(f8) {
              return f8.attribute === dfacet;
            });
            if (attributeIndex === -1) {
              return;
            }
            var defaultData = {};
            if (currentRefinement.length > 0) {
              var root = currentRefinement[0].split(separator)[0];
              defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];
            }
            self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(
              defaultData,
              facetResults,
              self.hierarchicalFacets[position][attributeIndex].data
            );
          });
          nextDisjunctiveResult++;
        });
      });
      Object.keys(state.facetsExcludes).forEach(function(facetName) {
        var excludes = state.facetsExcludes[facetName];
        var position = facetsIndices[facetName];
        self.facets[position] = {
          name: facetName,
          data: mainSubResponse.facets[facetName],
          exhaustive: mainSubResponse.exhaustiveFacetsCount
        };
        excludes.forEach(function(facetValue) {
          self.facets[position] = self.facets[position] || { name: facetName };
          self.facets[position].data = self.facets[position].data || {};
          self.facets[position].data[facetValue] = 0;
        });
      });
      this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));
      this.facets = compact(this.facets);
      this.disjunctiveFacets = compact(this.disjunctiveFacets);
      this._state = state;
    }
    SearchResults.prototype.getFacetByName = function(name) {
      function predicate(facet) {
        return facet.name === name;
      }
      return find2(this.facets, predicate) || find2(this.disjunctiveFacets, predicate) || find2(this.hierarchicalFacets, predicate);
    };
    function extractNormalizedFacetValues(results, attribute) {
      function predicate(facet2) {
        return facet2.name === attribute;
      }
      if (results._state.isConjunctiveFacet(attribute)) {
        var facet = find2(results.facets, predicate);
        if (!facet)
          return [];
        return Object.keys(facet.data).map(function(name) {
          var value = escapeFacetValue2(name);
          return {
            name,
            escapedValue: value,
            count: facet.data[name],
            isRefined: results._state.isFacetRefined(attribute, value),
            isExcluded: results._state.isExcludeRefined(attribute, name)
          };
        });
      } else if (results._state.isDisjunctiveFacet(attribute)) {
        var disjunctiveFacet = find2(results.disjunctiveFacets, predicate);
        if (!disjunctiveFacet)
          return [];
        return Object.keys(disjunctiveFacet.data).map(function(name) {
          var value = escapeFacetValue2(name);
          return {
            name,
            escapedValue: value,
            count: disjunctiveFacet.data[name],
            isRefined: results._state.isDisjunctiveFacetRefined(attribute, value)
          };
        });
      } else if (results._state.isHierarchicalFacet(attribute)) {
        return find2(results.hierarchicalFacets, predicate);
      }
    }
    function recSort(sortFn, node, names, level) {
      level = level || 0;
      if (Array.isArray(node)) {
        return sortFn(node, names[level]);
      }
      if (!node.data || node.data.length === 0) {
        return node;
      }
      var children = node.data.map(function(childNode) {
        return recSort(sortFn, childNode, names, level + 1);
      });
      var sortedChildren = sortFn(children, names[level]);
      var newNode = defaultsPure({ data: sortedChildren }, node);
      return newNode;
    }
    SearchResults.DEFAULT_SORT = ["isRefined:desc", "count:desc", "name:asc"];
    function vanillaSortFn(order, data) {
      return data.sort(order);
    }
    function sortViaFacetOrdering(facetValues, facetOrdering) {
      var orderedFacets = [];
      var remainingFacets = [];
      var order = facetOrdering.order || [];
      var reverseOrder = order.reduce(function(acc, name, i4) {
        acc[name] = i4;
        return acc;
      }, {});
      facetValues.forEach(function(item) {
        var name = item.path || item.name;
        if (reverseOrder[name] !== void 0) {
          orderedFacets[reverseOrder[name]] = item;
        } else {
          remainingFacets.push(item);
        }
      });
      orderedFacets = orderedFacets.filter(function(facet) {
        return facet;
      });
      var sortRemainingBy = facetOrdering.sortRemainingBy;
      var ordering;
      if (sortRemainingBy === "hidden") {
        return orderedFacets;
      } else if (sortRemainingBy === "alpha") {
        ordering = [["path", "name"], ["asc", "asc"]];
      } else {
        ordering = [["count"], ["desc"]];
      }
      return orderedFacets.concat(
        orderBy(remainingFacets, ordering[0], ordering[1])
      );
    }
    function getFacetOrdering(results, attribute) {
      return results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.values && results.renderingContent.facetOrdering.values[attribute];
    }
    SearchResults.prototype.getFacetValues = function(attribute, opts) {
      var facetValues = extractNormalizedFacetValues(this, attribute);
      if (!facetValues) {
        return void 0;
      }
      var options = defaultsPure({}, opts, {
        sortBy: SearchResults.DEFAULT_SORT,
        facetOrdering: !(opts && opts.sortBy)
      });
      var results = this;
      var attributes;
      if (Array.isArray(facetValues)) {
        attributes = [attribute];
      } else {
        var config = results._state.getHierarchicalFacetByName(facetValues.name);
        attributes = config.attributes;
      }
      return recSort(function(data, facetName) {
        if (options.facetOrdering) {
          var facetOrdering = getFacetOrdering(results, facetName);
          if (Boolean(facetOrdering)) {
            return sortViaFacetOrdering(data, facetOrdering);
          }
        }
        if (Array.isArray(options.sortBy)) {
          var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);
          return orderBy(data, order[0], order[1]);
        } else if (typeof options.sortBy === "function") {
          return vanillaSortFn(options.sortBy, data);
        }
        throw new Error(
          "options.sortBy is optional but if defined it must be either an array of string (predicates) or a sorting function"
        );
      }, facetValues, attributes);
    };
    SearchResults.prototype.getFacetStats = function(attribute) {
      if (this._state.isConjunctiveFacet(attribute)) {
        return getFacetStatsIfAvailable(this.facets, attribute);
      } else if (this._state.isDisjunctiveFacet(attribute)) {
        return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);
      }
      return void 0;
    };
    function getFacetStatsIfAvailable(facetList, facetName) {
      var data = find2(facetList, function(facet) {
        return facet.name === facetName;
      });
      return data && data.stats;
    }
    SearchResults.prototype.getRefinements = function() {
      var state = this._state;
      var results = this;
      var res = [];
      Object.keys(state.facetsRefinements).forEach(function(attributeName) {
        state.facetsRefinements[attributeName].forEach(function(name) {
          res.push(getRefinement2(state, "facet", attributeName, name, results.facets));
        });
      });
      Object.keys(state.facetsExcludes).forEach(function(attributeName) {
        state.facetsExcludes[attributeName].forEach(function(name) {
          res.push(getRefinement2(state, "exclude", attributeName, name, results.facets));
        });
      });
      Object.keys(state.disjunctiveFacetsRefinements).forEach(function(attributeName) {
        state.disjunctiveFacetsRefinements[attributeName].forEach(function(name) {
          res.push(getRefinement2(state, "disjunctive", attributeName, name, results.disjunctiveFacets));
        });
      });
      Object.keys(state.hierarchicalFacetsRefinements).forEach(function(attributeName) {
        state.hierarchicalFacetsRefinements[attributeName].forEach(function(name) {
          res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));
        });
      });
      Object.keys(state.numericRefinements).forEach(function(attributeName) {
        var operators = state.numericRefinements[attributeName];
        Object.keys(operators).forEach(function(operator) {
          operators[operator].forEach(function(value) {
            res.push({
              type: "numeric",
              attributeName,
              name: value,
              numericValue: value,
              operator
            });
          });
        });
      });
      state.tagRefinements.forEach(function(name) {
        res.push({ type: "tag", attributeName: "_tags", name });
      });
      return res;
    };
    function getRefinement2(state, type, attributeName, name, resultsFacets) {
      var facet = find2(resultsFacets, function(f8) {
        return f8.name === attributeName;
      });
      var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;
      var exhaustive = facet && facet.exhaustive || false;
      return {
        type,
        attributeName,
        name,
        count,
        exhaustive
      };
    }
    function getHierarchicalRefinement(state, attributeName, name, resultsFacets) {
      var facetDeclaration = state.getHierarchicalFacetByName(attributeName);
      var separator = state._getHierarchicalFacetSeparator(facetDeclaration);
      var split = name.split(separator);
      var rootFacet = find2(resultsFacets, function(facet2) {
        return facet2.name === attributeName;
      });
      var facet = split.reduce(function(intermediateFacet, part) {
        var newFacet = intermediateFacet && find2(intermediateFacet.data, function(f8) {
          return f8.name === part;
        });
        return newFacet !== void 0 ? newFacet : intermediateFacet;
      }, rootFacet);
      var count = facet && facet.count || 0;
      var exhaustive = facet && facet.exhaustive || false;
      var path = facet && facet.path || "";
      return {
        type: "hierarchical",
        attributeName,
        name: path,
        count,
        exhaustive
      };
    }
    module.exports = SearchResults;
  }
});

// node_modules/@algolia/events/events.js
var require_events = __commonJS({
  "node_modules/@algolia/events/events.js"(exports, module) {
    function EventEmitter2() {
      this._events = this._events || {};
      this._maxListeners = this._maxListeners || void 0;
    }
    module.exports = EventEmitter2;
    EventEmitter2.prototype._events = void 0;
    EventEmitter2.prototype._maxListeners = void 0;
    EventEmitter2.defaultMaxListeners = 10;
    EventEmitter2.prototype.setMaxListeners = function(n5) {
      if (!isNumber(n5) || n5 < 0 || isNaN(n5))
        throw TypeError("n must be a positive number");
      this._maxListeners = n5;
      return this;
    };
    EventEmitter2.prototype.emit = function(type) {
      var er, handler, len, args, i4, listeners;
      if (!this._events)
        this._events = {};
      if (type === "error") {
        if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
          er = arguments[1];
          if (er instanceof Error) {
            throw er;
          } else {
            var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
            err.context = er;
            throw err;
          }
        }
      }
      handler = this._events[type];
      if (isUndefined(handler))
        return false;
      if (isFunction(handler)) {
        switch (arguments.length) {
          case 1:
            handler.call(this);
            break;
          case 2:
            handler.call(this, arguments[1]);
            break;
          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          default:
            args = Array.prototype.slice.call(arguments, 1);
            handler.apply(this, args);
        }
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1);
        listeners = handler.slice();
        len = listeners.length;
        for (i4 = 0; i4 < len; i4++)
          listeners[i4].apply(this, args);
      }
      return true;
    };
    EventEmitter2.prototype.addListener = function(type, listener) {
      var m6;
      if (!isFunction(listener))
        throw TypeError("listener must be a function");
      if (!this._events)
        this._events = {};
      if (this._events.newListener)
        this.emit(
          "newListener",
          type,
          isFunction(listener.listener) ? listener.listener : listener
        );
      if (!this._events[type])
        this._events[type] = listener;
      else if (isObject(this._events[type]))
        this._events[type].push(listener);
      else
        this._events[type] = [this._events[type], listener];
      if (isObject(this._events[type]) && !this._events[type].warned) {
        if (!isUndefined(this._maxListeners)) {
          m6 = this._maxListeners;
        } else {
          m6 = EventEmitter2.defaultMaxListeners;
        }
        if (m6 && m6 > 0 && this._events[type].length > m6) {
          this._events[type].warned = true;
          console.error(
            "(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",
            this._events[type].length
          );
          if (typeof console.trace === "function") {
            console.trace();
          }
        }
      }
      return this;
    };
    EventEmitter2.prototype.on = EventEmitter2.prototype.addListener;
    EventEmitter2.prototype.once = function(type, listener) {
      if (!isFunction(listener))
        throw TypeError("listener must be a function");
      var fired = false;
      function g4() {
        this.removeListener(type, g4);
        if (!fired) {
          fired = true;
          listener.apply(this, arguments);
        }
      }
      g4.listener = listener;
      this.on(type, g4);
      return this;
    };
    EventEmitter2.prototype.removeListener = function(type, listener) {
      var list, position, length, i4;
      if (!isFunction(listener))
        throw TypeError("listener must be a function");
      if (!this._events || !this._events[type])
        return this;
      list = this._events[type];
      length = list.length;
      position = -1;
      if (list === listener || isFunction(list.listener) && list.listener === listener) {
        delete this._events[type];
        if (this._events.removeListener)
          this.emit("removeListener", type, listener);
      } else if (isObject(list)) {
        for (i4 = length; i4-- > 0; ) {
          if (list[i4] === listener || list[i4].listener && list[i4].listener === listener) {
            position = i4;
            break;
          }
        }
        if (position < 0)
          return this;
        if (list.length === 1) {
          list.length = 0;
          delete this._events[type];
        } else {
          list.splice(position, 1);
        }
        if (this._events.removeListener)
          this.emit("removeListener", type, listener);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function(type) {
      var key, listeners;
      if (!this._events)
        return this;
      if (!this._events.removeListener) {
        if (arguments.length === 0)
          this._events = {};
        else if (this._events[type])
          delete this._events[type];
        return this;
      }
      if (arguments.length === 0) {
        for (key in this._events) {
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = {};
        return this;
      }
      listeners = this._events[type];
      if (isFunction(listeners)) {
        this.removeListener(type, listeners);
      } else if (listeners) {
        while (listeners.length)
          this.removeListener(type, listeners[listeners.length - 1]);
      }
      delete this._events[type];
      return this;
    };
    EventEmitter2.prototype.listeners = function(type) {
      var ret;
      if (!this._events || !this._events[type])
        ret = [];
      else if (isFunction(this._events[type]))
        ret = [this._events[type]];
      else
        ret = this._events[type].slice();
      return ret;
    };
    EventEmitter2.prototype.listenerCount = function(type) {
      if (this._events) {
        var evlistener = this._events[type];
        if (isFunction(evlistener))
          return 1;
        else if (evlistener)
          return evlistener.length;
      }
      return 0;
    };
    EventEmitter2.listenerCount = function(emitter, type) {
      return emitter.listenerCount(type);
    };
    function isFunction(arg) {
      return typeof arg === "function";
    }
    function isNumber(arg) {
      return typeof arg === "number";
    }
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    function isUndefined(arg) {
      return arg === void 0;
    }
  }
});

// node_modules/algoliasearch-helper/src/functions/inherits.js
var require_inherits = __commonJS({
  "node_modules/algoliasearch-helper/src/functions/inherits.js"(exports, module) {
    "use strict";
    function inherits(ctor, superCtor) {
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
    module.exports = inherits;
  }
});

// node_modules/algoliasearch-helper/src/DerivedHelper/index.js
var require_DerivedHelper = __commonJS({
  "node_modules/algoliasearch-helper/src/DerivedHelper/index.js"(exports, module) {
    "use strict";
    var EventEmitter2 = require_events();
    var inherits = require_inherits();
    function DerivedHelper(mainHelper, fn) {
      this.main = mainHelper;
      this.fn = fn;
      this.lastResults = null;
    }
    inherits(DerivedHelper, EventEmitter2);
    DerivedHelper.prototype.detach = function() {
      this.removeAllListeners();
      this.main.detachDerivedHelper(this);
    };
    DerivedHelper.prototype.getModifiedState = function(parameters) {
      return this.fn(parameters);
    };
    module.exports = DerivedHelper;
  }
});

// node_modules/algoliasearch-helper/src/requestBuilder.js
var require_requestBuilder = __commonJS({
  "node_modules/algoliasearch-helper/src/requestBuilder.js"(exports, module) {
    "use strict";
    var merge = require_merge();
    function sortObject(obj) {
      return Object.keys(obj).sort(function(a10, b2) {
        return a10.localeCompare(b2);
      }).reduce(function(acc, curr) {
        acc[curr] = obj[curr];
        return acc;
      }, {});
    }
    var requestBuilder = {
      _getQueries: function getQueries(index3, state) {
        var queries = [];
        queries.push({
          indexName: index3,
          params: requestBuilder._getHitsSearchParams(state)
        });
        state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {
          queries.push({
            indexName: index3,
            params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)
          });
        });
        state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {
          var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);
          var currentRefinement = state.getHierarchicalRefinement(refinedFacet);
          var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
          if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {
            var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(
              function createFiltersMap(map, segment, level) {
                return map.concat({
                  attribute: hierarchicalFacet.attributes[level],
                  value: level === 0 ? segment : [map[map.length - 1].value, segment].join(separator)
                });
              },
              []
            );
            filtersMap.forEach(function(filter, level) {
              var params = requestBuilder._getDisjunctiveFacetSearchParams(
                state,
                filter.attribute,
                level === 0
              );
              function hasHierarchicalFacetFilter(value) {
                return hierarchicalFacet.attributes.some(function(attribute) {
                  return attribute === value.split(":")[0];
                });
              }
              var filteredFacetFilters = (params.facetFilters || []).reduce(function(acc, facetFilter) {
                if (Array.isArray(facetFilter)) {
                  var filtered = facetFilter.filter(function(filterValue) {
                    return !hasHierarchicalFacetFilter(filterValue);
                  });
                  if (filtered.length > 0) {
                    acc.push(filtered);
                  }
                }
                if (typeof facetFilter === "string" && !hasHierarchicalFacetFilter(facetFilter)) {
                  acc.push(facetFilter);
                }
                return acc;
              }, []);
              var parent = filtersMap[level - 1];
              if (level > 0) {
                params.facetFilters = filteredFacetFilters.concat(parent.attribute + ":" + parent.value);
              } else {
                params.facetFilters = filteredFacetFilters.length > 0 ? filteredFacetFilters : void 0;
              }
              queries.push({ indexName: index3, params });
            });
          }
        });
        return queries;
      },
      _getHitsSearchParams: function(state) {
        var facets = state.facets.concat(state.disjunctiveFacets).concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));
        var facetFilters = requestBuilder._getFacetFilters(state);
        var numericFilters = requestBuilder._getNumericFilters(state);
        var tagFilters = requestBuilder._getTagFilters(state);
        var additionalParams = {
          facets: facets.indexOf("*") > -1 ? ["*"] : facets,
          tagFilters
        };
        if (facetFilters.length > 0) {
          additionalParams.facetFilters = facetFilters;
        }
        if (numericFilters.length > 0) {
          additionalParams.numericFilters = numericFilters;
        }
        return sortObject(merge({}, state.getQueryParams(), additionalParams));
      },
      _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {
        var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);
        var numericFilters = requestBuilder._getNumericFilters(state, facet);
        var tagFilters = requestBuilder._getTagFilters(state);
        var additionalParams = {
          hitsPerPage: 0,
          page: 0,
          analytics: false,
          clickAnalytics: false
        };
        if (tagFilters.length > 0) {
          additionalParams.tagFilters = tagFilters;
        }
        var hierarchicalFacet = state.getHierarchicalFacetByName(facet);
        if (hierarchicalFacet) {
          additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(
            state,
            hierarchicalFacet,
            hierarchicalRootLevel
          );
        } else {
          additionalParams.facets = facet;
        }
        if (numericFilters.length > 0) {
          additionalParams.numericFilters = numericFilters;
        }
        if (facetFilters.length > 0) {
          additionalParams.facetFilters = facetFilters;
        }
        return sortObject(merge({}, state.getQueryParams(), additionalParams));
      },
      _getNumericFilters: function(state, facetName) {
        if (state.numericFilters) {
          return state.numericFilters;
        }
        var numericFilters = [];
        Object.keys(state.numericRefinements).forEach(function(attribute) {
          var operators = state.numericRefinements[attribute] || {};
          Object.keys(operators).forEach(function(operator) {
            var values = operators[operator] || [];
            if (facetName !== attribute) {
              values.forEach(function(value) {
                if (Array.isArray(value)) {
                  var vs = value.map(function(v5) {
                    return attribute + operator + v5;
                  });
                  numericFilters.push(vs);
                } else {
                  numericFilters.push(attribute + operator + value);
                }
              });
            }
          });
        });
        return numericFilters;
      },
      _getTagFilters: function(state) {
        if (state.tagFilters) {
          return state.tagFilters;
        }
        return state.tagRefinements.join(",");
      },
      _getFacetFilters: function(state, facet, hierarchicalRootLevel) {
        var facetFilters = [];
        var facetsRefinements = state.facetsRefinements || {};
        Object.keys(facetsRefinements).forEach(function(facetName) {
          var facetValues = facetsRefinements[facetName] || [];
          facetValues.forEach(function(facetValue) {
            facetFilters.push(facetName + ":" + facetValue);
          });
        });
        var facetsExcludes = state.facetsExcludes || {};
        Object.keys(facetsExcludes).forEach(function(facetName) {
          var facetValues = facetsExcludes[facetName] || [];
          facetValues.forEach(function(facetValue) {
            facetFilters.push(facetName + ":-" + facetValue);
          });
        });
        var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};
        Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {
          var facetValues = disjunctiveFacetsRefinements[facetName] || [];
          if (facetName === facet || !facetValues || facetValues.length === 0) {
            return;
          }
          var orFilters = [];
          facetValues.forEach(function(facetValue) {
            orFilters.push(facetName + ":" + facetValue);
          });
          facetFilters.push(orFilters);
        });
        var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};
        Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {
          var facetValues = hierarchicalFacetsRefinements[facetName] || [];
          var facetValue = facetValues[0];
          if (facetValue === void 0) {
            return;
          }
          var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);
          var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
          var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);
          var attributeToRefine;
          var attributesIndex;
          if (facet === facetName) {
            if (facetValue.indexOf(separator) === -1 || !rootPath && hierarchicalRootLevel === true || rootPath && rootPath.split(separator).length === facetValue.split(separator).length) {
              return;
            }
            if (!rootPath) {
              attributesIndex = facetValue.split(separator).length - 2;
              facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));
            } else {
              attributesIndex = rootPath.split(separator).length - 1;
              facetValue = rootPath;
            }
            attributeToRefine = hierarchicalFacet.attributes[attributesIndex];
          } else {
            attributesIndex = facetValue.split(separator).length - 1;
            attributeToRefine = hierarchicalFacet.attributes[attributesIndex];
          }
          if (attributeToRefine) {
            facetFilters.push([attributeToRefine + ":" + facetValue]);
          }
        });
        return facetFilters;
      },
      _getHitsHierarchicalFacetsAttributes: function(state) {
        var out = [];
        return state.hierarchicalFacets.reduce(
          function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {
            var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];
            if (!hierarchicalRefinement) {
              allAttributes.push(hierarchicalFacet.attributes[0]);
              return allAttributes;
            }
            var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
            var level = hierarchicalRefinement.split(separator).length;
            var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);
            return allAttributes.concat(newAttributes);
          },
          out
        );
      },
      _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {
        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);
        if (rootLevel === true) {
          var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);
          var attributeIndex = 0;
          if (rootPath) {
            attributeIndex = rootPath.split(separator).length;
          }
          return [hierarchicalFacet.attributes[attributeIndex]];
        }
        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || "";
        var parentLevel = hierarchicalRefinement.split(separator).length - 1;
        return hierarchicalFacet.attributes.slice(0, parentLevel + 1);
      },
      getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {
        var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ? state.clearRefinements(facetName) : state;
        var searchForFacetSearchParameters = {
          facetQuery: query,
          facetName
        };
        if (typeof maxFacetHits === "number") {
          searchForFacetSearchParameters.maxFacetHits = maxFacetHits;
        }
        return sortObject(merge(
          {},
          requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),
          searchForFacetSearchParameters
        ));
      }
    };
    module.exports = requestBuilder;
  }
});

// node_modules/algoliasearch-helper/src/version.js
var require_version = __commonJS({
  "node_modules/algoliasearch-helper/src/version.js"(exports, module) {
    "use strict";
    module.exports = "3.11.1";
  }
});

// node_modules/algoliasearch-helper/src/algoliasearch.helper.js
var require_algoliasearch_helper = __commonJS({
  "node_modules/algoliasearch-helper/src/algoliasearch.helper.js"(exports, module) {
    "use strict";
    var SearchParameters = require_SearchParameters();
    var SearchResults = require_SearchResults();
    var DerivedHelper = require_DerivedHelper();
    var requestBuilder = require_requestBuilder();
    var EventEmitter2 = require_events();
    var inherits = require_inherits();
    var objectHasKeys = require_objectHasKeys();
    var omit = require_omit();
    var merge = require_merge();
    var version2 = require_version();
    var escapeFacetValue2 = require_escapeFacetValue().escapeFacetValue;
    function AlgoliaSearchHelper(client, index3, options) {
      if (typeof client.addAlgoliaAgent === "function") {
        client.addAlgoliaAgent("JS Helper (" + version2 + ")");
      }
      this.setClient(client);
      var opts = options || {};
      opts.index = index3;
      this.state = SearchParameters.make(opts);
      this.lastResults = null;
      this._queryId = 0;
      this._lastQueryIdReceived = -1;
      this.derivedHelpers = [];
      this._currentNbQueries = 0;
    }
    inherits(AlgoliaSearchHelper, EventEmitter2);
    AlgoliaSearchHelper.prototype.search = function() {
      this._search({ onlyWithDerivedHelpers: false });
      return this;
    };
    AlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function() {
      this._search({ onlyWithDerivedHelpers: true });
      return this;
    };
    AlgoliaSearchHelper.prototype.getQuery = function() {
      var state = this.state;
      return requestBuilder._getHitsSearchParams(state);
    };
    AlgoliaSearchHelper.prototype.searchOnce = function(options, cb) {
      var tempState = !options ? this.state : this.state.setQueryParameters(options);
      var queries = requestBuilder._getQueries(tempState.index, tempState);
      var self = this;
      this._currentNbQueries++;
      this.emit("searchOnce", {
        state: tempState
      });
      if (cb) {
        this.client.search(queries).then(function(content) {
          self._currentNbQueries--;
          if (self._currentNbQueries === 0) {
            self.emit("searchQueueEmpty");
          }
          cb(null, new SearchResults(tempState, content.results), tempState);
        }).catch(function(err) {
          self._currentNbQueries--;
          if (self._currentNbQueries === 0) {
            self.emit("searchQueueEmpty");
          }
          cb(err, null, tempState);
        });
        return void 0;
      }
      return this.client.search(queries).then(function(content) {
        self._currentNbQueries--;
        if (self._currentNbQueries === 0)
          self.emit("searchQueueEmpty");
        return {
          content: new SearchResults(tempState, content.results),
          state: tempState,
          _originalResponse: content
        };
      }, function(e7) {
        self._currentNbQueries--;
        if (self._currentNbQueries === 0)
          self.emit("searchQueueEmpty");
        throw e7;
      });
    };
    AlgoliaSearchHelper.prototype.findAnswers = function(options) {
      var state = this.state;
      var derivedHelper = this.derivedHelpers[0];
      if (!derivedHelper) {
        return Promise.resolve([]);
      }
      var derivedState = derivedHelper.getModifiedState(state);
      var data = merge(
        {
          attributesForPrediction: options.attributesForPrediction,
          nbHits: options.nbHits
        },
        {
          params: omit(requestBuilder._getHitsSearchParams(derivedState), [
            "attributesToSnippet",
            "hitsPerPage",
            "restrictSearchableAttributes",
            "snippetEllipsisText"
          ])
        }
      );
      var errorMessage = "search for answers was called, but this client does not have a function client.initIndex(index).findAnswers";
      if (typeof this.client.initIndex !== "function") {
        throw new Error(errorMessage);
      }
      var index3 = this.client.initIndex(derivedState.index);
      if (typeof index3.findAnswers !== "function") {
        throw new Error(errorMessage);
      }
      return index3.findAnswers(derivedState.query, options.queryLanguages, data);
    };
    AlgoliaSearchHelper.prototype.searchForFacetValues = function(facet, query, maxFacetHits, userState) {
      var clientHasSFFV = typeof this.client.searchForFacetValues === "function";
      var clientHasInitIndex = typeof this.client.initIndex === "function";
      if (!clientHasSFFV && !clientHasInitIndex && typeof this.client.search !== "function") {
        throw new Error(
          "search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues"
        );
      }
      var state = this.state.setQueryParameters(userState || {});
      var isDisjunctive = state.isDisjunctiveFacet(facet);
      var algoliaQuery = requestBuilder.getSearchForFacetQuery(facet, query, maxFacetHits, state);
      this._currentNbQueries++;
      var self = this;
      var searchForFacetValuesPromise;
      if (clientHasSFFV) {
        searchForFacetValuesPromise = this.client.searchForFacetValues([
          { indexName: state.index, params: algoliaQuery }
        ]);
      } else if (clientHasInitIndex) {
        searchForFacetValuesPromise = this.client.initIndex(state.index).searchForFacetValues(algoliaQuery);
      } else {
        delete algoliaQuery.facetName;
        searchForFacetValuesPromise = this.client.search([
          {
            type: "facet",
            facet,
            indexName: state.index,
            params: algoliaQuery
          }
        ]).then(function processResponse(response) {
          return response.results[0];
        });
      }
      this.emit("searchForFacetValues", {
        state,
        facet,
        query
      });
      return searchForFacetValuesPromise.then(function addIsRefined(content) {
        self._currentNbQueries--;
        if (self._currentNbQueries === 0)
          self.emit("searchQueueEmpty");
        content = Array.isArray(content) ? content[0] : content;
        content.facetHits.forEach(function(f8) {
          f8.escapedValue = escapeFacetValue2(f8.value);
          f8.isRefined = isDisjunctive ? state.isDisjunctiveFacetRefined(facet, f8.escapedValue) : state.isFacetRefined(facet, f8.escapedValue);
        });
        return content;
      }, function(e7) {
        self._currentNbQueries--;
        if (self._currentNbQueries === 0)
          self.emit("searchQueueEmpty");
        throw e7;
      });
    };
    AlgoliaSearchHelper.prototype.setQuery = function(q) {
      this._change({
        state: this.state.resetPage().setQuery(q),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.clearRefinements = function(name) {
      this._change({
        state: this.state.resetPage().clearRefinements(name),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.clearTags = function() {
      this._change({
        state: this.state.resetPage().clearTags(),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addDisjunctiveRefine = function() {
      return this.addDisjunctiveFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().addHierarchicalFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addNumericRefinement = function(attribute, operator, value) {
      this._change({
        state: this.state.resetPage().addNumericRefinement(attribute, operator, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().addFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addRefine = function() {
      return this.addFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.addFacetExclusion = function(facet, value) {
      this._change({
        state: this.state.resetPage().addExcludeRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.addExclude = function() {
      return this.addFacetExclusion.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.addTag = function(tag) {
      this._change({
        state: this.state.resetPage().addTagRefinement(tag),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeNumericRefinement = function(attribute, operator, value) {
      this._change({
        state: this.state.resetPage().removeNumericRefinement(attribute, operator, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().removeDisjunctiveFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function() {
      return this.removeDisjunctiveFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function(facet) {
      this._change({
        state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().removeFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeRefine = function() {
      return this.removeFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.removeFacetExclusion = function(facet, value) {
      this._change({
        state: this.state.resetPage().removeExcludeRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.removeExclude = function() {
      return this.removeFacetExclusion.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.removeTag = function(tag) {
      this._change({
        state: this.state.resetPage().removeTagRefinement(tag),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.toggleFacetExclusion = function(facet, value) {
      this._change({
        state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.toggleExclude = function() {
      return this.toggleFacetExclusion.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.toggleRefinement = function(facet, value) {
      return this.toggleFacetRefinement(facet, value);
    };
    AlgoliaSearchHelper.prototype.toggleFacetRefinement = function(facet, value) {
      this._change({
        state: this.state.resetPage().toggleFacetRefinement(facet, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.toggleRefine = function() {
      return this.toggleFacetRefinement.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.toggleTag = function(tag) {
      this._change({
        state: this.state.resetPage().toggleTagRefinement(tag),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.nextPage = function() {
      var page = this.state.page || 0;
      return this.setPage(page + 1);
    };
    AlgoliaSearchHelper.prototype.previousPage = function() {
      var page = this.state.page || 0;
      return this.setPage(page - 1);
    };
    function setCurrentPage(page) {
      if (page < 0)
        throw new Error("Page requested below 0.");
      this._change({
        state: this.state.setPage(page),
        isPageReset: false
      });
      return this;
    }
    AlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;
    AlgoliaSearchHelper.prototype.setPage = setCurrentPage;
    AlgoliaSearchHelper.prototype.setIndex = function(name) {
      this._change({
        state: this.state.resetPage().setIndex(name),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.setQueryParameter = function(parameter, value) {
      this._change({
        state: this.state.resetPage().setQueryParameter(parameter, value),
        isPageReset: true
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.setState = function(newState) {
      this._change({
        state: SearchParameters.make(newState),
        isPageReset: false
      });
      return this;
    };
    AlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent = function(newState) {
      this.state = new SearchParameters(newState);
      return this;
    };
    AlgoliaSearchHelper.prototype.hasRefinements = function(attribute) {
      if (objectHasKeys(this.state.getNumericRefinements(attribute))) {
        return true;
      } else if (this.state.isConjunctiveFacet(attribute)) {
        return this.state.isFacetRefined(attribute);
      } else if (this.state.isDisjunctiveFacet(attribute)) {
        return this.state.isDisjunctiveFacetRefined(attribute);
      } else if (this.state.isHierarchicalFacet(attribute)) {
        return this.state.isHierarchicalFacetRefined(attribute);
      }
      return false;
    };
    AlgoliaSearchHelper.prototype.isExcluded = function(facet, value) {
      return this.state.isExcludeRefined(facet, value);
    };
    AlgoliaSearchHelper.prototype.isDisjunctiveRefined = function(facet, value) {
      return this.state.isDisjunctiveFacetRefined(facet, value);
    };
    AlgoliaSearchHelper.prototype.hasTag = function(tag) {
      return this.state.isTagRefined(tag);
    };
    AlgoliaSearchHelper.prototype.isTagRefined = function() {
      return this.hasTagRefinements.apply(this, arguments);
    };
    AlgoliaSearchHelper.prototype.getIndex = function() {
      return this.state.index;
    };
    function getCurrentPage() {
      return this.state.page;
    }
    AlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;
    AlgoliaSearchHelper.prototype.getPage = getCurrentPage;
    AlgoliaSearchHelper.prototype.getTags = function() {
      return this.state.tagRefinements;
    };
    AlgoliaSearchHelper.prototype.getRefinements = function(facetName) {
      var refinements = [];
      if (this.state.isConjunctiveFacet(facetName)) {
        var conjRefinements = this.state.getConjunctiveRefinements(facetName);
        conjRefinements.forEach(function(r15) {
          refinements.push({
            value: r15,
            type: "conjunctive"
          });
        });
        var excludeRefinements = this.state.getExcludeRefinements(facetName);
        excludeRefinements.forEach(function(r15) {
          refinements.push({
            value: r15,
            type: "exclude"
          });
        });
      } else if (this.state.isDisjunctiveFacet(facetName)) {
        var disjRefinements = this.state.getDisjunctiveRefinements(facetName);
        disjRefinements.forEach(function(r15) {
          refinements.push({
            value: r15,
            type: "disjunctive"
          });
        });
      }
      var numericRefinements = this.state.getNumericRefinements(facetName);
      Object.keys(numericRefinements).forEach(function(operator) {
        var value = numericRefinements[operator];
        refinements.push({
          value,
          operator,
          type: "numeric"
        });
      });
      return refinements;
    };
    AlgoliaSearchHelper.prototype.getNumericRefinement = function(attribute, operator) {
      return this.state.getNumericRefinement(attribute, operator);
    };
    AlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function(facetName) {
      return this.state.getHierarchicalFacetBreadcrumb(facetName);
    };
    AlgoliaSearchHelper.prototype._search = function(options) {
      var state = this.state;
      var states = [];
      var mainQueries = [];
      if (!options.onlyWithDerivedHelpers) {
        mainQueries = requestBuilder._getQueries(state.index, state);
        states.push({
          state,
          queriesCount: mainQueries.length,
          helper: this
        });
        this.emit("search", {
          state,
          results: this.lastResults
        });
      }
      var derivedQueries = this.derivedHelpers.map(function(derivedHelper) {
        var derivedState = derivedHelper.getModifiedState(state);
        var derivedStateQueries = requestBuilder._getQueries(derivedState.index, derivedState);
        states.push({
          state: derivedState,
          queriesCount: derivedStateQueries.length,
          helper: derivedHelper
        });
        derivedHelper.emit("search", {
          state: derivedState,
          results: derivedHelper.lastResults
        });
        return derivedStateQueries;
      });
      var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);
      var queryId = this._queryId++;
      this._currentNbQueries++;
      try {
        this.client.search(queries).then(this._dispatchAlgoliaResponse.bind(this, states, queryId)).catch(this._dispatchAlgoliaError.bind(this, queryId));
      } catch (error) {
        this.emit("error", {
          error
        });
      }
    };
    AlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function(states, queryId, content) {
      if (queryId < this._lastQueryIdReceived) {
        return;
      }
      this._currentNbQueries -= queryId - this._lastQueryIdReceived;
      this._lastQueryIdReceived = queryId;
      if (this._currentNbQueries === 0)
        this.emit("searchQueueEmpty");
      var results = content.results.slice();
      states.forEach(function(s6) {
        var state = s6.state;
        var queriesCount = s6.queriesCount;
        var helper = s6.helper;
        var specificResults = results.splice(0, queriesCount);
        var formattedResponse = helper.lastResults = new SearchResults(state, specificResults);
        helper.emit("result", {
          results: formattedResponse,
          state
        });
      });
    };
    AlgoliaSearchHelper.prototype._dispatchAlgoliaError = function(queryId, error) {
      if (queryId < this._lastQueryIdReceived) {
        return;
      }
      this._currentNbQueries -= queryId - this._lastQueryIdReceived;
      this._lastQueryIdReceived = queryId;
      this.emit("error", {
        error
      });
      if (this._currentNbQueries === 0)
        this.emit("searchQueueEmpty");
    };
    AlgoliaSearchHelper.prototype.containsRefinement = function(query, facetFilters, numericFilters, tagFilters) {
      return query || facetFilters.length !== 0 || numericFilters.length !== 0 || tagFilters.length !== 0;
    };
    AlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function(facet) {
      return this.state.disjunctiveRefinements[facet] && this.state.disjunctiveRefinements[facet].length > 0;
    };
    AlgoliaSearchHelper.prototype._change = function(event) {
      var state = event.state;
      var isPageReset = event.isPageReset;
      if (state !== this.state) {
        this.state = state;
        this.emit("change", {
          state: this.state,
          results: this.lastResults,
          isPageReset
        });
      }
    };
    AlgoliaSearchHelper.prototype.clearCache = function() {
      this.client.clearCache && this.client.clearCache();
      return this;
    };
    AlgoliaSearchHelper.prototype.setClient = function(newClient) {
      if (this.client === newClient)
        return this;
      if (typeof newClient.addAlgoliaAgent === "function") {
        newClient.addAlgoliaAgent("JS Helper (" + version2 + ")");
      }
      this.client = newClient;
      return this;
    };
    AlgoliaSearchHelper.prototype.getClient = function() {
      return this.client;
    };
    AlgoliaSearchHelper.prototype.derive = function(fn) {
      var derivedHelper = new DerivedHelper(this, fn);
      this.derivedHelpers.push(derivedHelper);
      return derivedHelper;
    };
    AlgoliaSearchHelper.prototype.detachDerivedHelper = function(derivedHelper) {
      var pos = this.derivedHelpers.indexOf(derivedHelper);
      if (pos === -1)
        throw new Error("Derived helper already detached");
      this.derivedHelpers.splice(pos, 1);
    };
    AlgoliaSearchHelper.prototype.hasPendingRequests = function() {
      return this._currentNbQueries > 0;
    };
    module.exports = AlgoliaSearchHelper;
  }
});

// node_modules/algoliasearch-helper/index.js
var require_algoliasearch_helper2 = __commonJS({
  "node_modules/algoliasearch-helper/index.js"(exports, module) {
    "use strict";
    var AlgoliaSearchHelper = require_algoliasearch_helper();
    var SearchParameters = require_SearchParameters();
    var SearchResults = require_SearchResults();
    function algoliasearchHelper5(client, index3, opts) {
      return new AlgoliaSearchHelper(client, index3, opts);
    }
    algoliasearchHelper5.version = require_version();
    algoliasearchHelper5.AlgoliaSearchHelper = AlgoliaSearchHelper;
    algoliasearchHelper5.SearchParameters = SearchParameters;
    algoliasearchHelper5.SearchResults = SearchResults;
    module.exports = algoliasearchHelper5;
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i4 = 0; i4 < 256; ++i4) {
        array.push("%" + ((i4 < 16 ? "0" : "") + i4.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j2 = 0; j2 < obj.length; ++j2) {
            if (typeof obj[j2] !== "undefined") {
              compacted.push(obj[j2]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i4 = 0; i4 < source.length; ++i4) {
        if (typeof source[i4] !== "undefined") {
          obj[i4] = source[i4];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i4) {
          if (has.call(target, i4)) {
            var targetItem = target[i4];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i4] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i4] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e7) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i4 = 0; i4 < string.length; ++i4) {
        var c13 = string.charCodeAt(i4);
        if (c13 === 45 || c13 === 46 || c13 === 95 || c13 === 126 || c13 >= 48 && c13 <= 57 || c13 >= 65 && c13 <= 90 || c13 >= 97 && c13 <= 122 || format === formats.RFC1738 && (c13 === 40 || c13 === 41)) {
          out += string.charAt(i4);
          continue;
        }
        if (c13 < 128) {
          out = out + hexTable[c13];
          continue;
        }
        if (c13 < 2048) {
          out = out + (hexTable[192 | c13 >> 6] + hexTable[128 | c13 & 63]);
          continue;
        }
        if (c13 < 55296 || c13 >= 57344) {
          out = out + (hexTable[224 | c13 >> 12] + hexTable[128 | c13 >> 6 & 63] + hexTable[128 | c13 & 63]);
          continue;
        }
        i4 += 1;
        c13 = 65536 + ((c13 & 1023) << 10 | string.charCodeAt(i4) & 1023);
        out += hexTable[240 | c13 >> 18] + hexTable[128 | c13 >> 12 & 63] + hexTable[128 | c13 >> 6 & 63] + hexTable[128 | c13 & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i4 = 0; i4 < queue.length; ++i4) {
        var item = queue[i4];
        var obj = item.obj[item.prop];
        var keys2 = Object.keys(obj);
        for (var j2 = 0; j2 < keys2.length; ++j2) {
          var key = keys2[j2];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a10, b2) {
      return [].concat(a10, b2);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i4 = 0; i4 < val.length; i4 += 1) {
          mapped.push(fn(val[i4]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var split = String.prototype.split;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v5) {
      return typeof v5 === "string" || typeof v5 === "number" || typeof v5 === "boolean" || typeof v5 === "symbol" || typeof v5 === "bigint";
    };
    var stringify = function stringify2(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset) {
      var obj = object;
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          if (generateArrayPrefix === "comma" && encodeValuesOnly) {
            var valuesArray = split.call(String(obj), ",");
            var valuesJoined = "";
            for (var i4 = 0; i4 < valuesArray.length; ++i4) {
              valuesJoined += (i4 === 0 ? "" : ",") + formatter(encoder(valuesArray[i4], defaults.encoder, charset, "value", format));
            }
            return [formatter(keyValue) + "=" + valuesJoined];
          }
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys2 = Object.keys(obj);
        objKeys = sort ? keys2.sort(sort) : keys2;
      }
      for (var j2 = 0; j2 < objKeys.length; ++j2) {
        var key = objKeys[j2];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? "." + key : "[" + key + "]");
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          strictNullHandling,
          skipNulls,
          encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys2 = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      for (var i4 = 0; i4 < objKeys.length; ++i4) {
        var key = objKeys[i4];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys2, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset
        ));
      }
      var joined = keys2.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = {};
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i4;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i4 = 0; i4 < parts.length; ++i4) {
          if (parts[i4].indexOf("utf8=") === 0) {
            if (parts[i4] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i4] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i4;
            i4 = parts.length;
          }
        }
      }
      for (i4 = 0; i4 < parts.length; ++i4) {
        if (i4 === skipIndex) {
          continue;
        }
        var part = parts[i4];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i4 = chain.length - 1; i4 >= 0; --i4) {
        var obj;
        var root = chain[i4];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index3 = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index3) && root !== cleanRoot && String(index3) === cleanRoot && index3 >= 0 && (options.parseArrays && index3 <= options.arrayLimit)) {
            obj = [];
            obj[index3] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys2 = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys2.push(parent);
      }
      var i4 = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i4 < options.depth) {
        i4 += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys2.push(segment[1]);
      }
      if (segment) {
        keys2.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys2, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys2 = Object.keys(tempObj);
      for (var i4 = 0; i4 < keys2.length; ++i4) {
        var key = keys2[i4];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/vue-instantsearch/vue3/es/src/util/suit.js
function suit_default(r15, e7, o7) {
  if (!r15)
    throw new Error("You need to provide `widgetName` in your data");
  var t6 = ["ais-" + r15];
  return e7 && t6.push("-" + e7), o7 && t6.push("--" + o7), t6.join("");
}

// node_modules/vue-instantsearch/vue3/es/src/mixins/suit.js
var t = function(t6) {
  var a10 = t6.name;
  return { props: { classNames: { type: Object, default: void 0 } }, methods: { suit: function(t7, e7) {
    var r15 = suit_default(a10, t7, e7), i4 = this.classNames && this.classNames[r15];
    return i4 ? [r15, i4].join(" ") : r15;
  } } };
};

// node_modules/vue-instantsearch/vue3/es/src/util/polyfills.js
function e(e7) {
  for (var r15 = arguments, n5 = 1; n5 < arguments.length; n5++) {
    var o7 = null != r15[n5] ? r15[n5] : {}, c13 = Object.keys(o7);
    "function" == typeof Object.getOwnPropertySymbols && (c13 = c13.concat(Object.getOwnPropertySymbols(o7).filter(function(e8) {
      return Object.getOwnPropertyDescriptor(o7, e8).enumerable;
    }))), c13.forEach(function(r16) {
      t2(e7, r16, o7[r16]);
    });
  }
  return e7;
}
function t2(e7, t6, r15) {
  return t6 in e7 ? Object.defineProperty(e7, t6, { value: r15, enumerable: true, configurable: true, writable: true }) : e7[t6] = r15, e7;
}

// node_modules/vue-instantsearch/vue3/es/src/util/vue-compat/index-vue3.js
var e2 = false;
var o = true;
function n(r15) {
  function e7(r16, e8, o7) {
    if ("object" == typeof e8 && (e8.attrs || e8.props)) {
      var n5 = Object.assign({}, e8, e8.attrs, e8.props);
      return delete n5.attrs, delete n5.props, h(r16, n5, o7);
    }
    return h(r16, e8, o7);
  }
  return function() {
    return r15.call(this, e7);
  };
}
function p(t6) {
  return t6.$slots.default && t6.$slots.default();
}

// node_modules/vue-instantsearch/vue3/es/src/util/warn.js
var n2 = /* @__PURE__ */ new Set();
function a(a10) {
  n2.has(a10) || (n2.add(a10), console.warn(a10));
}

// node_modules/vue-instantsearch/vue3/es/src/mixins/widget.js
var n3 = function(n5, i4) {
  var s6;
  void 0 === n5 && (n5 = {});
  var a10 = n5.connector;
  return void 0 === i4 && (i4 = {}), (s6 = { inject: { instantSearchInstance: { from: "$_ais_instantSearchInstance", default: function() {
    var t6 = this.$options._componentTag;
    throw new TypeError('It looks like you forgot to wrap your Algolia search component "<' + t6 + '>" inside of an "<ais-instant-search>" component.');
  } }, getParentIndex: { from: "$_ais_getParentIndex", default: function() {
    var t6 = this;
    return function() {
      return t6.instantSearchInstance.mainIndex;
    };
  } } }, data: function() {
    return { state: null };
  }, created: function() {
    if ("function" == typeof a10) {
      if (this.factory = a10(this.updateState, function() {
      }), this.widget = e(this.factory(this.widgetParams), i4), this.getParentIndex().addWidgets([this.widget]), this.instantSearchInstance._initialResults && !this.instantSearchInstance.started) {
        if ("function" != typeof this.instantSearchInstance.__forceRender)
          throw new Error("You are using server side rendering with <ais-instant-search> instead of <ais-instant-search-ssr>.");
        this.instantSearchInstance.__forceRender(this.widget, this.getParentIndex());
      }
    } else
      true !== a10 && a("You are using the InstantSearch widget mixin, but didn't provide a connector.\nWhile this is technically possible, and will give you access to the Helper,\nit's not the recommended way of making custom components.\n\nIf you want to disable this message, pass { connector: true } to the mixin.\n\nRead more on using connectors: https://alg.li/vue-custom");
  } }).beforeUnmount = function() {
    this.widget && this.getParentIndex().removeWidgets([this.widget]);
  }, s6.watch = { widgetParams: { handler: function(e7) {
    this.state = null, this.getParentIndex().removeWidgets([this.widget]), this.widget = e(this.factory(e7), i4), this.getParentIndex().addWidgets([this.widget]);
  }, deep: true } }, s6.methods = { updateState: function(t6, e7) {
    void 0 === t6 && (t6 = {}), e7 || (this.state = t6);
  } }, s6;
};

// node_modules/instantsearch.js/es/lib/utils/capitalize.js
function capitalize(text) {
  return text.toString().charAt(0).toUpperCase() + text.toString().slice(1);
}

// node_modules/instantsearch.js/es/lib/utils/noop.js
function noop() {
}

// node_modules/instantsearch.js/es/lib/utils/logger.js
var deprecate = function deprecate2(fn, message) {
  return fn;
};
var warn = noop;
var _warning = noop;
if (true) {
  warn = function warn2(message) {
    console.warn("[InstantSearch.js]: ".concat(message.trim()));
  };
  deprecate = function deprecate3(fn, message) {
    var hasAlreadyPrinted = false;
    return function() {
      if (!hasAlreadyPrinted) {
        hasAlreadyPrinted = true;
        warn(message);
      }
      return fn.apply(void 0, arguments);
    };
  };
  _warning = function warning(condition, message) {
    if (condition) {
      return;
    }
    var hasAlreadyPrinted = _warning.cache[message];
    if (!hasAlreadyPrinted) {
      _warning.cache[message] = true;
      warn(message);
    }
  };
  _warning.cache = {};
}

// node_modules/instantsearch.js/es/lib/utils/typedObject.js
var keys = Object.keys;

// node_modules/instantsearch.js/es/lib/utils/checkIndexUiState.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _slicedToArray(arr, i4) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i4) || _unsupportedIterableToArray(arr, i4) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray(o7, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i4) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i4 && _arr.length === i4)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function getWidgetNames(connectorName) {
  switch (connectorName) {
    case "range":
      return [];
    case "menu":
      return ["menu", "menuSelect"];
    default:
      return [connectorName];
  }
}
var stateToWidgetsMap = {
  query: {
    connectors: ["connectSearchBox"],
    widgets: ["ais.searchBox", "ais.autocomplete", "ais.voiceSearch"]
  },
  refinementList: {
    connectors: ["connectRefinementList"],
    widgets: ["ais.refinementList"]
  },
  menu: {
    connectors: ["connectMenu"],
    widgets: ["ais.menu"]
  },
  hierarchicalMenu: {
    connectors: ["connectHierarchicalMenu"],
    widgets: ["ais.hierarchicalMenu"]
  },
  numericMenu: {
    connectors: ["connectNumericMenu"],
    widgets: ["ais.numericMenu"]
  },
  ratingMenu: {
    connectors: ["connectRatingMenu"],
    widgets: ["ais.ratingMenu"]
  },
  range: {
    connectors: ["connectRange"],
    widgets: ["ais.rangeInput", "ais.rangeSlider", "ais.range"]
  },
  toggle: {
    connectors: ["connectToggleRefinement"],
    widgets: ["ais.toggleRefinement"]
  },
  geoSearch: {
    connectors: ["connectGeoSearch"],
    widgets: ["ais.geoSearch"]
  },
  sortBy: {
    connectors: ["connectSortBy"],
    widgets: ["ais.sortBy"]
  },
  page: {
    connectors: ["connectPagination"],
    widgets: ["ais.pagination", "ais.infiniteHits"]
  },
  hitsPerPage: {
    connectors: ["connectHitsPerPage"],
    widgets: ["ais.hitsPerPage"]
  },
  configure: {
    connectors: ["connectConfigure"],
    widgets: ["ais.configure"]
  },
  places: {
    connectors: [],
    widgets: ["ais.places"]
  }
};
function checkIndexUiState(_ref) {
  var index3 = _ref.index, indexUiState = _ref.indexUiState;
  var mountedWidgets = index3.getWidgets().map(function(widget) {
    return widget.$$type;
  }).filter(Boolean);
  var missingWidgets = keys(indexUiState).reduce(function(acc, parameter) {
    var widgetUiState = stateToWidgetsMap[parameter];
    if (!widgetUiState) {
      return acc;
    }
    var requiredWidgets = widgetUiState.widgets;
    if (requiredWidgets && !requiredWidgets.some(function(requiredWidget) {
      return mountedWidgets.includes(requiredWidget);
    })) {
      acc.push([parameter, {
        connectors: widgetUiState.connectors,
        widgets: widgetUiState.widgets.map(function(widgetIdentifier) {
          return widgetIdentifier.split("ais.")[1];
        })
      }]);
    }
    return acc;
  }, []);
  true ? _warning(missingWidgets.length === 0, 'The UI state for the index "'.concat(index3.getIndexId(), '" is not consistent with the widgets mounted.\n\nThis can happen when the UI state is specified via `initialUiState`, `routing` or `setUiState` but that the widgets responsible for this state were not added. This results in those query parameters not being sent to the API.\n\nTo fully reflect the state, some widgets need to be added to the index "').concat(index3.getIndexId(), '":\n\n').concat(missingWidgets.map(function(_ref2) {
    var _ref4;
    var _ref3 = _slicedToArray(_ref2, 2), stateParameter = _ref3[0], widgets = _ref3[1].widgets;
    return "- `".concat(stateParameter, "` needs one of these widgets: ").concat((_ref4 = []).concat.apply(_ref4, _toConsumableArray(widgets.map(function(name) {
      return getWidgetNames(name);
    }))).map(function(name) {
      return '"'.concat(name, '"');
    }).join(", "));
  }).join("\n"), '\n\nIf you do not wish to display widgets but still want to support their search parameters, you can mount "virtual widgets" that don\'t render anything:\n\n```\n').concat(missingWidgets.filter(function(_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2), _stateParameter = _ref6[0], connectors = _ref6[1].connectors;
    return connectors.length > 0;
  }).map(function(_ref7) {
    var _ref8 = _slicedToArray(_ref7, 2), _stateParameter = _ref8[0], _ref8$ = _ref8[1], connectors = _ref8$.connectors, widgets = _ref8$.widgets;
    var capitalizedWidget = capitalize(widgets[0]);
    var connectorName = connectors[0];
    return "const virtual".concat(capitalizedWidget, " = ").concat(connectorName, "(() => null);");
  }).join("\n"), "\n\nsearch.addWidgets([\n  ").concat(missingWidgets.filter(function(_ref9) {
    var _ref10 = _slicedToArray(_ref9, 2), _stateParameter = _ref10[0], connectors = _ref10[1].connectors;
    return connectors.length > 0;
  }).map(function(_ref11) {
    var _ref12 = _slicedToArray(_ref11, 2), _stateParameter = _ref12[0], widgets = _ref12[1].widgets;
    var capitalizedWidget = capitalize(widgets[0]);
    return "virtual".concat(capitalizedWidget, "({ /* ... */ })");
  }).join(",\n  "), "\n]);\n```\n\nIf you're using custom widgets that do set these query parameters, we recommend using connectors instead.\n\nSee https://www.algolia.com/doc/guides/building-search-ui/widgets/customize-an-existing-widget/js/#customize-the-complete-ui-of-the-widgets")) : void 0;
}

// node_modules/instantsearch.js/es/lib/utils/getObjectType.js
function getObjectType(object) {
  return Object.prototype.toString.call(object).slice(8, -1);
}

// node_modules/instantsearch.js/es/lib/utils/checkRendering.js
function checkRendering(rendering, usage) {
  if (rendering === void 0 || typeof rendering !== "function") {
    throw new Error("The render function is not valid (received type ".concat(getObjectType(rendering), ").\n\n").concat(usage));
  }
}

// node_modules/instantsearch.js/es/lib/utils/clearRefinements.js
function clearRefinements(_ref) {
  var helper = _ref.helper, _ref$attributesToClea = _ref.attributesToClear, attributesToClear = _ref$attributesToClea === void 0 ? [] : _ref$attributesToClea;
  var finalState = helper.state.setPage(0);
  finalState = attributesToClear.reduce(function(state, attribute) {
    if (finalState.isNumericRefined(attribute)) {
      return state.removeNumericRefinement(attribute);
    }
    if (finalState.isHierarchicalFacet(attribute)) {
      return state.removeHierarchicalFacetRefinement(attribute);
    }
    if (finalState.isDisjunctiveFacet(attribute)) {
      return state.removeDisjunctiveFacetRefinement(attribute);
    }
    if (finalState.isConjunctiveFacet(attribute)) {
      return state.removeFacetRefinement(attribute);
    }
    return state;
  }, finalState);
  if (attributesToClear.indexOf("query") !== -1) {
    finalState = finalState.setQuery("");
  }
  return finalState;
}

// node_modules/instantsearch.js/es/lib/utils/escape-html.js
var htmlEntities = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var regexUnescapedHtml = /[&<>"']/g;
var regexHasUnescapedHtml = RegExp(regexUnescapedHtml.source);
function escape2(value) {
  return value && regexHasUnescapedHtml.test(value) ? value.replace(regexUnescapedHtml, function(character) {
    return htmlEntities[character];
  }) : value;
}
var htmlCharacters = {
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">",
  "&quot;": '"',
  "&#39;": "'"
};
var regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;
var regexHasEscapedHtml = RegExp(regexEscapedHtml.source);
function unescape2(value) {
  return value && regexHasEscapedHtml.test(value) ? value.replace(regexEscapedHtml, function(character) {
    return htmlCharacters[character];
  }) : value;
}

// node_modules/instantsearch.js/es/lib/utils/isPlainObject.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof7(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof7(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function getTag(value) {
  if (value === null) {
    return value === void 0 ? "[object Undefined]" : "[object Null]";
  }
  return Object.prototype.toString.call(value);
}
function isObjectLike(value) {
  return _typeof(value) === "object" && value !== null;
}
function isPlainObject(value) {
  if (!isObjectLike(value) || getTag(value) !== "[object Object]") {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  var proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}

// node_modules/instantsearch.js/es/lib/utils/escape-highlight.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i4 = 1; i4 < arguments.length; i4++) {
      var source = arguments[i4];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TAG_PLACEHOLDER = {
  highlightPreTag: "__ais-highlight__",
  highlightPostTag: "__/ais-highlight__"
};
var TAG_REPLACEMENT = {
  highlightPreTag: "<mark>",
  highlightPostTag: "</mark>"
};
function replaceTagsAndEscape(value) {
  return escape2(value).replace(new RegExp(TAG_PLACEHOLDER.highlightPreTag, "g"), TAG_REPLACEMENT.highlightPreTag).replace(new RegExp(TAG_PLACEHOLDER.highlightPostTag, "g"), TAG_REPLACEMENT.highlightPostTag);
}
function recursiveEscape(input) {
  if (isPlainObject(input) && typeof input.value !== "string") {
    return Object.keys(input).reduce(function(acc, key) {
      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, recursiveEscape(input[key])));
    }, {});
  }
  if (Array.isArray(input)) {
    return input.map(recursiveEscape);
  }
  return _objectSpread(_objectSpread({}, input), {}, {
    value: replaceTagsAndEscape(input.value)
  });
}
function escapeHits(hits) {
  if (hits.__escaped === void 0) {
    hits = hits.map(function(_ref) {
      var hit = _extends({}, _ref);
      if (hit._highlightResult) {
        hit._highlightResult = recursiveEscape(hit._highlightResult);
      }
      if (hit._snippetResult) {
        hit._snippetResult = recursiveEscape(hit._snippetResult);
      }
      return hit;
    });
    hits.__escaped = true;
  }
  return hits;
}
function escapeFacets(facetHits) {
  return facetHits.map(function(h5) {
    return _objectSpread(_objectSpread({}, h5), {}, {
      highlighted: replaceTagsAndEscape(h5.highlighted)
    });
  });
}

// node_modules/instantsearch.js/es/lib/utils/concatHighlightedParts.js
function concatHighlightedParts(parts) {
  var highlightPreTag = TAG_REPLACEMENT.highlightPreTag, highlightPostTag = TAG_REPLACEMENT.highlightPostTag;
  return parts.map(function(part) {
    return part.isHighlighted ? highlightPreTag + part.value + highlightPostTag : part.value;
  }).join("");
}

// node_modules/instantsearch.js/es/lib/utils/isFacetRefined.js
function isFacetRefined(helper, facet, value) {
  if (helper.state.isHierarchicalFacet(facet)) {
    return helper.state.isHierarchicalFacetRefined(facet, value);
  } else if (helper.state.isConjunctiveFacet(facet)) {
    return helper.state.isFacetRefined(facet, value);
  } else {
    return helper.state.isDisjunctiveFacetRefined(facet, value);
  }
}

// node_modules/instantsearch.js/es/lib/utils/createSendEventForFacet.js
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof7(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function _typeof7(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
function createSendEventForFacet(_ref) {
  var instantSearchInstance = _ref.instantSearchInstance, helper = _ref.helper, attribute = _ref.attribute, widgetType = _ref.widgetType;
  var sendEventForFacet = function sendEventForFacet2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var eventType = args[0], facetValue = args[1], _args$ = args[2], eventName = _args$ === void 0 ? "Filter Applied" : _args$;
    if (args.length === 1 && _typeof2(args[0]) === "object") {
      instantSearchInstance.sendEventToInsights(args[0]);
    } else if (eventType === "click" && (args.length === 2 || args.length === 3)) {
      if (!isFacetRefined(helper, attribute, facetValue)) {
        instantSearchInstance.sendEventToInsights({
          insightsMethod: "clickedFilters",
          widgetType,
          eventType,
          payload: {
            eventName,
            index: helper.getIndex(),
            filters: ["".concat(attribute, ":").concat(facetValue)]
          },
          attribute
        });
      }
    } else if (true) {
      throw new Error("You need to pass two arguments like:\n  sendEvent('click', facetValue);\n\nIf you want to send a custom payload, you can pass one object: sendEvent(customPayload);\n");
    }
  };
  return sendEventForFacet;
}

// node_modules/instantsearch.js/es/lib/utils/serializer.js
function serializePayload(payload) {
  return btoa(encodeURIComponent(JSON.stringify(payload)));
}

// node_modules/instantsearch.js/es/lib/utils/createSendEventForHits.js
function _typeof3(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof3 = function _typeof7(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof3 = function _typeof7(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof3(obj);
}
function chunk(arr) {
  var chunkSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;
  var chunks = [];
  for (var i4 = 0; i4 < Math.ceil(arr.length / chunkSize); i4++) {
    chunks.push(arr.slice(i4 * chunkSize, (i4 + 1) * chunkSize));
  }
  return chunks;
}
var buildPayloads = function buildPayloads2(_ref) {
  var index3 = _ref.index, widgetType = _ref.widgetType, methodName = _ref.methodName, args = _ref.args, isSearchStalled = _ref.isSearchStalled;
  if (args.length === 1 && _typeof3(args[0]) === "object") {
    return [args[0]];
  }
  var eventType = args[0];
  var hits = args[1];
  var eventName = args[2];
  if (!hits) {
    if (true) {
      throw new Error("You need to pass hit or hits as the second argument like:\n  ".concat(methodName, "(eventType, hit);\n  "));
    } else {
      return [];
    }
  }
  if ((eventType === "click" || eventType === "conversion") && !eventName) {
    if (true) {
      throw new Error("You need to pass eventName as the third argument for 'click' or 'conversion' events like:\n  ".concat(methodName, "('click', hit, 'Product Purchased');\n\n  To learn more about event naming: https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/in-depth/clicks-conversions-best-practices/\n  "));
    } else {
      return [];
    }
  }
  var hitsArray = Array.isArray(hits) ? removeEscapedFromHits(hits) : [hits];
  if (hitsArray.length === 0) {
    return [];
  }
  var queryID = hitsArray[0].__queryID;
  var hitsChunks = chunk(hitsArray);
  var objectIDsByChunk = hitsChunks.map(function(batch) {
    return batch.map(function(hit) {
      return hit.objectID;
    });
  });
  var positionsByChunk = hitsChunks.map(function(batch) {
    return batch.map(function(hit) {
      return hit.__position;
    });
  });
  if (eventType === "view") {
    if (isSearchStalled) {
      return [];
    }
    return hitsChunks.map(function(batch, i4) {
      return {
        insightsMethod: "viewedObjectIDs",
        widgetType,
        eventType,
        payload: {
          eventName: eventName || "Hits Viewed",
          index: index3,
          objectIDs: objectIDsByChunk[i4]
        },
        hits: batch
      };
    });
  } else if (eventType === "click") {
    return hitsChunks.map(function(batch, i4) {
      return {
        insightsMethod: "clickedObjectIDsAfterSearch",
        widgetType,
        eventType,
        payload: {
          eventName,
          index: index3,
          queryID,
          objectIDs: objectIDsByChunk[i4],
          positions: positionsByChunk[i4]
        },
        hits: batch
      };
    });
  } else if (eventType === "conversion") {
    return hitsChunks.map(function(batch, i4) {
      return {
        insightsMethod: "convertedObjectIDsAfterSearch",
        widgetType,
        eventType,
        payload: {
          eventName,
          index: index3,
          queryID,
          objectIDs: objectIDsByChunk[i4]
        },
        hits: batch
      };
    });
  } else if (true) {
    throw new Error('eventType("'.concat(eventType, '") is not supported.\n    If you want to send a custom payload, you can pass one object: ').concat(methodName, "(customPayload);\n    "));
  } else {
    return [];
  }
};
function removeEscapedFromHits(hits) {
  return hits.slice();
}
function createSendEventForHits(_ref2) {
  var instantSearchInstance = _ref2.instantSearchInstance, index3 = _ref2.index, widgetType = _ref2.widgetType;
  var sendEventForHits = function sendEventForHits2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var payloads = buildPayloads({
      widgetType,
      index: index3,
      methodName: "sendEvent",
      args,
      isSearchStalled: instantSearchInstance._isSearchStalled
    });
    payloads.forEach(function(payload) {
      return instantSearchInstance.sendEventToInsights(payload);
    });
  };
  return sendEventForHits;
}
function createBindEventForHits(_ref3) {
  var index3 = _ref3.index, widgetType = _ref3.widgetType;
  var bindEventForHits = function bindEventForHits2() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var payloads = buildPayloads({
      widgetType,
      index: index3,
      methodName: "bindEvent",
      args,
      isSearchStalled: false
    });
    return payloads.length ? "data-insights-event=".concat(serializePayload(payloads)) : "";
  };
  return bindEventForHits;
}

// node_modules/instantsearch.js/es/lib/utils/isIndexWidget.js
function isIndexWidget(widget) {
  return widget.$$type === "ais.index";
}

// node_modules/instantsearch.js/es/lib/utils/setIndexHelperState.js
function setIndexHelperState(finalUiState, indexWidget) {
  var nextIndexUiState = finalUiState[indexWidget.getIndexId()] || {};
  if (true) {
    checkIndexUiState({
      index: indexWidget,
      indexUiState: nextIndexUiState
    });
  }
  indexWidget.getHelper().setState(indexWidget.getWidgetSearchParameters(indexWidget.getHelper().state, {
    uiState: nextIndexUiState
  }));
  indexWidget.getWidgets().filter(isIndexWidget).forEach(function(widget) {
    return setIndexHelperState(finalUiState, widget);
  });
}

// node_modules/instantsearch.js/es/lib/utils/defer.js
var nextMicroTask = Promise.resolve();
function defer(callback) {
  var progress = null;
  var cancelled = false;
  var fn = function fn2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (progress !== null) {
      return;
    }
    progress = nextMicroTask.then(function() {
      progress = null;
      if (cancelled) {
        cancelled = false;
        return;
      }
      callback.apply(void 0, args);
    });
  };
  fn.wait = function() {
    if (progress === null) {
      throw new Error("The deferred function should be called before calling `wait()`");
    }
    return progress;
  };
  fn.cancel = function() {
    if (progress === null) {
      return;
    }
    cancelled = true;
  };
  return fn;
}

// node_modules/instantsearch.js/es/lib/utils/documentation.js
function createDocumentationLink(_ref) {
  var name = _ref.name, _ref$connector = _ref.connector, connector = _ref$connector === void 0 ? false : _ref$connector;
  return ["https://www.algolia.com/doc/api-reference/widgets/", name, "/js/", connector ? "#connector" : ""].join("");
}
function createDocumentationMessageGenerator() {
  for (var _len = arguments.length, widgets = new Array(_len), _key = 0; _key < _len; _key++) {
    widgets[_key] = arguments[_key];
  }
  var links = widgets.map(function(widget) {
    return createDocumentationLink(widget);
  }).join(", ");
  return function(message) {
    return [message, "See documentation: ".concat(links)].filter(Boolean).join("\n\n");
  };
}

// node_modules/instantsearch.js/es/lib/utils/escapeFacetValue.js
function unescapeFacetValue(value) {
  if (typeof value === "string") {
    return value.replace(/^\\-/, "-");
  }
  return value;
}
function escapeFacetValue(value) {
  if (typeof value === "number" && value < 0 || typeof value === "string") {
    return String(value).replace(/^-/, "\\-");
  }
  return value;
}

// node_modules/instantsearch.js/es/lib/utils/find.js
function find(items, predicate) {
  var value;
  for (var i4 = 0; i4 < items.length; i4++) {
    value = items[i4];
    if (predicate(value, i4, items)) {
      return value;
    }
  }
  return void 0;
}

// node_modules/instantsearch.js/es/lib/utils/findIndex.js
function findIndex(array, comparator) {
  if (!Array.isArray(array)) {
    return -1;
  }
  for (var i4 = 0; i4 < array.length; i4++) {
    if (comparator(array[i4])) {
      return i4;
    }
  }
  return -1;
}

// node_modules/instantsearch.js/es/lib/utils/getHighlightedParts.js
function getHighlightedParts(highlightedValue) {
  var highlightPostTag = TAG_REPLACEMENT.highlightPostTag, highlightPreTag = TAG_REPLACEMENT.highlightPreTag;
  var splitByPreTag = highlightedValue.split(highlightPreTag);
  var firstValue = splitByPreTag.shift();
  var elements = !firstValue ? [] : [{
    value: firstValue,
    isHighlighted: false
  }];
  splitByPreTag.forEach(function(split) {
    var splitByPostTag = split.split(highlightPostTag);
    elements.push({
      value: splitByPostTag[0],
      isHighlighted: true
    });
    if (splitByPostTag[1] !== "") {
      elements.push({
        value: splitByPostTag[1],
        isHighlighted: false
      });
    }
  });
  return elements;
}

// node_modules/instantsearch.js/es/lib/utils/getHighlightFromSiblings.js
var hasAlphanumeric = new RegExp(/\w/i);
function getHighlightFromSiblings(parts, i4) {
  var _parts, _parts2;
  var current = parts[i4];
  var isNextHighlighted = ((_parts = parts[i4 + 1]) === null || _parts === void 0 ? void 0 : _parts.isHighlighted) || true;
  var isPreviousHighlighted = ((_parts2 = parts[i4 - 1]) === null || _parts2 === void 0 ? void 0 : _parts2.isHighlighted) || true;
  if (!hasAlphanumeric.test(unescape2(current.value)) && isPreviousHighlighted === isNextHighlighted) {
    return isPreviousHighlighted;
  }
  return current.isHighlighted;
}

// node_modules/instantsearch.js/es/lib/utils/getPropertyByPath.js
function getPropertyByPath(object, path) {
  var parts = Array.isArray(path) ? path : path.split(".");
  return parts.reduce(function(current, key) {
    return current && current[key];
  }, object);
}

// node_modules/instantsearch.js/es/lib/utils/getRefinements.js
function getRefinement(state, type, attribute, name) {
  var resultsFacets = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : [];
  var res = {
    type,
    attribute,
    name,
    escapedValue: escapeFacetValue(name)
  };
  var facet = find(resultsFacets, function(resultsFacet) {
    return resultsFacet.name === attribute;
  });
  var count;
  if (type === "hierarchical") {
    (function() {
      var facetDeclaration = state.getHierarchicalFacetByName(attribute);
      var nameParts = name.split(facetDeclaration.separator);
      var getFacetRefinement = function getFacetRefinement2(facetData) {
        return function(refinementKey) {
          return facetData[refinementKey];
        };
      };
      var _loop = function _loop2(i5) {
        facet = facet && facet.data && find(Object.keys(facet.data).map(getFacetRefinement(facet.data)), function(refinement) {
          return refinement.name === nameParts[i5];
        });
      };
      for (var i4 = 0; facet !== void 0 && i4 < nameParts.length; ++i4) {
        _loop(i4);
      }
      count = facet && facet.count;
    })();
  } else {
    count = facet && facet.data && facet.data[res.name];
  }
  if (count !== void 0) {
    res.count = count;
  }
  if (facet && facet.exhaustive !== void 0) {
    res.exhaustive = facet.exhaustive;
  }
  return res;
}
function getRefinements(results, state) {
  var includesQuery = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var refinements = [];
  var _state$facetsRefineme = state.facetsRefinements, facetsRefinements = _state$facetsRefineme === void 0 ? {} : _state$facetsRefineme, _state$facetsExcludes = state.facetsExcludes, facetsExcludes = _state$facetsExcludes === void 0 ? {} : _state$facetsExcludes, _state$disjunctiveFac = state.disjunctiveFacetsRefinements, disjunctiveFacetsRefinements = _state$disjunctiveFac === void 0 ? {} : _state$disjunctiveFac, _state$hierarchicalFa = state.hierarchicalFacetsRefinements, hierarchicalFacetsRefinements = _state$hierarchicalFa === void 0 ? {} : _state$hierarchicalFa, _state$numericRefinem = state.numericRefinements, numericRefinements = _state$numericRefinem === void 0 ? {} : _state$numericRefinem, _state$tagRefinements = state.tagRefinements, tagRefinements = _state$tagRefinements === void 0 ? [] : _state$tagRefinements;
  Object.keys(facetsRefinements).forEach(function(attribute) {
    var refinementNames = facetsRefinements[attribute];
    refinementNames.forEach(function(refinementName) {
      refinements.push(getRefinement(state, "facet", attribute, refinementName, results.facets));
    });
  });
  Object.keys(facetsExcludes).forEach(function(attribute) {
    var refinementNames = facetsExcludes[attribute];
    refinementNames.forEach(function(refinementName) {
      refinements.push({
        type: "exclude",
        attribute,
        name: refinementName,
        exclude: true
      });
    });
  });
  Object.keys(disjunctiveFacetsRefinements).forEach(function(attribute) {
    var refinementNames = disjunctiveFacetsRefinements[attribute];
    refinementNames.forEach(function(refinementName) {
      refinements.push(getRefinement(
        state,
        "disjunctive",
        attribute,
        unescapeFacetValue(refinementName),
        results.disjunctiveFacets
      ));
    });
  });
  Object.keys(hierarchicalFacetsRefinements).forEach(function(attribute) {
    var refinementNames = hierarchicalFacetsRefinements[attribute];
    refinementNames.forEach(function(refinement) {
      refinements.push(getRefinement(state, "hierarchical", attribute, refinement, results.hierarchicalFacets));
    });
  });
  Object.keys(numericRefinements).forEach(function(attribute) {
    var operators = numericRefinements[attribute];
    Object.keys(operators).forEach(function(operatorOriginal) {
      var operator = operatorOriginal;
      var valueOrValues = operators[operator];
      var refinementNames = Array.isArray(valueOrValues) ? valueOrValues : [valueOrValues];
      refinementNames.forEach(function(refinementName) {
        refinements.push({
          type: "numeric",
          attribute,
          name: "".concat(refinementName),
          numericValue: refinementName,
          operator
        });
      });
    });
  });
  tagRefinements.forEach(function(refinementName) {
    refinements.push({
      type: "tag",
      attribute: "_tags",
      name: refinementName
    });
  });
  if (includesQuery && state.query && state.query.trim()) {
    refinements.push({
      attribute: "query",
      type: "query",
      name: state.query,
      query: state.query
    });
  }
  return refinements;
}

// node_modules/instantsearch.js/es/lib/utils/getWidgetAttribute.js
function getWidgetAttribute(widget, initOptions) {
  var _widget$getWidgetRend;
  var renderState = (_widget$getWidgetRend = widget.getWidgetRenderState) === null || _widget$getWidgetRend === void 0 ? void 0 : _widget$getWidgetRend.call(widget, initOptions);
  var attribute = null;
  if (renderState && renderState.widgetParams) {
    var widgetParams = renderState.widgetParams;
    if (widgetParams.attribute) {
      attribute = widgetParams.attribute;
    } else if (Array.isArray(widgetParams.attributes)) {
      attribute = widgetParams.attributes[0];
    }
  }
  if (typeof attribute !== "string") {
    throw new Error("Could not find the attribute of the widget:\n\n".concat(JSON.stringify(widget), "\n\nPlease check whether the widget's getWidgetRenderState returns widgetParams.attribute correctly."));
  }
  return attribute;
}

// node_modules/instantsearch.js/es/lib/utils/hits-absolute-position.js
function ownKeys2(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function addAbsolutePosition(hits, page, hitsPerPage) {
  return hits.map(function(hit, idx) {
    return _objectSpread2(_objectSpread2({}, hit), {}, {
      __position: hitsPerPage * page + idx + 1
    });
  });
}

// node_modules/instantsearch.js/es/lib/utils/hits-query-id.js
function ownKeys3(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread3(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys3(Object(source), true).forEach(function(key) {
        _defineProperty3(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function addQueryID(hits, queryID) {
  if (!queryID) {
    return hits;
  }
  return hits.map(function(hit) {
    return _objectSpread3(_objectSpread3({}, hit), {}, {
      __queryID: queryID
    });
  });
}

// node_modules/instantsearch.js/es/lib/utils/isEqual.js
function isPrimitive(obj) {
  return obj !== Object(obj);
}
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (isPrimitive(first) || isPrimitive(second) || typeof first === "function" || typeof second === "function") {
    return first === second;
  }
  if (Object.keys(first).length !== Object.keys(second).length) {
    return false;
  }
  for (var _i = 0, _Object$keys = Object.keys(first); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    if (!(key in second)) {
      return false;
    }
    if (!isEqual(first[key], second[key])) {
      return false;
    }
  }
  return true;
}

// node_modules/instantsearch.js/es/lib/utils/isFiniteNumber.js
function isFiniteNumber(value) {
  return typeof value === "number" && isFinite(value);
}

// node_modules/instantsearch.js/es/lib/utils/uniq.js
function uniq(array) {
  return array.filter(function(value, index3, self) {
    return self.indexOf(value) === index3;
  });
}

// node_modules/instantsearch.js/es/lib/utils/mergeSearchParameters.js
function ownKeys4(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread4(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys4(Object(source), true).forEach(function(key) {
        _defineProperty4(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i4;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
      key = sourceSymbolKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var mergeWithRest = function mergeWithRest2(left, right) {
  var facets = right.facets, disjunctiveFacets = right.disjunctiveFacets, facetsRefinements = right.facetsRefinements, facetsExcludes = right.facetsExcludes, disjunctiveFacetsRefinements = right.disjunctiveFacetsRefinements, numericRefinements = right.numericRefinements, tagRefinements = right.tagRefinements, hierarchicalFacets = right.hierarchicalFacets, hierarchicalFacetsRefinements = right.hierarchicalFacetsRefinements, ruleContexts = right.ruleContexts, rest = _objectWithoutProperties(right, ["facets", "disjunctiveFacets", "facetsRefinements", "facetsExcludes", "disjunctiveFacetsRefinements", "numericRefinements", "tagRefinements", "hierarchicalFacets", "hierarchicalFacetsRefinements", "ruleContexts"]);
  return left.setQueryParameters(rest);
};
var mergeFacets = function mergeFacets2(left, right) {
  return right.facets.reduce(function(_2, name) {
    return _2.addFacet(name);
  }, left);
};
var mergeDisjunctiveFacets = function mergeDisjunctiveFacets2(left, right) {
  return right.disjunctiveFacets.reduce(function(_2, name) {
    return _2.addDisjunctiveFacet(name);
  }, left);
};
var mergeHierarchicalFacets = function mergeHierarchicalFacets2(left, right) {
  return left.setQueryParameters({
    hierarchicalFacets: right.hierarchicalFacets.reduce(function(facets, facet) {
      var index3 = findIndex(facets, function(_2) {
        return _2.name === facet.name;
      });
      if (index3 === -1) {
        return facets.concat(facet);
      }
      var nextFacets = facets.slice();
      nextFacets.splice(index3, 1, facet);
      return nextFacets;
    }, left.hierarchicalFacets)
  });
};
var mergeTagRefinements = function mergeTagRefinements2(left, right) {
  return right.tagRefinements.reduce(function(_2, value) {
    return _2.addTagRefinement(value);
  }, left);
};
var mergeFacetRefinements = function mergeFacetRefinements2(left, right) {
  return left.setQueryParameters({
    facetsRefinements: _objectSpread4(_objectSpread4({}, left.facetsRefinements), right.facetsRefinements)
  });
};
var mergeFacetsExcludes = function mergeFacetsExcludes2(left, right) {
  return left.setQueryParameters({
    facetsExcludes: _objectSpread4(_objectSpread4({}, left.facetsExcludes), right.facetsExcludes)
  });
};
var mergeDisjunctiveFacetsRefinements = function mergeDisjunctiveFacetsRefinements2(left, right) {
  return left.setQueryParameters({
    disjunctiveFacetsRefinements: _objectSpread4(_objectSpread4({}, left.disjunctiveFacetsRefinements), right.disjunctiveFacetsRefinements)
  });
};
var mergeNumericRefinements = function mergeNumericRefinements2(left, right) {
  return left.setQueryParameters({
    numericRefinements: _objectSpread4(_objectSpread4({}, left.numericRefinements), right.numericRefinements)
  });
};
var mergeHierarchicalFacetsRefinements = function mergeHierarchicalFacetsRefinements2(left, right) {
  return left.setQueryParameters({
    hierarchicalFacetsRefinements: _objectSpread4(_objectSpread4({}, left.hierarchicalFacetsRefinements), right.hierarchicalFacetsRefinements)
  });
};
var mergeRuleContexts = function mergeRuleContexts2(left, right) {
  var ruleContexts = uniq([].concat(left.ruleContexts).concat(right.ruleContexts).filter(Boolean));
  if (ruleContexts.length > 0) {
    return left.setQueryParameters({
      ruleContexts
    });
  }
  return left;
};
var mergeSearchParameters = function mergeSearchParameters2() {
  for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {
    parameters[_key] = arguments[_key];
  }
  return parameters.reduce(function(left, right) {
    var hierarchicalFacetsRefinementsMerged = mergeHierarchicalFacetsRefinements(left, right);
    var hierarchicalFacetsMerged = mergeHierarchicalFacets(hierarchicalFacetsRefinementsMerged, right);
    var tagRefinementsMerged = mergeTagRefinements(hierarchicalFacetsMerged, right);
    var numericRefinementsMerged = mergeNumericRefinements(tagRefinementsMerged, right);
    var disjunctiveFacetsRefinementsMerged = mergeDisjunctiveFacetsRefinements(numericRefinementsMerged, right);
    var facetsExcludesMerged = mergeFacetsExcludes(disjunctiveFacetsRefinementsMerged, right);
    var facetRefinementsMerged = mergeFacetRefinements(facetsExcludesMerged, right);
    var disjunctiveFacetsMerged = mergeDisjunctiveFacets(facetRefinementsMerged, right);
    var ruleContextsMerged = mergeRuleContexts(disjunctiveFacetsMerged, right);
    var facetsMerged = mergeFacets(ruleContextsMerged, right);
    return mergeWithRest(facetsMerged, right);
  });
};

// node_modules/instantsearch.js/es/lib/utils/range.js
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray2(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray2(o7, minLen);
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray2(arr);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function range(_ref) {
  var _ref$start = _ref.start, start = _ref$start === void 0 ? 0 : _ref$start, end = _ref.end, _ref$step = _ref.step, step = _ref$step === void 0 ? 1 : _ref$step;
  var limitStep = step === 0 ? 1 : step;
  var arrayLength = Math.round((end - start) / limitStep);
  return _toConsumableArray2(Array(arrayLength)).map(function(_2, current) {
    return start + current * limitStep;
  });
}

// node_modules/instantsearch.js/es/lib/utils/resolveSearchParameters.js
function resolveSearchParameters(current) {
  var parent = current.getParent();
  var states = [current.getHelper().state];
  while (parent !== null) {
    states = [parent.getHelper().state].concat(states);
    parent = parent.getParent();
  }
  return states;
}

// node_modules/instantsearch.js/es/lib/utils/reverseHighlightedParts.js
function ownKeys5(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread5(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys5(Object(source), true).forEach(function(key) {
        _defineProperty5(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys5(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function reverseHighlightedParts(parts) {
  if (!parts.some(function(part) {
    return part.isHighlighted;
  })) {
    return parts.map(function(part) {
      return _objectSpread5(_objectSpread5({}, part), {}, {
        isHighlighted: false
      });
    });
  }
  return parts.map(function(part, i4) {
    return _objectSpread5(_objectSpread5({}, part), {}, {
      isHighlighted: !getHighlightFromSiblings(parts, i4)
    });
  });
}

// node_modules/instantsearch.js/es/lib/utils/safelyRunOnBrowser.js
function safelyRunOnBrowser(callback) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    fallback: function fallback2() {
      return void 0;
    }
  }, fallback = _ref.fallback;
  if (typeof window === "undefined") {
    return fallback();
  }
  return callback({
    window
  });
}

// node_modules/instantsearch.js/es/lib/utils/toArray.js
function toArray(value) {
  return Array.isArray(value) ? value : [value];
}

// node_modules/instantsearch.js/es/connectors/clear-refinements/connectClearRefinements.js
function _toConsumableArray3(arr) {
  return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread3();
}
function _nonIterableSpread3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray3(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray3(o7, minLen);
}
function _iterableToArray3(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles3(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray3(arr);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function ownKeys6(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread6(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys6(Object(source), true).forEach(function(key) {
        _defineProperty6(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys6(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage = createDocumentationMessageGenerator({
  name: "clear-refinements",
  connector: true
});
var connectClearRefinements = function connectClearRefinements2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage());
  return function(widgetParams) {
    var _ref = widgetParams || {}, _ref$includedAttribut = _ref.includedAttributes, includedAttributes = _ref$includedAttribut === void 0 ? [] : _ref$includedAttribut, _ref$excludedAttribut = _ref.excludedAttributes, excludedAttributes = _ref$excludedAttribut === void 0 ? ["query"] : _ref$excludedAttribut, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items) {
      return items;
    } : _ref$transformItems;
    if (widgetParams && widgetParams.includedAttributes && widgetParams.excludedAttributes) {
      throw new Error(withUsage("The options `includedAttributes` and `excludedAttributes` cannot be used together."));
    }
    var connectorState = {
      refine: noop,
      createURL: function createURL() {
        return "";
      },
      attributesToClear: []
    };
    var cachedRefine = function cachedRefine2() {
      return connectorState.refine();
    };
    var cachedCreateURL = function cachedCreateURL2() {
      return connectorState.createURL();
    };
    return {
      $$type: "ais.clearRefinements",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread6(_objectSpread6({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread6(_objectSpread6({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose() {
        unmountFn();
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread6(_objectSpread6({}, renderState), {}, {
          clearRefinements: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref2) {
        var createURL = _ref2.createURL, scopedResults = _ref2.scopedResults, results = _ref2.results;
        connectorState.attributesToClear = scopedResults.reduce(function(attributesToClear, scopedResult) {
          return attributesToClear.concat(getAttributesToClear({
            scopedResult,
            includedAttributes,
            excludedAttributes,
            transformItems,
            results
          }));
        }, []);
        connectorState.refine = function() {
          connectorState.attributesToClear.forEach(function(_ref3) {
            var indexHelper = _ref3.helper, items = _ref3.items;
            indexHelper.setState(clearRefinements({
              helper: indexHelper,
              attributesToClear: items
            })).search();
          });
        };
        connectorState.createURL = function() {
          return createURL(mergeSearchParameters.apply(void 0, _toConsumableArray3(connectorState.attributesToClear.map(function(_ref4) {
            var indexHelper = _ref4.helper, items = _ref4.items;
            return clearRefinements({
              helper: indexHelper,
              attributesToClear: items
            });
          }))));
        };
        var canRefine = connectorState.attributesToClear.some(function(attributeToClear) {
          return attributeToClear.items.length > 0;
        });
        return {
          canRefine,
          hasRefinements: canRefine,
          refine: cachedRefine,
          createURL: cachedCreateURL,
          widgetParams
        };
      }
    };
  };
};
function getAttributesToClear(_ref5) {
  var scopedResult = _ref5.scopedResult, includedAttributes = _ref5.includedAttributes, excludedAttributes = _ref5.excludedAttributes, transformItems = _ref5.transformItems, results = _ref5.results;
  var includesQuery = includedAttributes.indexOf("query") !== -1 || excludedAttributes.indexOf("query") === -1;
  return {
    helper: scopedResult.helper,
    items: transformItems(uniq(getRefinements(scopedResult.results, scopedResult.helper.state, includesQuery).map(function(refinement) {
      return refinement.attribute;
    }).filter(function(attribute) {
      return includedAttributes.length === 0 || includedAttributes.indexOf(attribute) !== -1;
    }).filter(function(attribute) {
      return attribute === "query" && includesQuery || excludedAttributes.indexOf(attribute) === -1;
    })), {
      results
    })
  };
}
var connectClearRefinements_default = connectClearRefinements;

// node_modules/instantsearch.js/es/connectors/current-refinements/connectCurrentRefinements.js
function _toConsumableArray4(arr) {
  return _arrayWithoutHoles4(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread4();
}
function _nonIterableSpread4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray4(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray4(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray4(o7, minLen);
}
function _iterableToArray4(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles4(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray4(arr);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function ownKeys7(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread7(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys7(Object(source), true).forEach(function(key) {
        _defineProperty7(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys7(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty7(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage2 = createDocumentationMessageGenerator({
  name: "current-refinements",
  connector: true
});
var connectCurrentRefinements = function connectCurrentRefinements2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage2());
  return function(widgetParams) {
    if ((widgetParams || {}).includedAttributes && (widgetParams || {}).excludedAttributes) {
      throw new Error(withUsage2("The options `includedAttributes` and `excludedAttributes` cannot be used together."));
    }
    var _ref = widgetParams || {}, includedAttributes = _ref.includedAttributes, _ref$excludedAttribut = _ref.excludedAttributes, excludedAttributes = _ref$excludedAttribut === void 0 ? ["query"] : _ref$excludedAttribut, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items) {
      return items;
    } : _ref$transformItems;
    return {
      $$type: "ais.currentRefinements",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread7(_objectSpread7({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread7(_objectSpread7({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose() {
        unmountFn();
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread7(_objectSpread7({}, renderState), {}, {
          currentRefinements: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref2) {
        var results = _ref2.results, scopedResults = _ref2.scopedResults, _createURL = _ref2.createURL, helper = _ref2.helper;
        function getItems() {
          if (!results) {
            return transformItems(getRefinementsItems({
              results: {},
              helper,
              includedAttributes,
              excludedAttributes
            }), {
              results
            });
          }
          return scopedResults.reduce(function(accResults, scopedResult) {
            return accResults.concat(transformItems(getRefinementsItems({
              results: scopedResult.results,
              helper: scopedResult.helper,
              includedAttributes,
              excludedAttributes
            }), {
              results
            }));
          }, []);
        }
        var items = getItems();
        return {
          items,
          canRefine: items.length > 0,
          refine: function refine(refinement) {
            return clearRefinement(helper, refinement);
          },
          createURL: function createURL(refinement) {
            return _createURL(clearRefinementFromState(helper.state, refinement));
          },
          widgetParams
        };
      }
    };
  };
};
function getRefinementsItems(_ref3) {
  var results = _ref3.results, helper = _ref3.helper, includedAttributes = _ref3.includedAttributes, excludedAttributes = _ref3.excludedAttributes;
  var includesQuery = (includedAttributes || []).indexOf("query") !== -1 || (excludedAttributes || []).indexOf("query") === -1;
  var filterFunction = includedAttributes ? function(item) {
    return includedAttributes.indexOf(item.attribute) !== -1;
  } : function(item) {
    return excludedAttributes.indexOf(item.attribute) === -1;
  };
  var items = getRefinements(results, helper.state, includesQuery).map(normalizeRefinement).filter(filterFunction);
  return items.reduce(function(allItems, currentItem) {
    return [].concat(_toConsumableArray4(allItems.filter(function(item) {
      return item.attribute !== currentItem.attribute;
    })), [{
      indexName: helper.state.index,
      attribute: currentItem.attribute,
      label: currentItem.attribute,
      refinements: items.filter(function(result) {
        return result.attribute === currentItem.attribute;
      }).sort(function(a10, b2) {
        return a10.type === "numeric" ? a10.value - b2.value : 0;
      }),
      refine: function refine(refinement) {
        return clearRefinement(helper, refinement);
      }
    }]);
  }, []);
}
function clearRefinementFromState(state, refinement) {
  switch (refinement.type) {
    case "facet":
      return state.removeFacetRefinement(refinement.attribute, String(refinement.value));
    case "disjunctive":
      return state.removeDisjunctiveFacetRefinement(refinement.attribute, String(refinement.value));
    case "hierarchical":
      return state.removeHierarchicalFacetRefinement(refinement.attribute);
    case "exclude":
      return state.removeExcludeRefinement(refinement.attribute, String(refinement.value));
    case "numeric":
      return state.removeNumericRefinement(refinement.attribute, refinement.operator, String(refinement.value));
    case "tag":
      return state.removeTagRefinement(String(refinement.value));
    case "query":
      return state.setQueryParameter("query", "");
    default:
      true ? _warning(false, 'The refinement type "'.concat(refinement.type, '" does not exist and cannot be cleared from the current refinements.')) : void 0;
      return state;
  }
}
function clearRefinement(helper, refinement) {
  helper.setState(clearRefinementFromState(helper.state, refinement)).search();
}
function getOperatorSymbol(operator) {
  switch (operator) {
    case ">=":
      return "\u2265";
    case "<=":
      return "\u2264";
    default:
      return operator;
  }
}
function normalizeRefinement(refinement) {
  var value = getValue(refinement);
  var label = refinement.operator ? "".concat(getOperatorSymbol(refinement.operator), " ").concat(refinement.name) : refinement.name;
  var normalizedRefinement = {
    attribute: refinement.attribute,
    type: refinement.type,
    value,
    label
  };
  if (refinement.operator !== void 0) {
    normalizedRefinement.operator = refinement.operator;
  }
  if (refinement.count !== void 0) {
    normalizedRefinement.count = refinement.count;
  }
  if (refinement.exhaustive !== void 0) {
    normalizedRefinement.exhaustive = refinement.exhaustive;
  }
  return normalizedRefinement;
}
function getValue(refinement) {
  if (refinement.type === "numeric") {
    return Number(refinement.name);
  }
  if ("escapedValue" in refinement) {
    return refinement.escapedValue;
  }
  return refinement.name;
}
var connectCurrentRefinements_default = connectCurrentRefinements;

// node_modules/instantsearch.js/es/connectors/hierarchical-menu/connectHierarchicalMenu.js
function ownKeys8(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread8(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys8(Object(source), true).forEach(function(key) {
        _defineProperty8(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys8(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty8(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i4;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
      key = sourceSymbolKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _slicedToArray2(arr, i4) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i4) || _unsupportedIterableToArray5(arr, i4) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray5(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray5(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray5(o7, minLen);
}
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i4) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i4 && _arr.length === i4)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
var withUsage3 = createDocumentationMessageGenerator({
  name: "hierarchical-menu",
  connector: true
});
var DEFAULT_SORT = ["name:asc"];
var connectHierarchicalMenu = function connectHierarchicalMenu2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage3());
  return function(widgetParams) {
    var _ref = widgetParams || {}, attributes = _ref.attributes, _ref$separator = _ref.separator, separator = _ref$separator === void 0 ? " > " : _ref$separator, _ref$rootPath = _ref.rootPath, rootPath = _ref$rootPath === void 0 ? null : _ref$rootPath, _ref$showParentLevel = _ref.showParentLevel, showParentLevel = _ref$showParentLevel === void 0 ? true : _ref$showParentLevel, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 10 : _ref$limit, _ref$showMore = _ref.showMore, showMore = _ref$showMore === void 0 ? false : _ref$showMore, _ref$showMoreLimit = _ref.showMoreLimit, showMoreLimit = _ref$showMoreLimit === void 0 ? 20 : _ref$showMoreLimit, _ref$sortBy = _ref.sortBy, sortBy = _ref$sortBy === void 0 ? DEFAULT_SORT : _ref$sortBy, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items) {
      return items;
    } : _ref$transformItems;
    if (!attributes || !Array.isArray(attributes) || attributes.length === 0) {
      throw new Error(withUsage3("The `attributes` option expects an array of strings."));
    }
    if (showMore === true && showMoreLimit <= limit) {
      throw new Error(withUsage3("The `showMoreLimit` option must be greater than `limit`."));
    }
    var _attributes = _slicedToArray2(attributes, 1), hierarchicalFacetName = _attributes[0];
    var sendEvent;
    var toggleShowMore = function toggleShowMore2() {
    };
    function cachedToggleShowMore() {
      toggleShowMore();
    }
    var _refine;
    var isShowingMore = false;
    function createToggleShowMore(renderOptions, widget) {
      return function() {
        isShowingMore = !isShowingMore;
        widget.render(renderOptions);
      };
    }
    function getLimit() {
      return isShowingMore ? showMoreLimit : limit;
    }
    function _prepareFacetValues(facetValues) {
      return facetValues.slice(0, getLimit()).map(function(_ref2) {
        var label = _ref2.name, value = _ref2.escapedValue, data = _ref2.data, path = _ref2.path, subValue = _objectWithoutProperties2(_ref2, ["name", "escapedValue", "data", "path"]);
        var item = _objectSpread8(_objectSpread8({}, subValue), {}, {
          value,
          label,
          data: null
        });
        if (Array.isArray(data)) {
          item.data = _prepareFacetValues(data);
        }
        return item;
      });
    }
    return {
      $$type: "ais.hierarchicalMenu",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread8(_objectSpread8({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        toggleShowMore = createToggleShowMore(renderOptions, this);
        renderFn(_objectSpread8(_objectSpread8({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref3) {
        var state = _ref3.state;
        unmountFn();
        return state.removeHierarchicalFacet(hierarchicalFacetName).setQueryParameter("maxValuesPerFacet", void 0);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread8(_objectSpread8({}, renderState), {}, {
          hierarchicalMenu: _objectSpread8(_objectSpread8({}, renderState.hierarchicalMenu), {}, _defineProperty8({}, hierarchicalFacetName, this.getWidgetRenderState(renderOptions)))
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref4) {
        var results = _ref4.results, state = _ref4.state, createURL = _ref4.createURL, instantSearchInstance = _ref4.instantSearchInstance, helper = _ref4.helper;
        var items = [];
        var canToggleShowMore = false;
        function _createURL(facetValue) {
          return createURL(state.resetPage().toggleFacetRefinement(hierarchicalFacetName, facetValue));
        }
        if (!sendEvent) {
          sendEvent = createSendEventForFacet({
            instantSearchInstance,
            helper,
            attribute: hierarchicalFacetName,
            widgetType: this.$$type
          });
        }
        if (!_refine) {
          _refine = function _refine2(facetValue) {
            sendEvent("click", facetValue);
            helper.toggleFacetRefinement(hierarchicalFacetName, facetValue).search();
          };
        }
        if (results) {
          var facetValues = results.getFacetValues(hierarchicalFacetName, {
            sortBy,
            facetOrdering: sortBy === DEFAULT_SORT
          });
          var facetItems = facetValues && !Array.isArray(facetValues) && facetValues.data ? facetValues.data : [];
          var hasExhaustiveItems = (state.maxValuesPerFacet || 0) > getLimit() ? facetItems.length <= getLimit() : facetItems.length < getLimit();
          canToggleShowMore = showMore && (isShowingMore || !hasExhaustiveItems);
          items = transformItems(_prepareFacetValues(facetItems), {
            results
          });
        }
        return {
          items,
          refine: _refine,
          canRefine: items.length > 0,
          createURL: _createURL,
          sendEvent,
          widgetParams,
          isShowingMore,
          toggleShowMore: cachedToggleShowMore,
          canToggleShowMore
        };
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref5) {
        var searchParameters = _ref5.searchParameters;
        var path = searchParameters.getHierarchicalFacetBreadcrumb(hierarchicalFacetName);
        if (!path.length) {
          return uiState;
        }
        return _objectSpread8(_objectSpread8({}, uiState), {}, {
          hierarchicalMenu: _objectSpread8(_objectSpread8({}, uiState.hierarchicalMenu), {}, _defineProperty8({}, hierarchicalFacetName, path))
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref6) {
        var uiState = _ref6.uiState;
        var values = uiState.hierarchicalMenu && uiState.hierarchicalMenu[hierarchicalFacetName];
        if (searchParameters.isHierarchicalFacet(hierarchicalFacetName)) {
          var facet = searchParameters.getHierarchicalFacetByName(hierarchicalFacetName);
          true ? _warning(isEqual(facet.attributes, attributes) && facet.separator === separator && facet.rootPath === rootPath, "Using Breadcrumb and HierarchicalMenu on the same facet with different options overrides the configuration of the HierarchicalMenu.") : void 0;
        }
        var withFacetConfiguration = searchParameters.removeHierarchicalFacet(hierarchicalFacetName).addHierarchicalFacet({
          name: hierarchicalFacetName,
          attributes,
          separator,
          rootPath,
          showParentLevel
        });
        var currentMaxValuesPerFacet = withFacetConfiguration.maxValuesPerFacet || 0;
        var nextMaxValuesPerFacet = Math.max(currentMaxValuesPerFacet, showMore ? showMoreLimit : limit);
        var withMaxValuesPerFacet = withFacetConfiguration.setQueryParameter("maxValuesPerFacet", nextMaxValuesPerFacet);
        if (!values) {
          return withMaxValuesPerFacet.setQueryParameters({
            hierarchicalFacetsRefinements: _objectSpread8(_objectSpread8({}, withMaxValuesPerFacet.hierarchicalFacetsRefinements), {}, _defineProperty8({}, hierarchicalFacetName, []))
          });
        }
        return withMaxValuesPerFacet.addHierarchicalFacetRefinement(hierarchicalFacetName, values.join(separator));
      }
    };
  };
};
var connectHierarchicalMenu_default = connectHierarchicalMenu;

// node_modules/instantsearch.js/es/connectors/hits/connectHits.js
function ownKeys9(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread9(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys9(Object(source), true).forEach(function(key) {
        _defineProperty9(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys9(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty9(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage4 = createDocumentationMessageGenerator({
  name: "hits",
  connector: true
});
var connectHits = function connectHits2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage4());
  return function(widgetParams) {
    var _ref = widgetParams || {}, _ref$escapeHTML = _ref.escapeHTML, escapeHTML = _ref$escapeHTML === void 0 ? true : _ref$escapeHTML, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items) {
      return items;
    } : _ref$transformItems;
    var sendEvent;
    var bindEvent;
    return {
      $$type: "ais.hits",
      init: function init(initOptions) {
        renderFn(_objectSpread9(_objectSpread9({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance: initOptions.instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var renderState = this.getWidgetRenderState(renderOptions);
        renderFn(_objectSpread9(_objectSpread9({}, renderState), {}, {
          instantSearchInstance: renderOptions.instantSearchInstance
        }), false);
        renderState.sendEvent("view", renderState.hits);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread9(_objectSpread9({}, renderState), {}, {
          hits: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref2) {
        var results = _ref2.results, helper = _ref2.helper, instantSearchInstance = _ref2.instantSearchInstance;
        if (!sendEvent) {
          sendEvent = createSendEventForHits({
            instantSearchInstance,
            index: helper.getIndex(),
            widgetType: this.$$type
          });
        }
        if (!bindEvent) {
          bindEvent = createBindEventForHits({
            index: helper.getIndex(),
            widgetType: this.$$type
          });
        }
        if (!results) {
          return {
            hits: [],
            results: void 0,
            sendEvent,
            bindEvent,
            widgetParams
          };
        }
        if (escapeHTML && results.hits.length > 0) {
          results.hits = escapeHits(results.hits);
        }
        var hitsWithAbsolutePosition = addAbsolutePosition(results.hits, results.page, results.hitsPerPage);
        var hitsWithAbsolutePositionAndQueryID = addQueryID(hitsWithAbsolutePosition, results.queryID);
        var transformedHits = transformItems(hitsWithAbsolutePositionAndQueryID, {
          results
        });
        return {
          hits: transformedHits,
          results,
          sendEvent,
          bindEvent,
          widgetParams
        };
      },
      dispose: function dispose(_ref3) {
        var state = _ref3.state;
        unmountFn();
        if (!escapeHTML) {
          return state;
        }
        return state.setQueryParameters(Object.keys(TAG_PLACEHOLDER).reduce(function(acc, key) {
          return _objectSpread9(_objectSpread9({}, acc), {}, _defineProperty9({}, key, void 0));
        }, {}));
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(state) {
        if (!escapeHTML) {
          return state;
        }
        return state.setQueryParameters(TAG_PLACEHOLDER);
      }
    };
  };
};
var connectHits_default = connectHits;

// node_modules/instantsearch.js/es/lib/insights/client.js
function ownKeys10(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread10(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys10(Object(source), true).forEach(function(key) {
        _defineProperty10(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys10(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty10(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var getSelectedHits = function getSelectedHits2(hits, selectedObjectIDs) {
  return selectedObjectIDs.map(function(objectID) {
    var hit = find(hits, function(h5) {
      return h5.objectID === objectID;
    });
    if (typeof hit === "undefined") {
      throw new Error('Could not find objectID "'.concat(objectID, '" passed to `clickedObjectIDsAfterSearch` in the returned hits. This is necessary to infer the absolute position and the query ID.'));
    }
    return hit;
  });
};
var getQueryID = function getQueryID2(selectedHits) {
  var queryIDs = uniq(selectedHits.map(function(hit) {
    return hit.__queryID;
  }));
  if (queryIDs.length > 1) {
    throw new Error("Insights currently allows a single `queryID`. The `objectIDs` provided map to multiple `queryID`s.");
  }
  var queryID = queryIDs[0];
  if (typeof queryID !== "string") {
    throw new Error("Could not infer `queryID`. Ensure InstantSearch `clickAnalytics: true` was added with the Configure widget.\n\nSee: https://alg.li/lNiZZ7");
  }
  return queryID;
};
var getPositions = function getPositions2(selectedHits) {
  return selectedHits.map(function(hit) {
    return hit.__position;
  });
};
var inferPayload = function inferPayload2(_ref) {
  var method = _ref.method, results = _ref.results, hits = _ref.hits, objectIDs = _ref.objectIDs;
  var index3 = results.index;
  var selectedHits = getSelectedHits(hits, objectIDs);
  var queryID = getQueryID(selectedHits);
  switch (method) {
    case "clickedObjectIDsAfterSearch": {
      var positions = getPositions(selectedHits);
      return {
        index: index3,
        queryID,
        objectIDs,
        positions
      };
    }
    case "convertedObjectIDsAfterSearch":
      return {
        index: index3,
        queryID,
        objectIDs
      };
    default:
      throw new Error('Unsupported method passed to insights: "'.concat(method, '".'));
  }
};
var wrapInsightsClient = function wrapInsightsClient2(aa, results, hits) {
  return function(method) {
    for (var _len = arguments.length, payloads = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      payloads[_key - 1] = arguments[_key];
    }
    var payload = payloads[0];
    true ? _warning(false, "`insights` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\n\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/") : void 0;
    if (!aa) {
      var withInstantSearchUsage = createDocumentationMessageGenerator({
        name: "instantsearch"
      });
      throw new Error(withInstantSearchUsage("The `insightsClient` option has not been provided to `instantsearch`."));
    }
    if (!Array.isArray(payload.objectIDs)) {
      throw new TypeError("Expected `objectIDs` to be an array.");
    }
    var inferredPayload = inferPayload({
      method,
      results,
      hits,
      objectIDs: payload.objectIDs
    });
    aa(method, _objectSpread10(_objectSpread10({}, inferredPayload), payload));
  };
};
function withInsights(connector) {
  return function(renderFn, unmountFn) {
    return connector(function(renderOptions, isFirstRender) {
      var results = renderOptions.results, hits = renderOptions.hits, instantSearchInstance = renderOptions.instantSearchInstance;
      if (results && hits && instantSearchInstance) {
        var insights2 = wrapInsightsClient(instantSearchInstance.insightsClient, results, hits);
        return renderFn(_objectSpread10(_objectSpread10({}, renderOptions), {}, {
          insights: insights2
        }), isFirstRender);
      }
      return renderFn(renderOptions, isFirstRender);
    }, unmountFn);
  };
}

// node_modules/preact/dist/preact.module.js
var n4;
var l;
var u;
var i;
var t3;
var o2;
var r;
var f = {};
var e3 = [];
var c = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function s(n5, l7) {
  for (var u10 in l7)
    n5[u10] = l7[u10];
  return n5;
}
function a2(n5) {
  var l7 = n5.parentNode;
  l7 && l7.removeChild(n5);
}
function v(n5, i4, t6, o7, r15) {
  var f8 = { type: n5, props: i4, key: t6, ref: o7, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: null == r15 ? ++u : r15 };
  return null == r15 && null != l.vnode && l.vnode(f8), f8;
}
function p2(n5) {
  return n5.children;
}
function d(n5, l7) {
  this.props = n5, this.context = l7;
}
function _(n5, l7) {
  if (null == l7)
    return n5.__ ? _(n5.__, n5.__.__k.indexOf(n5) + 1) : null;
  for (var u10; l7 < n5.__k.length; l7++)
    if (null != (u10 = n5.__k[l7]) && null != u10.__e)
      return u10.__e;
  return "function" == typeof n5.type ? _(n5) : null;
}
function k(n5) {
  var l7, u10;
  if (null != (n5 = n5.__) && null != n5.__c) {
    for (n5.__e = n5.__c.base = null, l7 = 0; l7 < n5.__k.length; l7++)
      if (null != (u10 = n5.__k[l7]) && null != u10.__e) {
        n5.__e = n5.__c.base = u10.__e;
        break;
      }
    return k(n5);
  }
}
function b(n5) {
  (!n5.__d && (n5.__d = true) && t3.push(n5) && !g.__r++ || o2 !== l.debounceRendering) && ((o2 = l.debounceRendering) || setTimeout)(g);
}
function g() {
  for (var n5; g.__r = t3.length; )
    n5 = t3.sort(function(n6, l7) {
      return n6.__v.__b - l7.__v.__b;
    }), t3 = [], n5.some(function(n6) {
      var l7, u10, i4, t6, o7, r15;
      n6.__d && (o7 = (t6 = (l7 = n6).__v).__e, (r15 = l7.__P) && (u10 = [], (i4 = s({}, t6)).__v = t6.__v + 1, j(r15, t6, i4, l7.__n, void 0 !== r15.ownerSVGElement, null != t6.__h ? [o7] : null, u10, null == o7 ? _(t6) : o7, t6.__h), z(u10, t6), t6.__e != o7 && k(t6)));
    });
}
function w(n5, l7, u10, i4, t6, o7, r15, c13, s6, a10) {
  var h5, y2, d5, k3, b2, g4, w2, x2 = i4 && i4.__k || e3, C2 = x2.length;
  for (u10.__k = [], h5 = 0; h5 < l7.length; h5++)
    if (null != (k3 = u10.__k[h5] = null == (k3 = l7[h5]) || "boolean" == typeof k3 ? null : "string" == typeof k3 || "number" == typeof k3 || "bigint" == typeof k3 ? v(null, k3, null, null, k3) : Array.isArray(k3) ? v(p2, { children: k3 }, null, null, null) : k3.__b > 0 ? v(k3.type, k3.props, k3.key, k3.ref ? k3.ref : null, k3.__v) : k3)) {
      if (k3.__ = u10, k3.__b = u10.__b + 1, null === (d5 = x2[h5]) || d5 && k3.key == d5.key && k3.type === d5.type)
        x2[h5] = void 0;
      else
        for (y2 = 0; y2 < C2; y2++) {
          if ((d5 = x2[y2]) && k3.key == d5.key && k3.type === d5.type) {
            x2[y2] = void 0;
            break;
          }
          d5 = null;
        }
      j(n5, k3, d5 = d5 || f, t6, o7, r15, c13, s6, a10), b2 = k3.__e, (y2 = k3.ref) && d5.ref != y2 && (w2 || (w2 = []), d5.ref && w2.push(d5.ref, null, k3), w2.push(y2, k3.__c || b2, k3)), null != b2 ? (null == g4 && (g4 = b2), "function" == typeof k3.type && k3.__k === d5.__k ? k3.__d = s6 = m(k3, s6, n5) : s6 = A(n5, k3, d5, x2, b2, s6), "function" == typeof u10.type && (u10.__d = s6)) : s6 && d5.__e == s6 && s6.parentNode != n5 && (s6 = _(d5));
    }
  for (u10.__e = g4, h5 = C2; h5--; )
    null != x2[h5] && ("function" == typeof u10.type && null != x2[h5].__e && x2[h5].__e == u10.__d && (u10.__d = _(i4, h5 + 1)), N(x2[h5], x2[h5]));
  if (w2)
    for (h5 = 0; h5 < w2.length; h5++)
      M(w2[h5], w2[++h5], w2[++h5]);
}
function m(n5, l7, u10) {
  for (var i4, t6 = n5.__k, o7 = 0; t6 && o7 < t6.length; o7++)
    (i4 = t6[o7]) && (i4.__ = n5, l7 = "function" == typeof i4.type ? m(i4, l7, u10) : A(u10, i4, i4, t6, i4.__e, l7));
  return l7;
}
function A(n5, l7, u10, i4, t6, o7) {
  var r15, f8, e7;
  if (void 0 !== l7.__d)
    r15 = l7.__d, l7.__d = void 0;
  else if (null == u10 || t6 != o7 || null == t6.parentNode)
    n:
      if (null == o7 || o7.parentNode !== n5)
        n5.appendChild(t6), r15 = null;
      else {
        for (f8 = o7, e7 = 0; (f8 = f8.nextSibling) && e7 < i4.length; e7 += 2)
          if (f8 == t6)
            break n;
        n5.insertBefore(t6, o7), r15 = o7;
      }
  return void 0 !== r15 ? r15 : t6.nextSibling;
}
function C(n5, l7, u10, i4, t6) {
  var o7;
  for (o7 in u10)
    "children" === o7 || "key" === o7 || o7 in l7 || H(n5, o7, null, u10[o7], i4);
  for (o7 in l7)
    t6 && "function" != typeof l7[o7] || "children" === o7 || "key" === o7 || "value" === o7 || "checked" === o7 || u10[o7] === l7[o7] || H(n5, o7, l7[o7], u10[o7], i4);
}
function $(n5, l7, u10) {
  "-" === l7[0] ? n5.setProperty(l7, u10) : n5[l7] = null == u10 ? "" : "number" != typeof u10 || c.test(l7) ? u10 : u10 + "px";
}
function H(n5, l7, u10, i4, t6) {
  var o7;
  n:
    if ("style" === l7)
      if ("string" == typeof u10)
        n5.style.cssText = u10;
      else {
        if ("string" == typeof i4 && (n5.style.cssText = i4 = ""), i4)
          for (l7 in i4)
            u10 && l7 in u10 || $(n5.style, l7, "");
        if (u10)
          for (l7 in u10)
            i4 && u10[l7] === i4[l7] || $(n5.style, l7, u10[l7]);
      }
    else if ("o" === l7[0] && "n" === l7[1])
      o7 = l7 !== (l7 = l7.replace(/Capture$/, "")), l7 = l7.toLowerCase() in n5 ? l7.toLowerCase().slice(2) : l7.slice(2), n5.l || (n5.l = {}), n5.l[l7 + o7] = u10, u10 ? i4 || n5.addEventListener(l7, o7 ? T : I, o7) : n5.removeEventListener(l7, o7 ? T : I, o7);
    else if ("dangerouslySetInnerHTML" !== l7) {
      if (t6)
        l7 = l7.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if ("href" !== l7 && "list" !== l7 && "form" !== l7 && "tabIndex" !== l7 && "download" !== l7 && l7 in n5)
        try {
          n5[l7] = null == u10 ? "" : u10;
          break n;
        } catch (n6) {
        }
      "function" == typeof u10 || (null != u10 && (false !== u10 || "a" === l7[0] && "r" === l7[1]) ? n5.setAttribute(l7, u10) : n5.removeAttribute(l7));
    }
}
function I(n5) {
  this.l[n5.type + false](l.event ? l.event(n5) : n5);
}
function T(n5) {
  this.l[n5.type + true](l.event ? l.event(n5) : n5);
}
function j(n5, u10, i4, t6, o7, r15, f8, e7, c13) {
  var a10, h5, v5, y2, _2, k3, b2, g4, m6, x2, A2, C2, $2, H2 = u10.type;
  if (void 0 !== u10.constructor)
    return null;
  null != i4.__h && (c13 = i4.__h, e7 = u10.__e = i4.__e, u10.__h = null, r15 = [e7]), (a10 = l.__b) && a10(u10);
  try {
    n:
      if ("function" == typeof H2) {
        if (g4 = u10.props, m6 = (a10 = H2.contextType) && t6[a10.__c], x2 = a10 ? m6 ? m6.props.value : a10.__ : t6, i4.__c ? b2 = (h5 = u10.__c = i4.__c).__ = h5.__E : ("prototype" in H2 && H2.prototype.render ? u10.__c = h5 = new H2(g4, x2) : (u10.__c = h5 = new d(g4, x2), h5.constructor = H2, h5.render = O), m6 && m6.sub(h5), h5.props = g4, h5.state || (h5.state = {}), h5.context = x2, h5.__n = t6, v5 = h5.__d = true, h5.__h = []), null == h5.__s && (h5.__s = h5.state), null != H2.getDerivedStateFromProps && (h5.__s == h5.state && (h5.__s = s({}, h5.__s)), s(h5.__s, H2.getDerivedStateFromProps(g4, h5.__s))), y2 = h5.props, _2 = h5.state, v5)
          null == H2.getDerivedStateFromProps && null != h5.componentWillMount && h5.componentWillMount(), null != h5.componentDidMount && h5.__h.push(h5.componentDidMount);
        else {
          if (null == H2.getDerivedStateFromProps && g4 !== y2 && null != h5.componentWillReceiveProps && h5.componentWillReceiveProps(g4, x2), !h5.__e && null != h5.shouldComponentUpdate && false === h5.shouldComponentUpdate(g4, h5.__s, x2) || u10.__v === i4.__v) {
            h5.props = g4, h5.state = h5.__s, u10.__v !== i4.__v && (h5.__d = false), h5.__v = u10, u10.__e = i4.__e, u10.__k = i4.__k, u10.__k.forEach(function(n6) {
              n6 && (n6.__ = u10);
            }), h5.__h.length && f8.push(h5);
            break n;
          }
          null != h5.componentWillUpdate && h5.componentWillUpdate(g4, h5.__s, x2), null != h5.componentDidUpdate && h5.__h.push(function() {
            h5.componentDidUpdate(y2, _2, k3);
          });
        }
        if (h5.context = x2, h5.props = g4, h5.__v = u10, h5.__P = n5, A2 = l.__r, C2 = 0, "prototype" in H2 && H2.prototype.render)
          h5.state = h5.__s, h5.__d = false, A2 && A2(u10), a10 = h5.render(h5.props, h5.state, h5.context);
        else
          do {
            h5.__d = false, A2 && A2(u10), a10 = h5.render(h5.props, h5.state, h5.context), h5.state = h5.__s;
          } while (h5.__d && ++C2 < 25);
        h5.state = h5.__s, null != h5.getChildContext && (t6 = s(s({}, t6), h5.getChildContext())), v5 || null == h5.getSnapshotBeforeUpdate || (k3 = h5.getSnapshotBeforeUpdate(y2, _2)), $2 = null != a10 && a10.type === p2 && null == a10.key ? a10.props.children : a10, w(n5, Array.isArray($2) ? $2 : [$2], u10, i4, t6, o7, r15, f8, e7, c13), h5.base = u10.__e, u10.__h = null, h5.__h.length && f8.push(h5), b2 && (h5.__E = h5.__ = null), h5.__e = false;
      } else
        null == r15 && u10.__v === i4.__v ? (u10.__k = i4.__k, u10.__e = i4.__e) : u10.__e = L(i4.__e, u10, i4, t6, o7, r15, f8, c13);
    (a10 = l.diffed) && a10(u10);
  } catch (n6) {
    u10.__v = null, (c13 || null != r15) && (u10.__e = e7, u10.__h = !!c13, r15[r15.indexOf(e7)] = null), l.__e(n6, u10, i4);
  }
}
function z(n5, u10) {
  l.__c && l.__c(u10, n5), n5.some(function(u11) {
    try {
      n5 = u11.__h, u11.__h = [], n5.some(function(n6) {
        n6.call(u11);
      });
    } catch (n6) {
      l.__e(n6, u11.__v);
    }
  });
}
function L(l7, u10, i4, t6, o7, r15, e7, c13) {
  var s6, h5, v5, y2 = i4.props, p5 = u10.props, d5 = u10.type, k3 = 0;
  if ("svg" === d5 && (o7 = true), null != r15) {
    for (; k3 < r15.length; k3++)
      if ((s6 = r15[k3]) && "setAttribute" in s6 == !!d5 && (d5 ? s6.localName === d5 : 3 === s6.nodeType)) {
        l7 = s6, r15[k3] = null;
        break;
      }
  }
  if (null == l7) {
    if (null === d5)
      return document.createTextNode(p5);
    l7 = o7 ? document.createElementNS("http://www.w3.org/2000/svg", d5) : document.createElement(d5, p5.is && p5), r15 = null, c13 = false;
  }
  if (null === d5)
    y2 === p5 || c13 && l7.data === p5 || (l7.data = p5);
  else {
    if (r15 = r15 && n4.call(l7.childNodes), h5 = (y2 = i4.props || f).dangerouslySetInnerHTML, v5 = p5.dangerouslySetInnerHTML, !c13) {
      if (null != r15)
        for (y2 = {}, k3 = 0; k3 < l7.attributes.length; k3++)
          y2[l7.attributes[k3].name] = l7.attributes[k3].value;
      (v5 || h5) && (v5 && (h5 && v5.__html == h5.__html || v5.__html === l7.innerHTML) || (l7.innerHTML = v5 && v5.__html || ""));
    }
    if (C(l7, p5, y2, o7, c13), v5)
      u10.__k = [];
    else if (k3 = u10.props.children, w(l7, Array.isArray(k3) ? k3 : [k3], u10, i4, t6, o7 && "foreignObject" !== d5, r15, e7, r15 ? r15[0] : i4.__k && _(i4, 0), c13), null != r15)
      for (k3 = r15.length; k3--; )
        null != r15[k3] && a2(r15[k3]);
    c13 || ("value" in p5 && void 0 !== (k3 = p5.value) && (k3 !== l7.value || "progress" === d5 && !k3 || "option" === d5 && k3 !== y2.value) && H(l7, "value", k3, y2.value, false), "checked" in p5 && void 0 !== (k3 = p5.checked) && k3 !== l7.checked && H(l7, "checked", k3, y2.checked, false));
  }
  return l7;
}
function M(n5, u10, i4) {
  try {
    "function" == typeof n5 ? n5(u10) : n5.current = u10;
  } catch (n6) {
    l.__e(n6, i4);
  }
}
function N(n5, u10, i4) {
  var t6, o7;
  if (l.unmount && l.unmount(n5), (t6 = n5.ref) && (t6.current && t6.current !== n5.__e || M(t6, null, u10)), null != (t6 = n5.__c)) {
    if (t6.componentWillUnmount)
      try {
        t6.componentWillUnmount();
      } catch (n6) {
        l.__e(n6, u10);
      }
    t6.base = t6.__P = null, n5.__c = void 0;
  }
  if (t6 = n5.__k)
    for (o7 = 0; o7 < t6.length; o7++)
      t6[o7] && N(t6[o7], u10, "function" != typeof n5.type);
  i4 || null == n5.__e || a2(n5.__e), n5.__ = n5.__e = n5.__d = void 0;
}
function O(n5, l7, u10) {
  return this.constructor(n5, u10);
}
n4 = e3.slice, l = { __e: function(n5, l7, u10, i4) {
  for (var t6, o7, r15; l7 = l7.__; )
    if ((t6 = l7.__c) && !t6.__)
      try {
        if ((o7 = t6.constructor) && null != o7.getDerivedStateFromError && (t6.setState(o7.getDerivedStateFromError(n5)), r15 = t6.__d), null != t6.componentDidCatch && (t6.componentDidCatch(n5, i4 || {}), r15 = t6.__d), r15)
          return t6.__E = t6;
      } catch (l8) {
        n5 = l8;
      }
  throw n5;
} }, u = 0, i = function(n5) {
  return null != n5 && void 0 === n5.constructor;
}, d.prototype.setState = function(n5, l7) {
  var u10;
  u10 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = s({}, this.state), "function" == typeof n5 && (n5 = n5(s({}, u10), this.props)), n5 && s(u10, n5), null != n5 && this.__v && (l7 && this.__h.push(l7), b(this));
}, d.prototype.forceUpdate = function(n5) {
  this.__v && (this.__e = true, n5 && this.__h.push(n5), b(this));
}, d.prototype.render = p2, t3 = [], g.__r = 0, r = 0;

// node_modules/instantsearch.js/es/helpers/insights.js
function _typeof4(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof4 = function _typeof7(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof4 = function _typeof7(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof4(obj);
}
function writeDataAttributes(_ref) {
  var method = _ref.method, payload = _ref.payload;
  if (_typeof4(payload) !== "object") {
    throw new Error("The insights helper expects the payload to be an object.");
  }
  var serializedPayload;
  try {
    serializedPayload = serializePayload(payload);
  } catch (error) {
    throw new Error("Could not JSON serialize the payload object.");
  }
  return 'data-insights-method="'.concat(method, '" data-insights-payload="').concat(serializedPayload, '"');
}
function insights(method, payload) {
  true ? _warning(false, "`insights` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\n\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/") : void 0;
  return writeDataAttributes({
    method,
    payload
  });
}

// node_modules/instantsearch.js/es/connectors/hits/connectHitsWithInsights.js
var connectHitsWithInsights = withInsights(connectHits_default);
var connectHitsWithInsights_default = connectHitsWithInsights;

// node_modules/instantsearch.js/es/connectors/hits-per-page/connectHitsPerPage.js
function _toConsumableArray5(arr) {
  return _arrayWithoutHoles5(arr) || _iterableToArray5(arr) || _unsupportedIterableToArray6(arr) || _nonIterableSpread5();
}
function _nonIterableSpread5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray6(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray6(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray6(o7, minLen);
}
function _iterableToArray5(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles5(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray6(arr);
}
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function ownKeys11(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread11(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys11(Object(source), true).forEach(function(key) {
        _defineProperty11(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys11(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty11(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage5 = createDocumentationMessageGenerator({
  name: "hits-per-page",
  connector: true
});
var connectHitsPerPage = function connectHitsPerPage2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage5());
  return function(widgetParams) {
    var _ref = widgetParams || {}, userItems = _ref.items, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items2) {
      return items2;
    } : _ref$transformItems;
    if (!Array.isArray(userItems)) {
      throw new Error(withUsage5("The `items` option expects an array of objects."));
    }
    var items = userItems;
    var defaultItems = items.filter(function(item) {
      return item.default === true;
    });
    if (defaultItems.length === 0) {
      throw new Error(withUsage5("A default value must be specified in `items`."));
    }
    if (defaultItems.length > 1) {
      throw new Error(withUsage5("More than one default value is specified in `items`."));
    }
    var defaultItem = defaultItems[0];
    var normalizeItems = function normalizeItems2(_ref2) {
      var hitsPerPage = _ref2.hitsPerPage;
      return items.map(function(item) {
        return _objectSpread11(_objectSpread11({}, item), {}, {
          isRefined: Number(item.value) === Number(hitsPerPage)
        });
      });
    };
    var connectorState = {
      getRefine: function getRefine(helper) {
        return function(value) {
          return !value && value !== 0 ? helper.setQueryParameter("hitsPerPage", void 0).search() : helper.setQueryParameter("hitsPerPage", value).search();
        };
      },
      createURLFactory: function createURLFactory(_ref3) {
        var state = _ref3.state, createURL = _ref3.createURL;
        return function(value) {
          return createURL(state.resetPage().setQueryParameter("hitsPerPage", !value && value !== 0 ? void 0 : value));
        };
      }
    };
    return {
      $$type: "ais.hitsPerPage",
      init: function init(initOptions) {
        var state = initOptions.state, instantSearchInstance = initOptions.instantSearchInstance;
        var isCurrentInOptions = items.some(function(item) {
          return Number(state.hitsPerPage) === Number(item.value);
        });
        if (!isCurrentInOptions) {
          true ? _warning(state.hitsPerPage !== void 0, "\n`hitsPerPage` is not defined.\nThe option `hitsPerPage` needs to be set using the `configure` widget.\n\nLearn more: https://www.algolia.com/doc/api-reference/widgets/hits-per-page/js/\n            ") : void 0;
          true ? _warning(false, '\nThe `items` option of `hitsPerPage` does not contain the "hits per page" value coming from the state: '.concat(state.hitsPerPage, ".\n\nYou may want to add another entry to the `items` option with this value.")) : void 0;
          items = [
            {
              value: "",
              label: ""
            }
          ].concat(_toConsumableArray5(items));
        }
        renderFn(_objectSpread11(_objectSpread11({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread11(_objectSpread11({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref4) {
        var state = _ref4.state;
        unmountFn();
        return state.setQueryParameter("hitsPerPage", void 0);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread11(_objectSpread11({}, renderState), {}, {
          hitsPerPage: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref5) {
        var state = _ref5.state, results = _ref5.results, createURL = _ref5.createURL, helper = _ref5.helper;
        var canRefine = results ? results.nbHits > 0 : false;
        return {
          items: transformItems(normalizeItems(state), {
            results
          }),
          refine: connectorState.getRefine(helper),
          createURL: connectorState.createURLFactory({
            state,
            createURL
          }),
          hasNoResults: !canRefine,
          canRefine,
          widgetParams
        };
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref6) {
        var searchParameters = _ref6.searchParameters;
        var hitsPerPage = searchParameters.hitsPerPage;
        if (hitsPerPage === void 0 || hitsPerPage === defaultItem.value) {
          return uiState;
        }
        return _objectSpread11(_objectSpread11({}, uiState), {}, {
          hitsPerPage
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref7) {
        var uiState = _ref7.uiState;
        return searchParameters.setQueryParameters({
          hitsPerPage: uiState.hitsPerPage || defaultItem.value
        });
      }
    };
  };
};
var connectHitsPerPage_default = connectHitsPerPage;

// node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHits.js
function ownKeys12(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread12(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys12(Object(source), true).forEach(function(key) {
        _defineProperty12(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys12(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty12(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toConsumableArray6(arr) {
  return _arrayWithoutHoles6(arr) || _iterableToArray6(arr) || _unsupportedIterableToArray7(arr) || _nonIterableSpread6();
}
function _nonIterableSpread6() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray7(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray7(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray7(o7, minLen);
}
function _iterableToArray6(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles6(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray7(arr);
}
function _arrayLikeToArray7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _objectWithoutProperties3(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i4;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
      key = sourceSymbolKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var withUsage6 = createDocumentationMessageGenerator({
  name: "infinite-hits",
  connector: true
});
function getStateWithoutPage(state) {
  var _ref = state || {}, page = _ref.page, rest = _objectWithoutProperties3(_ref, ["page"]);
  return rest;
}
function getInMemoryCache() {
  var cachedHits = null;
  var cachedState = null;
  return {
    read: function read(_ref2) {
      var state = _ref2.state;
      return isEqual(cachedState, getStateWithoutPage(state)) ? cachedHits : null;
    },
    write: function write(_ref3) {
      var state = _ref3.state, hits = _ref3.hits;
      cachedState = getStateWithoutPage(state);
      cachedHits = hits;
    }
  };
}
function extractHitsFromCachedHits(cachedHits) {
  return Object.keys(cachedHits).map(Number).sort(function(a10, b2) {
    return a10 - b2;
  }).reduce(function(acc, page) {
    return acc.concat(cachedHits[page]);
  }, []);
}
var connectInfiniteHits = function connectInfiniteHits2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage6());
  return function(widgetParams) {
    var _ref4 = widgetParams || {}, _ref4$escapeHTML = _ref4.escapeHTML, escapeHTML = _ref4$escapeHTML === void 0 ? true : _ref4$escapeHTML, _ref4$transformItems = _ref4.transformItems, transformItems = _ref4$transformItems === void 0 ? function(items) {
      return items;
    } : _ref4$transformItems, _ref4$cache = _ref4.cache, cache = _ref4$cache === void 0 ? getInMemoryCache() : _ref4$cache;
    var showPrevious;
    var showMore;
    var sendEvent;
    var bindEvent;
    var getFirstReceivedPage = function getFirstReceivedPage2(state, cachedHits) {
      var _state$page = state.page, page = _state$page === void 0 ? 0 : _state$page;
      var pages = Object.keys(cachedHits).map(Number);
      if (pages.length === 0) {
        return page;
      } else {
        return Math.min.apply(Math, [page].concat(_toConsumableArray6(pages)));
      }
    };
    var getLastReceivedPage = function getLastReceivedPage2(state, cachedHits) {
      var _state$page2 = state.page, page = _state$page2 === void 0 ? 0 : _state$page2;
      var pages = Object.keys(cachedHits).map(Number);
      if (pages.length === 0) {
        return page;
      } else {
        return Math.max.apply(Math, [page].concat(_toConsumableArray6(pages)));
      }
    };
    var getShowPrevious = function getShowPrevious2(helper) {
      return function() {
        helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread12(_objectSpread12({}, helper.state), {}, {
          page: getFirstReceivedPage(helper.state, cache.read({
            state: helper.state
          }) || {}) - 1
        })).searchWithoutTriggeringOnStateChange();
      };
    };
    var getShowMore = function getShowMore2(helper) {
      return function() {
        helper.setPage(getLastReceivedPage(helper.state, cache.read({
          state: helper.state
        }) || {}) + 1).search();
      };
    };
    return {
      $$type: "ais.infiniteHits",
      init: function init(initOptions) {
        renderFn(_objectSpread12(_objectSpread12({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance: initOptions.instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        var widgetRenderState = this.getWidgetRenderState(renderOptions);
        renderFn(_objectSpread12(_objectSpread12({}, widgetRenderState), {}, {
          instantSearchInstance
        }), false);
        sendEvent("view", widgetRenderState.currentPageHits);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread12(_objectSpread12({}, renderState), {}, {
          infiniteHits: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref5) {
        var results = _ref5.results, helper = _ref5.helper, state = _ref5.state, instantSearchInstance = _ref5.instantSearchInstance;
        var isFirstPage;
        var currentPageHits = [];
        var cachedHits = cache.read({
          state
        }) || {};
        if (!results) {
          showPrevious = getShowPrevious(helper);
          showMore = getShowMore(helper);
          sendEvent = createSendEventForHits({
            instantSearchInstance,
            index: helper.getIndex(),
            widgetType: this.$$type
          });
          bindEvent = createBindEventForHits({
            index: helper.getIndex(),
            widgetType: this.$$type
          });
          isFirstPage = state.page === void 0 || getFirstReceivedPage(state, cachedHits) === 0;
        } else {
          var _state$page3 = state.page, _page = _state$page3 === void 0 ? 0 : _state$page3;
          if (escapeHTML && results.hits.length > 0) {
            results.hits = escapeHits(results.hits);
          }
          var hitsWithAbsolutePosition = addAbsolutePosition(results.hits, results.page, results.hitsPerPage);
          var hitsWithAbsolutePositionAndQueryID = addQueryID(hitsWithAbsolutePosition, results.queryID);
          var transformedHits = transformItems(hitsWithAbsolutePositionAndQueryID, {
            results
          });
          if (cachedHits[_page] === void 0 && !results.__isArtificial) {
            cachedHits[_page] = transformedHits;
            cache.write({
              state,
              hits: cachedHits
            });
          }
          currentPageHits = transformedHits;
          isFirstPage = getFirstReceivedPage(state, cachedHits) === 0;
        }
        var hits = extractHitsFromCachedHits(cachedHits);
        var isLastPage = results ? results.nbPages <= getLastReceivedPage(state, cachedHits) + 1 : true;
        return {
          hits,
          currentPageHits,
          sendEvent,
          bindEvent,
          results,
          showPrevious,
          showMore,
          isFirstPage,
          isLastPage,
          widgetParams
        };
      },
      dispose: function dispose(_ref6) {
        var state = _ref6.state;
        unmountFn();
        var stateWithoutPage = state.setQueryParameter("page", void 0);
        if (!escapeHTML) {
          return stateWithoutPage;
        }
        return stateWithoutPage.setQueryParameters(Object.keys(TAG_PLACEHOLDER).reduce(function(acc, key) {
          return _objectSpread12(_objectSpread12({}, acc), {}, _defineProperty12({}, key, void 0));
        }, {}));
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref7) {
        var searchParameters = _ref7.searchParameters;
        var page = searchParameters.page || 0;
        if (!page) {
          return uiState;
        }
        return _objectSpread12(_objectSpread12({}, uiState), {}, {
          page: page + 1
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref8) {
        var uiState = _ref8.uiState;
        var widgetSearchParameters = searchParameters;
        if (escapeHTML) {
          widgetSearchParameters = searchParameters.setQueryParameters(TAG_PLACEHOLDER);
        }
        var page = uiState.page ? uiState.page - 1 : 0;
        return widgetSearchParameters.setQueryParameter("page", page);
      }
    };
  };
};
var connectInfiniteHits_default = connectInfiniteHits;

// node_modules/instantsearch.js/es/connectors/infinite-hits/connectInfiniteHitsWithInsights.js
var connectInfiniteHitsWithInsights = withInsights(connectInfiniteHits_default);
var connectInfiniteHitsWithInsights_default = connectInfiniteHitsWithInsights;

// node_modules/instantsearch.js/es/connectors/menu/connectMenu.js
function _objectWithoutProperties4(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose4(source, excluded);
  var key, i4;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
      key = sourceSymbolKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _slicedToArray3(arr, i4) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i4) || _unsupportedIterableToArray8(arr, i4) || _nonIterableRest3();
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray8(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray8(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray8(o7, minLen);
}
function _arrayLikeToArray8(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _iterableToArrayLimit3(arr, i4) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i4 && _arr.length === i4)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr))
    return arr;
}
function ownKeys13(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread13(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys13(Object(source), true).forEach(function(key) {
        _defineProperty13(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys13(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty13(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage7 = createDocumentationMessageGenerator({
  name: "menu",
  connector: true
});
var DEFAULT_SORT2 = ["isRefined", "name:asc"];
var connectMenu = function connectMenu2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage7());
  return function(widgetParams) {
    var _ref = widgetParams || {}, attribute = _ref.attribute, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 10 : _ref$limit, _ref$showMore = _ref.showMore, showMore = _ref$showMore === void 0 ? false : _ref$showMore, _ref$showMoreLimit = _ref.showMoreLimit, showMoreLimit = _ref$showMoreLimit === void 0 ? 20 : _ref$showMoreLimit, _ref$sortBy = _ref.sortBy, sortBy = _ref$sortBy === void 0 ? DEFAULT_SORT2 : _ref$sortBy, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items) {
      return items;
    } : _ref$transformItems;
    if (!attribute) {
      throw new Error(withUsage7("The `attribute` option is required."));
    }
    if (showMore === true && showMoreLimit <= limit) {
      throw new Error(withUsage7("The `showMoreLimit` option must be greater than `limit`."));
    }
    var sendEvent;
    var _createURL;
    var _refine;
    var isShowingMore = false;
    var toggleShowMore = function toggleShowMore2() {
    };
    function createToggleShowMore(renderOptions, widget) {
      return function() {
        isShowingMore = !isShowingMore;
        widget.render(renderOptions);
      };
    }
    function cachedToggleShowMore() {
      toggleShowMore();
    }
    function getLimit() {
      return isShowingMore ? showMoreLimit : limit;
    }
    return {
      $$type: "ais.menu",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread13(_objectSpread13({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread13(_objectSpread13({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref2) {
        var state = _ref2.state;
        unmountFn();
        return state.removeHierarchicalFacet(attribute).setQueryParameter("maxValuesPerFacet", void 0);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread13(_objectSpread13({}, renderState), {}, {
          menu: _objectSpread13(_objectSpread13({}, renderState.menu), {}, _defineProperty13({}, attribute, this.getWidgetRenderState(renderOptions)))
        });
      },
      getWidgetRenderState: function getWidgetRenderState(renderOptions) {
        var results = renderOptions.results, createURL = renderOptions.createURL, instantSearchInstance = renderOptions.instantSearchInstance, helper = renderOptions.helper;
        var items = [];
        var canToggleShowMore = false;
        if (!sendEvent) {
          sendEvent = createSendEventForFacet({
            instantSearchInstance,
            helper,
            attribute,
            widgetType: this.$$type
          });
        }
        if (!_createURL) {
          _createURL = function _createURL2(facetValue) {
            return createURL(helper.state.resetPage().toggleFacetRefinement(attribute, facetValue));
          };
        }
        if (!_refine) {
          _refine = function _refine2(facetValue) {
            var _helper$getHierarchic = helper.getHierarchicalFacetBreadcrumb(attribute), _helper$getHierarchic2 = _slicedToArray3(_helper$getHierarchic, 1), refinedItem = _helper$getHierarchic2[0];
            sendEvent("click", facetValue ? facetValue : refinedItem);
            helper.toggleFacetRefinement(attribute, facetValue ? facetValue : refinedItem).search();
          };
        }
        if (renderOptions.results) {
          toggleShowMore = createToggleShowMore(renderOptions, this);
        }
        if (results) {
          var facetValues = results.getFacetValues(attribute, {
            sortBy,
            facetOrdering: sortBy === DEFAULT_SORT2
          });
          var facetItems = facetValues && !Array.isArray(facetValues) && facetValues.data ? facetValues.data : [];
          canToggleShowMore = showMore && (isShowingMore || facetItems.length > getLimit());
          items = transformItems(facetItems.slice(0, getLimit()).map(function(_ref3) {
            var label = _ref3.name, value = _ref3.escapedValue, path = _ref3.path, item = _objectWithoutProperties4(_ref3, ["name", "escapedValue", "path"]);
            return _objectSpread13(_objectSpread13({}, item), {}, {
              label,
              value
            });
          }), {
            results
          });
        }
        return {
          items,
          createURL: _createURL,
          refine: _refine,
          sendEvent,
          canRefine: items.length > 0,
          widgetParams,
          isShowingMore,
          toggleShowMore: cachedToggleShowMore,
          canToggleShowMore
        };
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref4) {
        var searchParameters = _ref4.searchParameters;
        var _searchParameters$get = searchParameters.getHierarchicalFacetBreadcrumb(attribute), _searchParameters$get2 = _slicedToArray3(_searchParameters$get, 1), value = _searchParameters$get2[0];
        if (!value) {
          return uiState;
        }
        return _objectSpread13(_objectSpread13({}, uiState), {}, {
          menu: _objectSpread13(_objectSpread13({}, uiState.menu), {}, _defineProperty13({}, attribute, value))
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {
        var uiState = _ref5.uiState;
        var value = uiState.menu && uiState.menu[attribute];
        var withFacetConfiguration = searchParameters.removeHierarchicalFacet(attribute).addHierarchicalFacet({
          name: attribute,
          attributes: [attribute]
        });
        var currentMaxValuesPerFacet = withFacetConfiguration.maxValuesPerFacet || 0;
        var nextMaxValuesPerFacet = Math.max(currentMaxValuesPerFacet, showMore ? showMoreLimit : limit);
        var withMaxValuesPerFacet = withFacetConfiguration.setQueryParameter("maxValuesPerFacet", nextMaxValuesPerFacet);
        if (!value) {
          return withMaxValuesPerFacet.setQueryParameters({
            hierarchicalFacetsRefinements: _objectSpread13(_objectSpread13({}, withMaxValuesPerFacet.hierarchicalFacetsRefinements), {}, _defineProperty13({}, attribute, []))
          });
        }
        return withMaxValuesPerFacet.addHierarchicalFacetRefinement(attribute, value);
      }
    };
  };
};
var connectMenu_default = connectMenu;

// node_modules/instantsearch.js/es/connectors/numeric-menu/connectNumericMenu.js
function _createForOfIteratorHelper(o7, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o7[Symbol.iterator] == null) {
    if (Array.isArray(o7) || (it = _unsupportedIterableToArray9(o7)) || allowArrayLike && o7 && typeof o7.length === "number") {
      if (it)
        o7 = it;
      var i4 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n5() {
        if (i4 >= o7.length)
          return { done: true };
        return { done: false, value: o7[i4++] };
      }, e: function e7(_e2) {
        throw _e2;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s6() {
    it = o7[Symbol.iterator]();
  }, n: function n5() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e7(_e3) {
    didErr = true;
    err = _e3;
  }, f: function f8() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _slicedToArray4(arr, i4) {
  return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i4) || _unsupportedIterableToArray9(arr, i4) || _nonIterableRest4();
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray9(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray9(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray9(o7, minLen);
}
function _arrayLikeToArray9(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _iterableToArrayLimit4(arr, i4) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i4 && _arr.length === i4)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles4(arr) {
  if (Array.isArray(arr))
    return arr;
}
function ownKeys14(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread14(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys14(Object(source), true).forEach(function(key) {
        _defineProperty14(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys14(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty14(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage8 = createDocumentationMessageGenerator({
  name: "numeric-menu",
  connector: true
});
var $$type = "ais.numericMenu";
var createSendEvent = function createSendEvent2(_ref) {
  var instantSearchInstance = _ref.instantSearchInstance;
  return function() {
    if (arguments.length === 1) {
      instantSearchInstance.sendEventToInsights(arguments.length <= 0 ? void 0 : arguments[0]);
      return;
    }
  };
};
var connectNumericMenu = function connectNumericMenu2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage8());
  return function(widgetParams) {
    var _ref2 = widgetParams || {}, _ref2$attribute = _ref2.attribute, attribute = _ref2$attribute === void 0 ? "" : _ref2$attribute, _ref2$items = _ref2.items, items = _ref2$items === void 0 ? [] : _ref2$items, _ref2$transformItems = _ref2.transformItems, transformItems = _ref2$transformItems === void 0 ? function(item) {
      return item;
    } : _ref2$transformItems;
    if (attribute === "") {
      throw new Error(withUsage8("The `attribute` option is required."));
    }
    if (!items || items.length === 0) {
      throw new Error(withUsage8("The `items` option expects an array of objects."));
    }
    var prepareItems2 = function prepareItems3(state) {
      return items.map(function(_ref3) {
        var start = _ref3.start, end = _ref3.end, label = _ref3.label;
        return {
          label,
          value: encodeURI(JSON.stringify({
            start,
            end
          })),
          isRefined: isRefined(state, attribute, {
            start,
            end,
            label
          })
        };
      });
    };
    var connectorState = {};
    return {
      $$type,
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread14(_objectSpread14({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread14(_objectSpread14({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref4) {
        var state = _ref4.state;
        unmountFn();
        return state.clearRefinements(attribute);
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref5) {
        var searchParameters = _ref5.searchParameters;
        var values = searchParameters.getNumericRefinements(attribute);
        var equal = values["="] && values["="][0];
        if (equal || equal === 0) {
          return _objectSpread14(_objectSpread14({}, uiState), {}, {
            numericMenu: _objectSpread14(_objectSpread14({}, uiState.numericMenu), {}, _defineProperty14({}, attribute, "".concat(values["="])))
          });
        }
        var min = values[">="] && values[">="][0] || "";
        var max = values["<="] && values["<="][0] || "";
        if (min === "" && max === "") {
          return uiState;
        }
        return _objectSpread14(_objectSpread14({}, uiState), {}, {
          numericMenu: _objectSpread14(_objectSpread14({}, uiState.numericMenu), {}, _defineProperty14({}, attribute, "".concat(min, ":").concat(max)))
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref6) {
        var uiState = _ref6.uiState;
        var value = uiState.numericMenu && uiState.numericMenu[attribute];
        var withoutRefinements = searchParameters.clearRefinements(attribute);
        if (!value) {
          return withoutRefinements.setQueryParameters({
            numericRefinements: _objectSpread14(_objectSpread14({}, withoutRefinements.numericRefinements), {}, _defineProperty14({}, attribute, {}))
          });
        }
        var isExact = value.indexOf(":") === -1;
        if (isExact) {
          return withoutRefinements.addNumericRefinement(attribute, "=", Number(value));
        }
        var _value$split$map = value.split(":").map(parseFloat), _value$split$map2 = _slicedToArray4(_value$split$map, 2), min = _value$split$map2[0], max = _value$split$map2[1];
        var withMinRefinement = isFiniteNumber(min) ? withoutRefinements.addNumericRefinement(attribute, ">=", min) : withoutRefinements;
        var withMaxRefinement = isFiniteNumber(max) ? withMinRefinement.addNumericRefinement(attribute, "<=", max) : withMinRefinement;
        return withMaxRefinement;
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread14(_objectSpread14({}, renderState), {}, {
          numericMenu: _objectSpread14(_objectSpread14({}, renderState.numericMenu), {}, _defineProperty14({}, attribute, this.getWidgetRenderState(renderOptions)))
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref7) {
        var results = _ref7.results, state = _ref7.state, instantSearchInstance = _ref7.instantSearchInstance, helper = _ref7.helper, createURL = _ref7.createURL;
        if (!connectorState.refine) {
          connectorState.refine = function(facetValue) {
            var refinedState = getRefinedState(helper.state, attribute, facetValue);
            connectorState.sendEvent("click", facetValue);
            helper.setState(refinedState).search();
          };
        }
        if (!connectorState.createURL) {
          connectorState.createURL = function(newState) {
            return function(facetValue) {
              return createURL(getRefinedState(newState, attribute, facetValue));
            };
          };
        }
        if (!connectorState.sendEvent) {
          connectorState.sendEvent = createSendEvent({
            instantSearchInstance
          });
        }
        var hasNoResults = results ? results.nbHits === 0 : true;
        var preparedItems = prepareItems2(state);
        var allIsSelected = true;
        var _iterator = _createForOfIteratorHelper(preparedItems), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var item = _step.value;
            if (item.isRefined && decodeURI(item.value) !== "{}") {
              allIsSelected = false;
              break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return {
          createURL: connectorState.createURL(state),
          items: transformItems(preparedItems, {
            results
          }),
          hasNoResults,
          canRefine: !(hasNoResults && allIsSelected),
          refine: connectorState.refine,
          sendEvent: connectorState.sendEvent,
          widgetParams
        };
      }
    };
  };
};
function isRefined(state, attribute, option) {
  var currentRefinements = state.getNumericRefinements(attribute);
  if (option.start !== void 0 && option.end !== void 0) {
    if (option.start === option.end) {
      return hasNumericRefinement(currentRefinements, "=", option.start);
    } else {
      return hasNumericRefinement(currentRefinements, ">=", option.start) && hasNumericRefinement(currentRefinements, "<=", option.end);
    }
  }
  if (option.start !== void 0) {
    return hasNumericRefinement(currentRefinements, ">=", option.start);
  }
  if (option.end !== void 0) {
    return hasNumericRefinement(currentRefinements, "<=", option.end);
  }
  if (option.start === void 0 && option.end === void 0) {
    return Object.keys(currentRefinements).every(function(operator) {
      return (currentRefinements[operator] || []).length === 0;
    });
  }
  return false;
}
function getRefinedState(state, attribute, facetValue) {
  var resolvedState = state;
  var refinedOption = JSON.parse(decodeURI(facetValue));
  var currentRefinements = resolvedState.getNumericRefinements(attribute);
  if (refinedOption.start === void 0 && refinedOption.end === void 0) {
    return resolvedState.removeNumericRefinement(attribute);
  }
  if (!isRefined(resolvedState, attribute, refinedOption)) {
    resolvedState = resolvedState.removeNumericRefinement(attribute);
  }
  if (refinedOption.start !== void 0 && refinedOption.end !== void 0) {
    if (refinedOption.start > refinedOption.end) {
      throw new Error("option.start should be > to option.end");
    }
    if (refinedOption.start === refinedOption.end) {
      if (hasNumericRefinement(currentRefinements, "=", refinedOption.start)) {
        resolvedState = resolvedState.removeNumericRefinement(attribute, "=", refinedOption.start);
      } else {
        resolvedState = resolvedState.addNumericRefinement(attribute, "=", refinedOption.start);
      }
      return resolvedState;
    }
  }
  if (refinedOption.start !== void 0) {
    if (hasNumericRefinement(currentRefinements, ">=", refinedOption.start)) {
      resolvedState = resolvedState.removeNumericRefinement(attribute, ">=", refinedOption.start);
    }
    resolvedState = resolvedState.addNumericRefinement(attribute, ">=", refinedOption.start);
  }
  if (refinedOption.end !== void 0) {
    if (hasNumericRefinement(currentRefinements, "<=", refinedOption.end)) {
      resolvedState = resolvedState.removeNumericRefinement(attribute, "<=", refinedOption.end);
    }
    resolvedState = resolvedState.addNumericRefinement(attribute, "<=", refinedOption.end);
  }
  if (typeof resolvedState.page === "number") {
    resolvedState.page = 0;
  }
  return resolvedState;
}
function hasNumericRefinement(currentRefinements, operator, value) {
  return currentRefinements[operator] !== void 0 && currentRefinements[operator].includes(value);
}
var connectNumericMenu_default = connectNumericMenu;

// node_modules/instantsearch.js/es/connectors/pagination/Paginator.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i4 = 0; i4 < props.length; i4++) {
    var descriptor = props[i4];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty15(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Paginator = function() {
  function Paginator2(params) {
    _classCallCheck(this, Paginator2);
    _defineProperty15(this, "currentPage", void 0);
    _defineProperty15(this, "total", void 0);
    _defineProperty15(this, "padding", void 0);
    this.currentPage = params.currentPage;
    this.total = params.total;
    this.padding = params.padding;
  }
  _createClass(Paginator2, [{
    key: "pages",
    value: function pages() {
      var total = this.total, currentPage = this.currentPage, padding = this.padding;
      if (total === 0)
        return [0];
      var totalDisplayedPages = this.nbPagesDisplayed(padding, total);
      if (totalDisplayedPages === total) {
        return range({
          end: total
        });
      }
      var paddingLeft = this.calculatePaddingLeft(currentPage, padding, total, totalDisplayedPages);
      var paddingRight = totalDisplayedPages - paddingLeft;
      var first = currentPage - paddingLeft;
      var last = currentPage + paddingRight;
      return range({
        start: first,
        end: last
      });
    }
  }, {
    key: "nbPagesDisplayed",
    value: function nbPagesDisplayed(padding, total) {
      return Math.min(2 * padding + 1, total);
    }
  }, {
    key: "calculatePaddingLeft",
    value: function calculatePaddingLeft(current, padding, total, totalDisplayedPages) {
      if (current <= padding) {
        return current;
      }
      if (current >= total - padding) {
        return totalDisplayedPages - (total - current);
      }
      return padding;
    }
  }, {
    key: "isLastPage",
    value: function isLastPage() {
      return this.currentPage === this.total - 1 || this.total === 0;
    }
  }, {
    key: "isFirstPage",
    value: function isFirstPage() {
      return this.currentPage === 0;
    }
  }]);
  return Paginator2;
}();
var Paginator_default = Paginator;

// node_modules/instantsearch.js/es/connectors/pagination/connectPagination.js
function ownKeys15(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread15(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys15(Object(source), true).forEach(function(key) {
        _defineProperty16(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys15(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty16(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage9 = createDocumentationMessageGenerator({
  name: "pagination",
  connector: true
});
var connectPagination = function connectPagination2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage9());
  return function(widgetParams) {
    var _ref = widgetParams || {}, totalPages = _ref.totalPages, _ref$padding = _ref.padding, padding = _ref$padding === void 0 ? 3 : _ref$padding;
    var pager = new Paginator_default({
      currentPage: 0,
      total: 0,
      padding
    });
    var connectorState = {};
    function getMaxPage(_ref2) {
      var nbPages = _ref2.nbPages;
      return totalPages !== void 0 ? Math.min(totalPages, nbPages) : nbPages;
    }
    return {
      $$type: "ais.pagination",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread15(_objectSpread15({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread15(_objectSpread15({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref3) {
        var state = _ref3.state;
        unmountFn();
        return state.setQueryParameter("page", void 0);
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref4) {
        var searchParameters = _ref4.searchParameters;
        var page = searchParameters.page || 0;
        if (!page) {
          return uiState;
        }
        return _objectSpread15(_objectSpread15({}, uiState), {}, {
          page: page + 1
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {
        var uiState = _ref5.uiState;
        var page = uiState.page ? uiState.page - 1 : 0;
        return searchParameters.setQueryParameter("page", page);
      },
      getWidgetRenderState: function getWidgetRenderState(_ref6) {
        var results = _ref6.results, helper = _ref6.helper, state = _ref6.state, createURL = _ref6.createURL;
        if (!connectorState.refine) {
          connectorState.refine = function(page2) {
            helper.setPage(page2);
            helper.search();
          };
        }
        if (!connectorState.createURL) {
          connectorState.createURL = function(helperState) {
            return function(page2) {
              return createURL(helperState.setPage(page2));
            };
          };
        }
        var page = state.page || 0;
        var nbPages = getMaxPage(results || {
          nbPages: 0
        });
        pager.currentPage = page;
        pager.total = nbPages;
        return {
          createURL: connectorState.createURL(state),
          refine: connectorState.refine,
          canRefine: nbPages > 1,
          currentRefinement: page,
          nbHits: (results === null || results === void 0 ? void 0 : results.nbHits) || 0,
          nbPages,
          pages: results ? pager.pages() : [],
          isFirstPage: pager.isFirstPage(),
          isLastPage: pager.isLastPage(),
          widgetParams
        };
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread15(_objectSpread15({}, renderState), {}, {
          pagination: this.getWidgetRenderState(renderOptions)
        });
      }
    };
  };
};
var connectPagination_default = connectPagination;

// node_modules/instantsearch.js/es/connectors/range/connectRange.js
function ownKeys16(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread16(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys16(Object(source), true).forEach(function(key) {
        _defineProperty17(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys16(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty17(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray5(arr, i4) {
  return _arrayWithHoles5(arr) || _iterableToArrayLimit5(arr, i4) || _unsupportedIterableToArray10(arr, i4) || _nonIterableRest5();
}
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray10(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray10(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray10(o7, minLen);
}
function _arrayLikeToArray10(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _iterableToArrayLimit5(arr, i4) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i4 && _arr.length === i4)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles5(arr) {
  if (Array.isArray(arr))
    return arr;
}
var withUsage10 = createDocumentationMessageGenerator({
  name: "range-input",
  connector: true
}, {
  name: "range-slider",
  connector: true
});
var $$type2 = "ais.range";
function toPrecision(_ref) {
  var min = _ref.min, max = _ref.max, precision = _ref.precision;
  var pow = Math.pow(10, precision);
  return {
    min: min ? Math.floor(min * pow) / pow : min,
    max: max ? Math.ceil(max * pow) / pow : max
  };
}
var connectRange = function connectRange2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage10());
  return function(widgetParams) {
    var _ref2 = widgetParams || {}, _ref2$attribute = _ref2.attribute, attribute = _ref2$attribute === void 0 ? "" : _ref2$attribute, minBound = _ref2.min, maxBound = _ref2.max, _ref2$precision = _ref2.precision, precision = _ref2$precision === void 0 ? 0 : _ref2$precision;
    if (!attribute) {
      throw new Error(withUsage10("The `attribute` option is required."));
    }
    if (isFiniteNumber(minBound) && isFiniteNumber(maxBound) && minBound > maxBound) {
      throw new Error(withUsage10("The `max` option can't be lower than `min`."));
    }
    var formatToNumber = function formatToNumber2(v5) {
      return Number(Number(v5).toFixed(precision));
    };
    var rangeFormatter = {
      from: function from(v5) {
        return v5.toLocaleString();
      },
      to: function to(v5) {
        return formatToNumber(v5).toLocaleString();
      }
    };
    var getRefinedState2 = function getRefinedState3(helper, currentRange, nextMin, nextMax) {
      var resolvedState = helper.state;
      var currentRangeMin = currentRange.min, currentRangeMax = currentRange.max;
      var _ref3 = resolvedState.getNumericRefinement(attribute, ">=") || [], _ref4 = _slicedToArray5(_ref3, 1), min = _ref4[0];
      var _ref5 = resolvedState.getNumericRefinement(attribute, "<=") || [], _ref6 = _slicedToArray5(_ref5, 1), max = _ref6[0];
      var isResetMin = nextMin === void 0 || nextMin === "";
      var isResetMax = nextMax === void 0 || nextMax === "";
      var _toPrecision = toPrecision({
        min: !isResetMin ? parseFloat(nextMin) : void 0,
        max: !isResetMax ? parseFloat(nextMax) : void 0,
        precision
      }), nextMinAsNumber = _toPrecision.min, nextMaxAsNumber = _toPrecision.max;
      var newNextMin;
      if (!isFiniteNumber(minBound) && currentRangeMin === nextMinAsNumber) {
        newNextMin = void 0;
      } else if (isFiniteNumber(minBound) && isResetMin) {
        newNextMin = minBound;
      } else {
        newNextMin = nextMinAsNumber;
      }
      var newNextMax;
      if (!isFiniteNumber(maxBound) && currentRangeMax === nextMaxAsNumber) {
        newNextMax = void 0;
      } else if (isFiniteNumber(maxBound) && isResetMax) {
        newNextMax = maxBound;
      } else {
        newNextMax = nextMaxAsNumber;
      }
      var isResetNewNextMin = newNextMin === void 0;
      var isGreaterThanCurrentRange = isFiniteNumber(currentRangeMin) && currentRangeMin <= newNextMin;
      var isMinValid = isResetNewNextMin || isFiniteNumber(newNextMin) && (!isFiniteNumber(currentRangeMin) || isGreaterThanCurrentRange);
      var isResetNewNextMax = newNextMax === void 0;
      var isLowerThanRange = isFiniteNumber(newNextMax) && currentRangeMax >= newNextMax;
      var isMaxValid = isResetNewNextMax || isFiniteNumber(newNextMax) && (!isFiniteNumber(currentRangeMax) || isLowerThanRange);
      var hasMinChange = min !== newNextMin;
      var hasMaxChange = max !== newNextMax;
      if ((hasMinChange || hasMaxChange) && isMinValid && isMaxValid) {
        resolvedState = resolvedState.removeNumericRefinement(attribute);
        if (isFiniteNumber(newNextMin)) {
          resolvedState = resolvedState.addNumericRefinement(attribute, ">=", newNextMin);
        }
        if (isFiniteNumber(newNextMax)) {
          resolvedState = resolvedState.addNumericRefinement(attribute, "<=", newNextMax);
        }
        return resolvedState.resetPage();
      }
      return null;
    };
    var createSendEvent7 = function createSendEvent8(instantSearchInstance) {
      return function() {
        if (arguments.length === 1) {
          instantSearchInstance.sendEventToInsights(arguments.length <= 0 ? void 0 : arguments[0]);
          return;
        }
      };
    };
    function _getCurrentRange(stats) {
      var min;
      if (isFiniteNumber(minBound)) {
        min = minBound;
      } else if (isFiniteNumber(stats.min)) {
        min = stats.min;
      } else {
        min = 0;
      }
      var max;
      if (isFiniteNumber(maxBound)) {
        max = maxBound;
      } else if (isFiniteNumber(stats.max)) {
        max = stats.max;
      } else {
        max = 0;
      }
      return toPrecision({
        min,
        max,
        precision
      });
    }
    function _getCurrentRefinement(helper) {
      var _ref7 = helper.getNumericRefinement(attribute, ">=") || [], _ref8 = _slicedToArray5(_ref7, 1), minValue = _ref8[0];
      var _ref9 = helper.getNumericRefinement(attribute, "<=") || [], _ref10 = _slicedToArray5(_ref9, 1), maxValue = _ref10[0];
      var min = isFiniteNumber(minValue) ? minValue : -Infinity;
      var max = isFiniteNumber(maxValue) ? maxValue : Infinity;
      return [min, max];
    }
    function _refine(helper, currentRange) {
      return function() {
        var _ref11 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [void 0, void 0], _ref12 = _slicedToArray5(_ref11, 2), nextMin = _ref12[0], nextMax = _ref12[1];
        var refinedState = getRefinedState2(helper, currentRange, nextMin, nextMax);
        if (refinedState) {
          helper.setState(refinedState).search();
        }
      };
    }
    return {
      $$type: $$type2,
      init: function init(initOptions) {
        renderFn(_objectSpread16(_objectSpread16({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance: initOptions.instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        renderFn(_objectSpread16(_objectSpread16({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance: renderOptions.instantSearchInstance
        }), false);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread16(_objectSpread16({}, renderState), {}, {
          range: _objectSpread16(_objectSpread16({}, renderState.range), {}, _defineProperty17({}, attribute, this.getWidgetRenderState(renderOptions)))
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref13) {
        var results = _ref13.results, helper = _ref13.helper, instantSearchInstance = _ref13.instantSearchInstance;
        var facetsFromResults = results && results.disjunctiveFacets || [];
        var facet = find(facetsFromResults, function(facetResult) {
          return facetResult.name === attribute;
        });
        var stats = facet && facet.stats || {
          min: void 0,
          max: void 0
        };
        var currentRange = _getCurrentRange(stats);
        var start = _getCurrentRefinement(helper);
        var refine;
        if (!results) {
          refine = _refine(helper, {
            min: void 0,
            max: void 0
          });
        } else {
          refine = _refine(helper, currentRange);
        }
        return {
          refine,
          canRefine: currentRange.min !== currentRange.max,
          format: rangeFormatter,
          range: currentRange,
          sendEvent: createSendEvent7(instantSearchInstance),
          widgetParams: _objectSpread16(_objectSpread16({}, widgetParams), {}, {
            precision
          }),
          start
        };
      },
      dispose: function dispose(_ref14) {
        var state = _ref14.state;
        unmountFn();
        return state.removeDisjunctiveFacet(attribute).removeNumericRefinement(attribute);
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref15) {
        var searchParameters = _ref15.searchParameters;
        var _searchParameters$get = searchParameters.getNumericRefinements(attribute), _searchParameters$get2 = _searchParameters$get[">="], min = _searchParameters$get2 === void 0 ? [] : _searchParameters$get2, _searchParameters$get3 = _searchParameters$get["<="], max = _searchParameters$get3 === void 0 ? [] : _searchParameters$get3;
        if (min.length === 0 && max.length === 0) {
          return uiState;
        }
        return _objectSpread16(_objectSpread16({}, uiState), {}, {
          range: _objectSpread16(_objectSpread16({}, uiState.range), {}, _defineProperty17({}, attribute, "".concat(min, ":").concat(max)))
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref16) {
        var uiState = _ref16.uiState;
        var widgetSearchParameters = searchParameters.addDisjunctiveFacet(attribute).setQueryParameters({
          numericRefinements: _objectSpread16(_objectSpread16({}, searchParameters.numericRefinements), {}, _defineProperty17({}, attribute, {}))
        });
        if (isFiniteNumber(minBound)) {
          widgetSearchParameters = widgetSearchParameters.addNumericRefinement(attribute, ">=", minBound);
        }
        if (isFiniteNumber(maxBound)) {
          widgetSearchParameters = widgetSearchParameters.addNumericRefinement(attribute, "<=", maxBound);
        }
        var value = uiState.range && uiState.range[attribute];
        if (!value || value.indexOf(":") === -1) {
          return widgetSearchParameters;
        }
        var _value$split$map = value.split(":").map(parseFloat), _value$split$map2 = _slicedToArray5(_value$split$map, 2), lowerBound = _value$split$map2[0], upperBound = _value$split$map2[1];
        if (isFiniteNumber(lowerBound) && (!isFiniteNumber(minBound) || minBound < lowerBound)) {
          widgetSearchParameters = widgetSearchParameters.removeNumericRefinement(attribute, ">=");
          widgetSearchParameters = widgetSearchParameters.addNumericRefinement(attribute, ">=", lowerBound);
        }
        if (isFiniteNumber(upperBound) && (!isFiniteNumber(maxBound) || upperBound < maxBound)) {
          widgetSearchParameters = widgetSearchParameters.removeNumericRefinement(attribute, "<=");
          widgetSearchParameters = widgetSearchParameters.addNumericRefinement(attribute, "<=", upperBound);
        }
        return widgetSearchParameters;
      }
    };
  };
};
var connectRange_default = connectRange;

// node_modules/instantsearch.js/es/connectors/refinement-list/connectRefinementList.js
function ownKeys17(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread17(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys17(Object(source), true).forEach(function(key) {
        _defineProperty18(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys17(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty18(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties5(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose5(source, excluded);
  var key, i4;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
      key = sourceSymbolKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var withUsage11 = createDocumentationMessageGenerator({
  name: "refinement-list",
  connector: true
});
var DEFAULT_SORT3 = ["isRefined", "count:desc", "name:asc"];
var connectRefinementList = function connectRefinementList2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage11());
  return function(widgetParams) {
    var _ref = widgetParams || {}, attribute = _ref.attribute, _ref$operator = _ref.operator, operator = _ref$operator === void 0 ? "or" : _ref$operator, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 10 : _ref$limit, _ref$showMore = _ref.showMore, showMore = _ref$showMore === void 0 ? false : _ref$showMore, _ref$showMoreLimit = _ref.showMoreLimit, showMoreLimit = _ref$showMoreLimit === void 0 ? 20 : _ref$showMoreLimit, _ref$sortBy = _ref.sortBy, sortBy = _ref$sortBy === void 0 ? DEFAULT_SORT3 : _ref$sortBy, _ref$escapeFacetValue = _ref.escapeFacetValues, escapeFacetValues = _ref$escapeFacetValue === void 0 ? true : _ref$escapeFacetValue, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items) {
      return items;
    } : _ref$transformItems;
    if (!attribute) {
      throw new Error(withUsage11("The `attribute` option is required."));
    }
    if (!/^(and|or)$/.test(operator)) {
      throw new Error(withUsage11('The `operator` must one of: `"and"`, `"or"` (got "'.concat(operator, '").')));
    }
    if (showMore === true && showMoreLimit <= limit) {
      throw new Error(withUsage11("`showMoreLimit` should be greater than `limit`."));
    }
    var formatItems = function formatItems2(_ref2) {
      var label = _ref2.name, value = _ref2.escapedValue, item = _objectWithoutProperties5(_ref2, ["name", "escapedValue"]);
      return _objectSpread17(_objectSpread17({}, item), {}, {
        value,
        label,
        highlighted: label
      });
    };
    var lastResultsFromMainSearch;
    var lastItemsFromMainSearch = [];
    var hasExhaustiveItems = true;
    var triggerRefine;
    var sendEvent;
    var isShowingMore = false;
    var toggleShowMore = function toggleShowMore2() {
    };
    function cachedToggleShowMore() {
      toggleShowMore();
    }
    function createToggleShowMore(renderOptions, widget) {
      return function() {
        isShowingMore = !isShowingMore;
        widget.render(renderOptions);
      };
    }
    function getLimit() {
      return isShowingMore ? showMoreLimit : limit;
    }
    var searchForFacetValues = function searchForFacetValues2() {
      return function() {
      };
    };
    var createSearchForFacetValues = function createSearchForFacetValues2(helper, widget) {
      return function(renderOptions) {
        return function(query) {
          var instantSearchInstance = renderOptions.instantSearchInstance, searchResults = renderOptions.results;
          if (query === "" && lastItemsFromMainSearch) {
            renderFn(_objectSpread17(_objectSpread17({}, widget.getWidgetRenderState(_objectSpread17(_objectSpread17({}, renderOptions), {}, {
              results: lastResultsFromMainSearch
            }))), {}, {
              instantSearchInstance
            }), false);
          } else {
            var tags = {
              highlightPreTag: escapeFacetValues ? TAG_PLACEHOLDER.highlightPreTag : TAG_REPLACEMENT.highlightPreTag,
              highlightPostTag: escapeFacetValues ? TAG_PLACEHOLDER.highlightPostTag : TAG_REPLACEMENT.highlightPostTag
            };
            helper.searchForFacetValues(
              attribute,
              query,
              Math.min(getLimit(), 100),
              tags
            ).then(function(results) {
              var facetValues = escapeFacetValues ? escapeFacets(results.facetHits) : results.facetHits;
              var normalizedFacetValues = transformItems(facetValues.map(function(_ref3) {
                var escapedValue = _ref3.escapedValue, value = _ref3.value, item = _objectWithoutProperties5(_ref3, ["escapedValue", "value"]);
                return _objectSpread17(_objectSpread17({}, item), {}, {
                  value: escapedValue,
                  label: value
                });
              }), {
                results: searchResults
              });
              renderFn(_objectSpread17(_objectSpread17({}, widget.getWidgetRenderState(_objectSpread17(_objectSpread17({}, renderOptions), {}, {
                results: lastResultsFromMainSearch
              }))), {}, {
                items: normalizedFacetValues,
                canToggleShowMore: false,
                canRefine: true,
                isFromSearch: true,
                instantSearchInstance
              }), false);
            });
          }
        };
      };
    };
    return {
      $$type: "ais.refinementList",
      init: function init(initOptions) {
        renderFn(_objectSpread17(_objectSpread17({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance: initOptions.instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        renderFn(_objectSpread17(_objectSpread17({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance: renderOptions.instantSearchInstance
        }), false);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread17(_objectSpread17({}, renderState), {}, {
          refinementList: _objectSpread17(_objectSpread17({}, renderState.refinementList), {}, _defineProperty18({}, attribute, this.getWidgetRenderState(renderOptions)))
        });
      },
      getWidgetRenderState: function getWidgetRenderState(renderOptions) {
        var results = renderOptions.results, state = renderOptions.state, _createURL = renderOptions.createURL, instantSearchInstance = renderOptions.instantSearchInstance, helper = renderOptions.helper;
        var items = [];
        var facetValues = [];
        if (!sendEvent || !triggerRefine || !searchForFacetValues) {
          sendEvent = createSendEventForFacet({
            instantSearchInstance,
            helper,
            attribute,
            widgetType: this.$$type
          });
          triggerRefine = function triggerRefine2(facetValue) {
            sendEvent("click", facetValue);
            helper.toggleFacetRefinement(attribute, facetValue).search();
          };
          searchForFacetValues = createSearchForFacetValues(helper, this);
        }
        if (results) {
          var values = results.getFacetValues(attribute, {
            sortBy,
            facetOrdering: sortBy === DEFAULT_SORT3
          });
          facetValues = values && Array.isArray(values) ? values : [];
          items = transformItems(facetValues.slice(0, getLimit()).map(formatItems), {
            results
          });
          var maxValuesPerFacetConfig = state.maxValuesPerFacet;
          var currentLimit = getLimit();
          hasExhaustiveItems = maxValuesPerFacetConfig > currentLimit ? facetValues.length <= currentLimit : facetValues.length < currentLimit;
          lastResultsFromMainSearch = results;
          lastItemsFromMainSearch = items;
          if (renderOptions.results) {
            toggleShowMore = createToggleShowMore(renderOptions, this);
          }
        }
        var searchFacetValues = searchForFacetValues && searchForFacetValues(renderOptions);
        var canShowLess = isShowingMore && lastItemsFromMainSearch.length > limit;
        var canShowMore = showMore && !hasExhaustiveItems;
        var canToggleShowMore = canShowLess || canShowMore;
        return {
          createURL: function createURL(facetValue) {
            return _createURL(state.resetPage().toggleFacetRefinement(attribute, facetValue));
          },
          items,
          refine: triggerRefine,
          searchForItems: searchFacetValues,
          isFromSearch: false,
          canRefine: items.length > 0,
          widgetParams,
          isShowingMore,
          canToggleShowMore,
          toggleShowMore: cachedToggleShowMore,
          sendEvent,
          hasExhaustiveItems
        };
      },
      dispose: function dispose(_ref4) {
        var state = _ref4.state;
        unmountFn();
        var withoutMaxValuesPerFacet = state.setQueryParameter("maxValuesPerFacet", void 0);
        if (operator === "and") {
          return withoutMaxValuesPerFacet.removeFacet(attribute);
        }
        return withoutMaxValuesPerFacet.removeDisjunctiveFacet(attribute);
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref5) {
        var searchParameters = _ref5.searchParameters;
        var values = operator === "or" ? searchParameters.getDisjunctiveRefinements(attribute) : searchParameters.getConjunctiveRefinements(attribute);
        if (!values.length) {
          return uiState;
        }
        return _objectSpread17(_objectSpread17({}, uiState), {}, {
          refinementList: _objectSpread17(_objectSpread17({}, uiState.refinementList), {}, _defineProperty18({}, attribute, values))
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref6) {
        var uiState = _ref6.uiState;
        var isDisjunctive = operator === "or";
        var values = uiState.refinementList && uiState.refinementList[attribute];
        var withoutRefinements = searchParameters.clearRefinements(attribute);
        var withFacetConfiguration = isDisjunctive ? withoutRefinements.addDisjunctiveFacet(attribute) : withoutRefinements.addFacet(attribute);
        var currentMaxValuesPerFacet = withFacetConfiguration.maxValuesPerFacet || 0;
        var nextMaxValuesPerFacet = Math.max(currentMaxValuesPerFacet, showMore ? showMoreLimit : limit);
        var withMaxValuesPerFacet = withFacetConfiguration.setQueryParameter("maxValuesPerFacet", nextMaxValuesPerFacet);
        if (!values) {
          var key = isDisjunctive ? "disjunctiveFacetsRefinements" : "facetsRefinements";
          return withMaxValuesPerFacet.setQueryParameters(_defineProperty18({}, key, _objectSpread17(_objectSpread17({}, withMaxValuesPerFacet[key]), {}, _defineProperty18({}, attribute, []))));
        }
        return values.reduce(function(parameters, value) {
          return isDisjunctive ? parameters.addDisjunctiveFacetRefinement(attribute, value) : parameters.addFacetRefinement(attribute, value);
        }, withMaxValuesPerFacet);
      }
    };
  };
};
var connectRefinementList_default = connectRefinementList;

// node_modules/instantsearch.js/es/connectors/search-box/connectSearchBox.js
function ownKeys18(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread18(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys18(Object(source), true).forEach(function(key) {
        _defineProperty19(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys18(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty19(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage12 = createDocumentationMessageGenerator({
  name: "search-box",
  connector: true
});
var defaultQueryHook = function defaultQueryHook2(query, hook) {
  return hook(query);
};
var connectSearchBox = function connectSearchBox2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage12());
  return function(widgetParams) {
    var _ref = widgetParams || {}, _ref$queryHook = _ref.queryHook, queryHook = _ref$queryHook === void 0 ? defaultQueryHook : _ref$queryHook;
    var _refine;
    var _clear;
    return {
      $$type: "ais.searchBox",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread18(_objectSpread18({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread18(_objectSpread18({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref2) {
        var state = _ref2.state;
        unmountFn();
        return state.setQueryParameter("query", void 0);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread18(_objectSpread18({}, renderState), {}, {
          searchBox: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref3) {
        var helper = _ref3.helper, searchMetadata = _ref3.searchMetadata, state = _ref3.state;
        if (!_refine) {
          _refine = function _refine2(query) {
            queryHook(query, function(q) {
              return helper.setQuery(q).search();
            });
          };
          _clear = function _clear2() {
            helper.setQuery("").search();
          };
        }
        return {
          query: state.query || "",
          refine: _refine,
          clear: _clear,
          widgetParams,
          isSearchStalled: searchMetadata.isSearchStalled
        };
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref4) {
        var searchParameters = _ref4.searchParameters;
        var query = searchParameters.query || "";
        if (query === "" || uiState && uiState.query === query) {
          return uiState;
        }
        return _objectSpread18(_objectSpread18({}, uiState), {}, {
          query
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {
        var uiState = _ref5.uiState;
        return searchParameters.setQueryParameter("query", uiState.query || "");
      }
    };
  };
};
var connectSearchBox_default = connectSearchBox;

// node_modules/instantsearch.js/es/connectors/sort-by/connectSortBy.js
function ownKeys19(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread19(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys19(Object(source), true).forEach(function(key) {
        _defineProperty20(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys19(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty20(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage13 = createDocumentationMessageGenerator({
  name: "sort-by",
  connector: true
});
var connectSortBy = function connectSortBy2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage13());
  var connectorState = {};
  return function(widgetParams) {
    var _ref = widgetParams || {}, items = _ref.items, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(x2) {
      return x2;
    } : _ref$transformItems;
    if (!Array.isArray(items)) {
      throw new Error(withUsage13("The `items` option expects an array of objects."));
    }
    return {
      $$type: "ais.sortBy",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        var widgetRenderState = this.getWidgetRenderState(initOptions);
        var currentIndex = widgetRenderState.currentRefinement;
        var isCurrentIndexInItems = find(items, function(item) {
          return item.value === currentIndex;
        });
        true ? _warning(isCurrentIndexInItems !== void 0, 'The index named "'.concat(currentIndex, '" is not listed in the `items` of `sortBy`.')) : void 0;
        renderFn(_objectSpread19(_objectSpread19({}, widgetRenderState), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread19(_objectSpread19({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref2) {
        var state = _ref2.state;
        unmountFn();
        return connectorState.initialIndex ? state.setIndex(connectorState.initialIndex) : state;
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread19(_objectSpread19({}, renderState), {}, {
          sortBy: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref3) {
        var results = _ref3.results, helper = _ref3.helper, state = _ref3.state, parent = _ref3.parent;
        if (!connectorState.initialIndex && parent) {
          connectorState.initialIndex = parent.getIndexName();
        }
        if (!connectorState.setIndex) {
          connectorState.setIndex = function(indexName) {
            helper.setIndex(indexName).search();
          };
        }
        var hasNoResults = results ? results.nbHits === 0 : true;
        return {
          currentRefinement: state.index,
          options: transformItems(items, {
            results
          }),
          refine: connectorState.setIndex,
          hasNoResults,
          canRefine: !hasNoResults && items.length > 0,
          widgetParams
        };
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref4) {
        var searchParameters = _ref4.searchParameters;
        var currentIndex = searchParameters.index;
        return _objectSpread19(_objectSpread19({}, uiState), {}, {
          sortBy: currentIndex !== connectorState.initialIndex ? currentIndex : void 0
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref5) {
        var uiState = _ref5.uiState;
        return searchParameters.setQueryParameter("index", uiState.sortBy || connectorState.initialIndex || searchParameters.index);
      }
    };
  };
};
var connectSortBy_default = connectSortBy;

// node_modules/instantsearch.js/es/connectors/rating-menu/connectRatingMenu.js
function _toConsumableArray7(arr) {
  return _arrayWithoutHoles7(arr) || _iterableToArray7(arr) || _unsupportedIterableToArray11(arr) || _nonIterableSpread7();
}
function _nonIterableSpread7() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray7(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles7(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray11(arr);
}
function ownKeys20(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread20(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys20(Object(source), true).forEach(function(key) {
        _defineProperty21(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys20(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty21(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray6(arr, i4) {
  return _arrayWithHoles6(arr) || _iterableToArrayLimit6(arr, i4) || _unsupportedIterableToArray11(arr, i4) || _nonIterableRest6();
}
function _nonIterableRest6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray11(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray11(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray11(o7, minLen);
}
function _arrayLikeToArray11(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _iterableToArrayLimit6(arr, i4) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i4 && _arr.length === i4)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles6(arr) {
  if (Array.isArray(arr))
    return arr;
}
var withUsage14 = createDocumentationMessageGenerator({
  name: "rating-menu",
  connector: true
});
var $$type3 = "ais.ratingMenu";
var MAX_VALUES_PER_FACET_API_LIMIT = 1e3;
var STEP = 1;
var createSendEvent3 = function createSendEvent4(_ref) {
  var instantSearchInstance = _ref.instantSearchInstance, helper = _ref.helper, getRefinedStar = _ref.getRefinedStar, attribute = _ref.attribute;
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 1) {
      instantSearchInstance.sendEventToInsights(args[0]);
      return;
    }
    var eventType = args[0], facetValue = args[1], _args$ = args[2], eventName = _args$ === void 0 ? "Filter Applied" : _args$;
    if (eventType !== "click") {
      return;
    }
    var isRefined2 = getRefinedStar() === Number(facetValue);
    if (!isRefined2) {
      instantSearchInstance.sendEventToInsights({
        insightsMethod: "clickedFilters",
        widgetType: $$type3,
        eventType,
        payload: {
          eventName,
          index: helper.getIndex(),
          filters: ["".concat(attribute, ">=").concat(facetValue)]
        },
        attribute
      });
    }
  };
};
var connectRatingMenu = function connectRatingMenu2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage14());
  return function(widgetParams) {
    var _ref2 = widgetParams || {}, attribute = _ref2.attribute, _ref2$max = _ref2.max, max = _ref2$max === void 0 ? 5 : _ref2$max;
    var sendEvent;
    if (!attribute) {
      throw new Error(withUsage14("The `attribute` option is required."));
    }
    var _getRefinedStar = function getRefinedStar(state) {
      var _values$;
      var values = state.getNumericRefinements(attribute);
      if (!((_values$ = values[">="]) !== null && _values$ !== void 0 && _values$.length)) {
        return void 0;
      }
      return values[">="][0];
    };
    var getFacetsMaxDecimalPlaces = function getFacetsMaxDecimalPlaces2(facetResults) {
      var maxDecimalPlaces = 0;
      facetResults.forEach(function(facetResult) {
        var _facetResult$name$spl = facetResult.name.split("."), _facetResult$name$spl2 = _slicedToArray6(_facetResult$name$spl, 2), _facetResult$name$spl3 = _facetResult$name$spl2[1], decimal = _facetResult$name$spl3 === void 0 ? "" : _facetResult$name$spl3;
        maxDecimalPlaces = Math.max(maxDecimalPlaces, decimal.length);
      });
      return maxDecimalPlaces;
    };
    var getFacetValuesWarningMessage = function getFacetValuesWarningMessage2(_ref3) {
      var maxDecimalPlaces = _ref3.maxDecimalPlaces, maxFacets = _ref3.maxFacets, maxValuesPerFacet = _ref3.maxValuesPerFacet;
      var maxDecimalPlacesInRange = Math.max(0, Math.floor(Math.log10(MAX_VALUES_PER_FACET_API_LIMIT / max)));
      var maxFacetsInRange = Math.min(MAX_VALUES_PER_FACET_API_LIMIT, Math.pow(10, maxDecimalPlacesInRange) * max);
      var solutions = [];
      if (maxFacets > MAX_VALUES_PER_FACET_API_LIMIT) {
        solutions.push('- Update your records to lower the precision of the values in the "'.concat(attribute, '" attribute (for example: ').concat(5.123456789 .toPrecision(maxDecimalPlaces + 1), " to ").concat(5.123456789 .toPrecision(maxDecimalPlacesInRange + 1), ")"));
      }
      if (maxValuesPerFacet < maxFacetsInRange) {
        solutions.push("- Increase the maximum number of facet values to ".concat(maxFacetsInRange, ' using the "configure" widget ').concat(createDocumentationLink({
          name: "configure"
        }), ' and the "maxValuesPerFacet" parameter https://www.algolia.com/doc/api-reference/api-parameters/maxValuesPerFacet/'));
      }
      return "The ".concat(attribute, " attribute can have ").concat(maxFacets, " different values (0 to ").concat(max, " with a maximum of ").concat(maxDecimalPlaces, " decimals = ").concat(maxFacets, ") but you retrieved only ").concat(maxValuesPerFacet, " facet values. Therefore the number of results that match the refinements can be incorrect.\n    ").concat(solutions.length ? "To resolve this problem you can:\n".concat(solutions.join("\n")) : "");
    };
    function getRefinedState2(state, facetValue) {
      var isRefined2 = _getRefinedStar(state) === Number(facetValue);
      var emptyState = state.resetPage().removeNumericRefinement(attribute);
      if (!isRefined2) {
        return emptyState.addNumericRefinement(attribute, "<=", max).addNumericRefinement(attribute, ">=", Number(facetValue));
      }
      return emptyState;
    }
    var toggleRefinement = function toggleRefinement2(helper, facetValue) {
      sendEvent("click", facetValue);
      helper.setState(getRefinedState2(helper.state, facetValue)).search();
    };
    var connectorState = {
      toggleRefinementFactory: function toggleRefinementFactory(helper) {
        return toggleRefinement.bind(null, helper);
      },
      createURLFactory: function createURLFactory(_ref4) {
        var state = _ref4.state, createURL = _ref4.createURL;
        return function(value) {
          return createURL(getRefinedState2(state, value));
        };
      }
    };
    return {
      $$type: $$type3,
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread20(_objectSpread20({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread20(_objectSpread20({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread20(_objectSpread20({}, renderState), {}, {
          ratingMenu: _objectSpread20(_objectSpread20({}, renderState.ratingMenu), {}, _defineProperty21({}, attribute, this.getWidgetRenderState(renderOptions)))
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref5) {
        var helper = _ref5.helper, results = _ref5.results, state = _ref5.state, instantSearchInstance = _ref5.instantSearchInstance, createURL = _ref5.createURL;
        var facetValues = [];
        if (!sendEvent) {
          sendEvent = createSendEvent3({
            instantSearchInstance,
            helper,
            getRefinedStar: function getRefinedStar() {
              return _getRefinedStar(helper.state);
            },
            attribute
          });
        }
        var refinementIsApplied = false;
        var totalCount = 0;
        var facetResults = results === null || results === void 0 ? void 0 : results.getFacetValues(attribute, {});
        if (results && facetResults) {
          var maxValuesPerFacet = facetResults.length;
          var maxDecimalPlaces = getFacetsMaxDecimalPlaces(facetResults);
          var maxFacets = Math.pow(10, maxDecimalPlaces) * max;
          true ? _warning(maxFacets <= maxValuesPerFacet || Boolean(results.__isArtificial), getFacetValuesWarningMessage({
            maxDecimalPlaces,
            maxFacets,
            maxValuesPerFacet
          })) : void 0;
          var refinedStar = _getRefinedStar(state);
          var _loop = function _loop2(star2) {
            var isRefined2 = refinedStar === star2;
            refinementIsApplied = refinementIsApplied || isRefined2;
            var count = facetResults.filter(function(f8) {
              return Number(f8.name) >= star2 && Number(f8.name) <= max;
            }).map(function(f8) {
              return f8.count;
            }).reduce(function(sum, current) {
              return sum + current;
            }, 0);
            totalCount += count;
            if (refinedStar && !isRefined2 && count === 0) {
              return "continue";
            }
            var stars = _toConsumableArray7(new Array(Math.floor(max / STEP))).map(function(_v, i4) {
              return i4 * STEP < star2;
            });
            facetValues.push({
              stars,
              name: String(star2),
              label: String(star2),
              value: String(star2),
              count,
              isRefined: isRefined2
            });
          };
          for (var star = STEP; star < max; star += STEP) {
            var _ret = _loop(star);
            if (_ret === "continue")
              continue;
          }
        }
        facetValues = facetValues.reverse();
        var hasNoResults = results ? results.nbHits === 0 : true;
        return {
          items: facetValues,
          hasNoResults,
          canRefine: (!hasNoResults || refinementIsApplied) && totalCount > 0,
          refine: connectorState.toggleRefinementFactory(helper),
          sendEvent,
          createURL: connectorState.createURLFactory({
            state,
            createURL
          }),
          widgetParams
        };
      },
      dispose: function dispose(_ref6) {
        var state = _ref6.state;
        unmountFn();
        return state.removeNumericRefinement(attribute);
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref7) {
        var searchParameters = _ref7.searchParameters;
        var value = _getRefinedStar(searchParameters);
        if (typeof value !== "number") {
          return uiState;
        }
        return _objectSpread20(_objectSpread20({}, uiState), {}, {
          ratingMenu: _objectSpread20(_objectSpread20({}, uiState.ratingMenu), {}, _defineProperty21({}, attribute, value))
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref8) {
        var uiState = _ref8.uiState;
        var value = uiState.ratingMenu && uiState.ratingMenu[attribute];
        var withoutRefinements = searchParameters.clearRefinements(attribute);
        var withDisjunctiveFacet = withoutRefinements.addDisjunctiveFacet(attribute);
        if (!value) {
          return withDisjunctiveFacet.setQueryParameters({
            numericRefinements: _objectSpread20(_objectSpread20({}, withDisjunctiveFacet.numericRefinements), {}, _defineProperty21({}, attribute, {}))
          });
        }
        return withDisjunctiveFacet.addNumericRefinement(attribute, "<=", max).addNumericRefinement(attribute, ">=", value);
      }
    };
  };
};
var connectRatingMenu_default = connectRatingMenu;

// node_modules/instantsearch.js/es/connectors/stats/connectStats.js
function ownKeys21(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread21(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys21(Object(source), true).forEach(function(key) {
        _defineProperty22(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys21(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty22(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage15 = createDocumentationMessageGenerator({
  name: "stats",
  connector: true
});
var connectStats = function connectStats2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage15());
  return function(widgetParams) {
    return {
      $$type: "ais.stats",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread21(_objectSpread21({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread21(_objectSpread21({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose() {
        unmountFn();
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread21(_objectSpread21({}, renderState), {}, {
          stats: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref) {
        var results = _ref.results, state = _ref.state;
        if (!results) {
          return {
            hitsPerPage: state.hitsPerPage,
            nbHits: 0,
            nbSortedHits: void 0,
            areHitsSorted: false,
            nbPages: 0,
            page: state.page || 0,
            processingTimeMS: -1,
            query: state.query || "",
            widgetParams
          };
        }
        return {
          hitsPerPage: results.hitsPerPage,
          nbHits: results.nbHits,
          nbSortedHits: results.nbSortedHits,
          areHitsSorted: typeof results.appliedRelevancyStrictness !== "undefined" && results.appliedRelevancyStrictness > 0 && results.nbSortedHits !== results.nbHits,
          nbPages: results.nbPages,
          page: results.page,
          processingTimeMS: results.processingTimeMS,
          query: results.query,
          widgetParams
        };
      }
    };
  };
};
var connectStats_default = connectStats;

// node_modules/instantsearch.js/es/connectors/toggle-refinement/connectToggleRefinement.js
function ownKeys22(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread22(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys22(Object(source), true).forEach(function(key) {
        _defineProperty23(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys22(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty23(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage16 = createDocumentationMessageGenerator({
  name: "toggle-refinement",
  connector: true
});
var $$type4 = "ais.toggleRefinement";
var createSendEvent5 = function createSendEvent6(_ref) {
  var instantSearchInstance = _ref.instantSearchInstance, helper = _ref.helper, attribute = _ref.attribute, on = _ref.on;
  var sendEventForToggle = function sendEventForToggle2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 1) {
      instantSearchInstance.sendEventToInsights(args[0]);
      return;
    }
    var eventType = args[0], isRefined2 = args[1], _args$ = args[2], eventName = _args$ === void 0 ? "Filter Applied" : _args$;
    if (eventType !== "click" || on === void 0) {
      return;
    }
    if (!isRefined2) {
      instantSearchInstance.sendEventToInsights({
        insightsMethod: "clickedFilters",
        widgetType: $$type4,
        eventType,
        payload: {
          eventName,
          index: helper.getIndex(),
          filters: on.map(function(value) {
            return "".concat(attribute, ":").concat(value);
          })
        },
        attribute
      });
    }
  };
  return sendEventForToggle;
};
var connectToggleRefinement = function connectToggleRefinement2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage16());
  return function(widgetParams) {
    var _ref2 = widgetParams || {}, attribute = _ref2.attribute, _ref2$on = _ref2.on, userOn = _ref2$on === void 0 ? true : _ref2$on, userOff = _ref2.off;
    if (!attribute) {
      throw new Error(withUsage16("The `attribute` option is required."));
    }
    var hasAnOffValue = userOff !== void 0;
    var on = toArray(userOn).map(escapeFacetValue);
    var off = hasAnOffValue ? toArray(userOff).map(escapeFacetValue) : void 0;
    var sendEvent;
    var toggleRefinementFactory = function toggleRefinementFactory2(helper) {
      return function() {
        var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          isRefined: false
        }, isRefined2 = _ref3.isRefined;
        if (!isRefined2) {
          sendEvent("click", isRefined2);
          if (hasAnOffValue) {
            off.forEach(function(v5) {
              return helper.removeDisjunctiveFacetRefinement(attribute, v5);
            });
          }
          on.forEach(function(v5) {
            return helper.addDisjunctiveFacetRefinement(attribute, v5);
          });
        } else {
          on.forEach(function(v5) {
            return helper.removeDisjunctiveFacetRefinement(attribute, v5);
          });
          if (hasAnOffValue) {
            off.forEach(function(v5) {
              return helper.addDisjunctiveFacetRefinement(attribute, v5);
            });
          }
        }
        helper.search();
      };
    };
    var connectorState = {
      createURLFactory: function createURLFactory(isRefined2, _ref4) {
        var state = _ref4.state, createURL = _ref4.createURL;
        return function() {
          state = state.resetPage();
          var valuesToRemove = isRefined2 ? on : off;
          if (valuesToRemove) {
            valuesToRemove.forEach(function(v5) {
              state = state.removeDisjunctiveFacetRefinement(attribute, v5);
            });
          }
          var valuesToAdd = isRefined2 ? off : on;
          if (valuesToAdd) {
            valuesToAdd.forEach(function(v5) {
              state = state.addDisjunctiveFacetRefinement(attribute, v5);
            });
          }
          return createURL(state);
        };
      }
    };
    return {
      $$type: $$type4,
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread22(_objectSpread22({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread22(_objectSpread22({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref5) {
        var state = _ref5.state;
        unmountFn();
        return state.removeDisjunctiveFacet(attribute);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread22(_objectSpread22({}, renderState), {}, {
          toggleRefinement: _objectSpread22(_objectSpread22({}, renderState.toggleRefinement), {}, _defineProperty23({}, attribute, this.getWidgetRenderState(renderOptions)))
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref6) {
        var state = _ref6.state, helper = _ref6.helper, results = _ref6.results, createURL = _ref6.createURL, instantSearchInstance = _ref6.instantSearchInstance;
        var isRefined2 = results ? on.every(function(v5) {
          return state.isDisjunctiveFacetRefined(attribute, v5);
        }) : on.every(function(v5) {
          return state.isDisjunctiveFacetRefined(attribute, v5);
        });
        var onFacetValue = {
          isRefined: isRefined2,
          count: 0
        };
        var offFacetValue = {
          isRefined: hasAnOffValue && !isRefined2,
          count: 0
        };
        if (results) {
          var offValue = toArray(off || false);
          var allFacetValues = results.getFacetValues(attribute, {}) || [];
          var onData = on.map(function(v5) {
            return find(allFacetValues, function(_ref7) {
              var escapedValue = _ref7.escapedValue;
              return escapedValue === escapeFacetValue(String(v5));
            });
          }).filter(function(v5) {
            return v5 !== void 0;
          });
          var offData = hasAnOffValue ? offValue.map(function(v5) {
            return find(allFacetValues, function(_ref8) {
              var escapedValue = _ref8.escapedValue;
              return escapedValue === escapeFacetValue(String(v5));
            });
          }).filter(function(v5) {
            return v5 !== void 0;
          }) : [];
          onFacetValue = {
            isRefined: onData.length ? onData.every(function(v5) {
              return v5.isRefined;
            }) : false,
            count: onData.reduce(function(acc, v5) {
              return acc + v5.count;
            }, 0) || null
          };
          offFacetValue = {
            isRefined: offData.length ? offData.every(function(v5) {
              return v5.isRefined;
            }) : false,
            count: offData.reduce(function(acc, v5) {
              return acc + v5.count;
            }, 0) || allFacetValues.reduce(function(total, _ref9) {
              var count = _ref9.count;
              return total + count;
            }, 0)
          };
        }
        if (!sendEvent) {
          sendEvent = createSendEvent5({
            instantSearchInstance,
            attribute,
            on,
            helper
          });
        }
        var nextRefinement = isRefined2 ? offFacetValue : onFacetValue;
        return {
          value: {
            name: attribute,
            isRefined: isRefined2,
            count: results ? nextRefinement.count : null,
            onFacetValue,
            offFacetValue
          },
          createURL: connectorState.createURLFactory(isRefined2, {
            state,
            createURL
          }),
          sendEvent,
          canRefine: Boolean(results ? nextRefinement.count : null),
          refine: toggleRefinementFactory(helper),
          widgetParams
        };
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref10) {
        var searchParameters = _ref10.searchParameters;
        var isRefined2 = on && on.every(function(v5) {
          return searchParameters.isDisjunctiveFacetRefined(attribute, v5);
        });
        if (!isRefined2) {
          return uiState;
        }
        return _objectSpread22(_objectSpread22({}, uiState), {}, {
          toggle: _objectSpread22(_objectSpread22({}, uiState.toggle), {}, _defineProperty23({}, attribute, isRefined2))
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref11) {
        var uiState = _ref11.uiState;
        var withFacetConfiguration = searchParameters.clearRefinements(attribute).addDisjunctiveFacet(attribute);
        var isRefined2 = Boolean(uiState.toggle && uiState.toggle[attribute]);
        if (isRefined2) {
          if (on) {
            on.forEach(function(v5) {
              withFacetConfiguration = withFacetConfiguration.addDisjunctiveFacetRefinement(attribute, v5);
            });
          }
          return withFacetConfiguration;
        }
        if (hasAnOffValue) {
          if (off) {
            off.forEach(function(v5) {
              withFacetConfiguration = withFacetConfiguration.addDisjunctiveFacetRefinement(attribute, v5);
            });
          }
          return withFacetConfiguration;
        }
        return withFacetConfiguration.setQueryParameters({
          disjunctiveFacetsRefinements: _objectSpread22(_objectSpread22({}, searchParameters.disjunctiveFacetsRefinements), {}, _defineProperty23({}, attribute, []))
        });
      }
    };
  };
};
var connectToggleRefinement_default = connectToggleRefinement;

// node_modules/instantsearch.js/es/connectors/breadcrumb/connectBreadcrumb.js
function ownKeys23(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread23(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys23(Object(source), true).forEach(function(key) {
        _defineProperty24(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys23(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty24(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray7(arr, i4) {
  return _arrayWithHoles7(arr) || _iterableToArrayLimit7(arr, i4) || _unsupportedIterableToArray12(arr, i4) || _nonIterableRest7();
}
function _nonIterableRest7() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray12(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray12(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray12(o7, minLen);
}
function _arrayLikeToArray12(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _iterableToArrayLimit7(arr, i4) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i4 && _arr.length === i4)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles7(arr) {
  if (Array.isArray(arr))
    return arr;
}
var withUsage17 = createDocumentationMessageGenerator({
  name: "breadcrumb",
  connector: true
});
var connectBreadcrumb = function connectBreadcrumb2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage17());
  var connectorState = {};
  return function(widgetParams) {
    var _ref = widgetParams || {}, attributes = _ref.attributes, _ref$separator = _ref.separator, separator = _ref$separator === void 0 ? " > " : _ref$separator, _ref$rootPath = _ref.rootPath, rootPath = _ref$rootPath === void 0 ? null : _ref$rootPath, _ref$transformItems = _ref.transformItems, transformItems = _ref$transformItems === void 0 ? function(items) {
      return items;
    } : _ref$transformItems;
    if (!attributes || !Array.isArray(attributes) || attributes.length === 0) {
      throw new Error(withUsage17("The `attributes` option expects an array of strings."));
    }
    var _attributes = _slicedToArray7(attributes, 1), hierarchicalFacetName = _attributes[0];
    function getRefinedState2(state, facetValue) {
      if (!facetValue) {
        var breadcrumb = state.getHierarchicalFacetBreadcrumb(hierarchicalFacetName);
        if (breadcrumb.length === 0) {
          return state;
        } else {
          return state.resetPage().toggleFacetRefinement(hierarchicalFacetName, breadcrumb[0]);
        }
      }
      return state.resetPage().toggleFacetRefinement(hierarchicalFacetName, facetValue);
    }
    return {
      $$type: "ais.breadcrumb",
      init: function init(initOptions) {
        renderFn(_objectSpread23(_objectSpread23({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance: initOptions.instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        renderFn(_objectSpread23(_objectSpread23({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance: renderOptions.instantSearchInstance
        }), false);
      },
      dispose: function dispose() {
        unmountFn();
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread23(_objectSpread23({}, renderState), {}, {
          breadcrumb: _objectSpread23(_objectSpread23({}, renderState.breadcrumb), {}, _defineProperty24({}, hierarchicalFacetName, this.getWidgetRenderState(renderOptions)))
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref2) {
        var helper = _ref2.helper, createURL = _ref2.createURL, results = _ref2.results, state = _ref2.state;
        function getItems() {
          if (!results || state.hierarchicalFacets.length === 0) {
            return [];
          }
          var _state$hierarchicalFa = _slicedToArray7(state.hierarchicalFacets, 1), facetName = _state$hierarchicalFa[0].name;
          var facetValues = results.getFacetValues(facetName, {});
          var data = Array.isArray(facetValues.data) ? facetValues.data : [];
          var items2 = transformItems(shiftItemsValues(prepareItems(data)), {
            results
          });
          return items2;
        }
        var items = getItems();
        if (!connectorState.createURL) {
          connectorState.createURL = function(facetValue) {
            return createURL(getRefinedState2(helper.state, facetValue));
          };
        }
        if (!connectorState.refine) {
          connectorState.refine = function(facetValue) {
            helper.setState(getRefinedState2(helper.state, facetValue)).search();
          };
        }
        return {
          canRefine: items.length > 0,
          createURL: connectorState.createURL,
          items,
          refine: connectorState.refine,
          widgetParams
        };
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters) {
        if (searchParameters.isHierarchicalFacet(hierarchicalFacetName)) {
          var facet = searchParameters.getHierarchicalFacetByName(hierarchicalFacetName);
          true ? _warning(isEqual(facet.attributes, attributes) && facet.separator === separator && facet.rootPath === rootPath, "Using Breadcrumb and HierarchicalMenu on the same facet with different options overrides the configuration of the HierarchicalMenu.") : void 0;
          return searchParameters;
        }
        return searchParameters.addHierarchicalFacet({
          name: hierarchicalFacetName,
          attributes,
          separator,
          rootPath
        });
      }
    };
  };
};
function prepareItems(data) {
  return data.reduce(function(result, currentItem) {
    if (currentItem.isRefined) {
      result.push({
        label: currentItem.name,
        value: currentItem.escapedValue
      });
      if (Array.isArray(currentItem.data)) {
        result = result.concat(prepareItems(currentItem.data));
      }
    }
    return result;
  }, []);
}
function shiftItemsValues(array) {
  return array.map(function(x2, idx) {
    return {
      label: x2.label,
      value: idx + 1 === array.length ? null : array[idx + 1].value
    };
  });
}
var connectBreadcrumb_default = connectBreadcrumb;

// node_modules/instantsearch.js/es/connectors/geo-search/connectGeoSearch.js
var withUsage18 = createDocumentationMessageGenerator({
  name: "geo-search",
  connector: true
});

// node_modules/instantsearch.js/es/connectors/powered-by/connectPoweredBy.js
var withUsage19 = createDocumentationMessageGenerator({
  name: "powered-by",
  connector: true
});

// node_modules/instantsearch.js/es/connectors/configure/connectConfigure.js
var import_algoliasearch_helper = __toESM(require_algoliasearch_helper2(), 1);
function ownKeys24(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread24(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys24(Object(source), true).forEach(function(key) {
        _defineProperty25(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys24(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty25(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage20 = createDocumentationMessageGenerator({
  name: "configure",
  connector: true
});
function getInitialSearchParameters(state, widgetParams) {
  return state.setQueryParameters(Object.keys(widgetParams.searchParameters).reduce(function(acc, key) {
    return _objectSpread24(_objectSpread24({}, acc), {}, _defineProperty25({}, key, void 0));
  }, {}));
}
var connectConfigure = function connectConfigure2() {
  var renderFn = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : noop;
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  return function(widgetParams) {
    if (!widgetParams || !isPlainObject(widgetParams.searchParameters)) {
      throw new Error(withUsage20("The `searchParameters` option expects an object."));
    }
    var connectorState = {};
    function refine(helper) {
      return function(searchParameters) {
        var actualState = getInitialSearchParameters(helper.state, widgetParams);
        var nextSearchParameters = mergeSearchParameters(actualState, new import_algoliasearch_helper.default.SearchParameters(searchParameters));
        widgetParams.searchParameters = searchParameters;
        helper.setState(nextSearchParameters).search();
      };
    }
    return {
      $$type: "ais.configure",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread24(_objectSpread24({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread24(_objectSpread24({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref) {
        var state = _ref.state;
        unmountFn();
        return getInitialSearchParameters(state, widgetParams);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        var _renderState$configur;
        var widgetRenderState = this.getWidgetRenderState(renderOptions);
        return _objectSpread24(_objectSpread24({}, renderState), {}, {
          configure: _objectSpread24(_objectSpread24({}, widgetRenderState), {}, {
            widgetParams: _objectSpread24(_objectSpread24({}, widgetRenderState.widgetParams), {}, {
              searchParameters: mergeSearchParameters(new import_algoliasearch_helper.default.SearchParameters((_renderState$configur = renderState.configure) === null || _renderState$configur === void 0 ? void 0 : _renderState$configur.widgetParams.searchParameters), new import_algoliasearch_helper.default.SearchParameters(widgetRenderState.widgetParams.searchParameters)).getQueryParams()
            })
          })
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref2) {
        var helper = _ref2.helper;
        if (!connectorState.refine) {
          connectorState.refine = refine(helper);
        }
        return {
          refine: connectorState.refine,
          widgetParams
        };
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(state, _ref3) {
        var uiState = _ref3.uiState;
        return mergeSearchParameters(state, new import_algoliasearch_helper.default.SearchParameters(_objectSpread24(_objectSpread24({}, uiState.configure), widgetParams.searchParameters)));
      },
      getWidgetUiState: function getWidgetUiState(uiState) {
        return _objectSpread24(_objectSpread24({}, uiState), {}, {
          configure: _objectSpread24(_objectSpread24({}, uiState.configure), widgetParams.searchParameters)
        });
      }
    };
  };
};
var connectConfigure_default = connectConfigure;

// node_modules/instantsearch.js/es/connectors/configure-related-items/connectConfigureRelatedItems.js
var import_algoliasearch_helper2 = __toESM(require_algoliasearch_helper2(), 1);
function ownKeys25(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread25(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys25(Object(source), true).forEach(function(key) {
        _defineProperty26(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys25(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty26(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toConsumableArray8(arr) {
  return _arrayWithoutHoles8(arr) || _iterableToArray8(arr) || _unsupportedIterableToArray13(arr) || _nonIterableSpread8();
}
function _nonIterableSpread8() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray13(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray13(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray13(o7, minLen);
}
function _iterableToArray8(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles8(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray13(arr);
}
function _arrayLikeToArray13(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
var withUsage21 = createDocumentationMessageGenerator({
  name: "configure-related-items",
  connector: true
});
function createOptionalFilter(_ref) {
  var attributeName = _ref.attributeName, attributeValue = _ref.attributeValue, attributeScore = _ref.attributeScore;
  return "".concat(attributeName, ":").concat(attributeValue, "<score=").concat(attributeScore || 1, ">");
}
var connectConfigureRelatedItems = function connectConfigureRelatedItems2(renderFn, unmountFn) {
  return function(widgetParams) {
    var _ref2 = widgetParams || {}, hit = _ref2.hit, matchingPatterns = _ref2.matchingPatterns, _ref2$transformSearch = _ref2.transformSearchParameters, transformSearchParameters = _ref2$transformSearch === void 0 ? function(x2) {
      return x2;
    } : _ref2$transformSearch;
    if (!hit) {
      throw new Error(withUsage21("The `hit` option is required."));
    }
    if (!matchingPatterns) {
      throw new Error(withUsage21("The `matchingPatterns` option is required."));
    }
    var optionalFilters = Object.keys(matchingPatterns).reduce(function(acc, attributeName) {
      var attribute = matchingPatterns[attributeName];
      var attributeValue = getPropertyByPath(hit, attributeName);
      var attributeScore = attribute.score;
      if (Array.isArray(attributeValue)) {
        return [].concat(_toConsumableArray8(acc), [attributeValue.map(function(attributeSubValue) {
          return createOptionalFilter({
            attributeName,
            attributeValue: attributeSubValue,
            attributeScore
          });
        })]);
      }
      if (typeof attributeValue === "string") {
        return [].concat(_toConsumableArray8(acc), [createOptionalFilter({
          attributeName,
          attributeValue,
          attributeScore
        })]);
      }
      true ? _warning(false, "\nThe `matchingPatterns` option returned a value of type ".concat(getObjectType(attributeValue), ' for the "').concat(attributeName, '" key. This value was not sent to Algolia because `optionalFilters` only supports strings and array of strings.\n\nYou can remove the "').concat(attributeName, '" key from the `matchingPatterns` option.\n\nSee https://www.algolia.com/doc/api-reference/api-parameters/optionalFilters/\n            ')) : void 0;
      return acc;
    }, []);
    var searchParameters = _objectSpread25({}, transformSearchParameters(new import_algoliasearch_helper2.default.SearchParameters({
      sumOrFiltersScores: true,
      facetFilters: ["objectID:-".concat(hit.objectID)],
      optionalFilters
    })));
    var makeWidget = connectConfigure_default(renderFn, unmountFn);
    return _objectSpread25(_objectSpread25({}, makeWidget({
      searchParameters
    })), {}, {
      $$type: "ais.configureRelatedItems"
    });
  };
};
var connectConfigureRelatedItems_default = connectConfigureRelatedItems;

// node_modules/instantsearch.js/es/connectors/autocomplete/connectAutocomplete.js
function ownKeys26(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread26(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys26(Object(source), true).forEach(function(key) {
        _defineProperty27(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys26(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty27(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage22 = createDocumentationMessageGenerator({
  name: "autocomplete",
  connector: true
});
var connectAutocomplete = function connectAutocomplete2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage22());
  return function(widgetParams) {
    var _ref = widgetParams || {}, _ref$escapeHTML = _ref.escapeHTML, escapeHTML = _ref$escapeHTML === void 0 ? true : _ref$escapeHTML;
    true ? _warning(!widgetParams.indices, "\nThe option `indices` has been removed from the Autocomplete connector.\n\nThe indices to target are now inferred from the widgets tree.\n".concat(Array.isArray(widgetParams.indices) ? "\nAn alternative would be:\n\nconst autocomplete = connectAutocomplete(renderer);\n\nsearch.addWidgets([\n  ".concat(widgetParams.indices.map(function(_ref2) {
      var value = _ref2.value;
      return "index({ indexName: '".concat(value, "' }),");
    }).join("\n  "), "\n  autocomplete()\n]);\n") : "", "\n      ")) : void 0;
    var connectorState = {};
    return {
      $$type: "ais.autocomplete",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread26(_objectSpread26({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        var renderState = this.getWidgetRenderState(renderOptions);
        renderState.indices.forEach(function(_ref3) {
          var sendEvent = _ref3.sendEvent, hits = _ref3.hits;
          sendEvent("view", hits);
        });
        renderFn(_objectSpread26(_objectSpread26({}, renderState), {}, {
          instantSearchInstance
        }), false);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread26(_objectSpread26({}, renderState), {}, {
          autocomplete: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref4) {
        var _this = this;
        var helper = _ref4.helper, state = _ref4.state, scopedResults = _ref4.scopedResults, instantSearchInstance = _ref4.instantSearchInstance;
        if (!connectorState.refine) {
          connectorState.refine = function(query) {
            helper.setQuery(query).search();
          };
        }
        var indices = scopedResults.map(function(scopedResult) {
          scopedResult.results.hits = escapeHTML ? escapeHits(scopedResult.results.hits) : scopedResult.results.hits;
          var sendEvent = createSendEventForHits({
            instantSearchInstance,
            index: scopedResult.results.index,
            widgetType: _this.$$type
          });
          return {
            indexId: scopedResult.indexId,
            indexName: scopedResult.results.index,
            hits: scopedResult.results.hits,
            results: scopedResult.results,
            sendEvent
          };
        });
        return {
          currentRefinement: state.query || "",
          indices,
          refine: connectorState.refine,
          widgetParams
        };
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref5) {
        var searchParameters = _ref5.searchParameters;
        var query = searchParameters.query || "";
        if (query === "" || uiState && uiState.query === query) {
          return uiState;
        }
        return _objectSpread26(_objectSpread26({}, uiState), {}, {
          query
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref6) {
        var uiState = _ref6.uiState;
        var parameters = {
          query: uiState.query || ""
        };
        if (!escapeHTML) {
          return searchParameters.setQueryParameters(parameters);
        }
        return searchParameters.setQueryParameters(_objectSpread26(_objectSpread26({}, parameters), TAG_PLACEHOLDER));
      },
      dispose: function dispose(_ref7) {
        var state = _ref7.state;
        unmountFn();
        var stateWithoutQuery = state.setQueryParameter("query", void 0);
        if (!escapeHTML) {
          return stateWithoutQuery;
        }
        return stateWithoutQuery.setQueryParameters(Object.keys(TAG_PLACEHOLDER).reduce(function(acc, key) {
          return _objectSpread26(_objectSpread26({}, acc), {}, _defineProperty27({}, key, void 0));
        }, {}));
      }
    };
  };
};
var connectAutocomplete_default = connectAutocomplete;

// node_modules/instantsearch.js/es/connectors/query-rules/connectQueryRules.js
function ownKeys27(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread27(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys27(Object(source), true).forEach(function(key) {
        _defineProperty28(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys27(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty28(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toConsumableArray9(arr) {
  return _arrayWithoutHoles9(arr) || _iterableToArray9(arr) || _unsupportedIterableToArray14(arr) || _nonIterableSpread9();
}
function _nonIterableSpread9() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray14(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray14(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray14(o7, minLen);
}
function _iterableToArray9(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles9(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray14(arr);
}
function _arrayLikeToArray14(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
var withUsage23 = createDocumentationMessageGenerator({
  name: "query-rules",
  connector: true
});
function hasStateRefinements(state) {
  return [state.disjunctiveFacetsRefinements, state.facetsRefinements, state.hierarchicalFacetsRefinements, state.numericRefinements].some(function(refinement) {
    return Boolean(refinement && Object.keys(refinement).length > 0);
  });
}
function escapeRuleContext(ruleName) {
  return ruleName.replace(/[^a-z0-9-_]+/gi, "_");
}
function getRuleContextsFromTrackedFilters(_ref) {
  var helper = _ref.helper, sharedHelperState = _ref.sharedHelperState, trackedFilters = _ref.trackedFilters;
  var ruleContexts = Object.keys(trackedFilters).reduce(function(facets, facetName) {
    var facetRefinements = getRefinements(helper.lastResults || {}, sharedHelperState, true).filter(function(refinement) {
      return refinement.attribute === facetName;
    }).map(function(refinement) {
      return refinement.numericValue || refinement.name;
    });
    var getTrackedFacetValues = trackedFilters[facetName];
    var trackedFacetValues = getTrackedFacetValues(facetRefinements);
    return [].concat(_toConsumableArray9(facets), _toConsumableArray9(facetRefinements.filter(function(facetRefinement) {
      return trackedFacetValues.includes(facetRefinement);
    }).map(function(facetValue) {
      return escapeRuleContext("ais-".concat(facetName, "-").concat(facetValue));
    })));
  }, []);
  return ruleContexts;
}
function applyRuleContexts(event) {
  var helper = this.helper, initialRuleContexts = this.initialRuleContexts, trackedFilters = this.trackedFilters, transformRuleContexts = this.transformRuleContexts;
  var sharedHelperState = event.state;
  var previousRuleContexts = sharedHelperState.ruleContexts || [];
  var newRuleContexts = getRuleContextsFromTrackedFilters({
    helper,
    sharedHelperState,
    trackedFilters
  });
  var nextRuleContexts = [].concat(_toConsumableArray9(initialRuleContexts), _toConsumableArray9(newRuleContexts));
  true ? _warning(nextRuleContexts.length <= 10, "\nThe maximum number of `ruleContexts` is 10. They have been sliced to that limit.\nConsider using `transformRuleContexts` to minimize the number of rules sent to Algolia.\n") : void 0;
  var ruleContexts = transformRuleContexts(nextRuleContexts).slice(0, 10);
  if (!isEqual(previousRuleContexts, ruleContexts)) {
    helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread27(_objectSpread27({}, sharedHelperState), {}, {
      ruleContexts
    }));
  }
}
var connectQueryRules = function connectQueryRules2(_render) {
  var unmount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(_render, withUsage23());
  return function(widgetParams) {
    var _ref2 = widgetParams || {}, _ref2$trackedFilters = _ref2.trackedFilters, trackedFilters = _ref2$trackedFilters === void 0 ? {} : _ref2$trackedFilters, _ref2$transformRuleCo = _ref2.transformRuleContexts, transformRuleContexts = _ref2$transformRuleCo === void 0 ? function(rules) {
      return rules;
    } : _ref2$transformRuleCo, _ref2$transformItems = _ref2.transformItems, transformItems = _ref2$transformItems === void 0 ? function(items) {
      return items;
    } : _ref2$transformItems;
    Object.keys(trackedFilters).forEach(function(facetName) {
      if (typeof trackedFilters[facetName] !== "function") {
        throw new Error(withUsage23(`'The "`.concat(facetName, '" filter value in the `trackedFilters` option expects a function.')));
      }
    });
    var hasTrackedFilters = Object.keys(trackedFilters).length > 0;
    var initialRuleContexts = [];
    var onHelperChange;
    return {
      $$type: "ais.queryRules",
      init: function init(initOptions) {
        var helper = initOptions.helper, state = initOptions.state, instantSearchInstance = initOptions.instantSearchInstance;
        initialRuleContexts = state.ruleContexts || [];
        onHelperChange = applyRuleContexts.bind({
          helper,
          initialRuleContexts,
          trackedFilters,
          transformRuleContexts
        });
        if (hasTrackedFilters) {
          if (hasStateRefinements(state) || Boolean(widgetParams.transformRuleContexts)) {
            onHelperChange({
              state
            });
          }
          helper.on("change", onHelperChange);
        }
        _render(_objectSpread27(_objectSpread27({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        _render(_objectSpread27(_objectSpread27({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      getWidgetRenderState: function getWidgetRenderState(_ref3) {
        var results = _ref3.results;
        var _ref4 = results || {}, _ref4$userData = _ref4.userData, userData = _ref4$userData === void 0 ? [] : _ref4$userData;
        var items = transformItems(userData, {
          results
        });
        return {
          items,
          widgetParams
        };
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread27(_objectSpread27({}, renderState), {}, {
          queryRules: this.getWidgetRenderState(renderOptions)
        });
      },
      dispose: function dispose(_ref5) {
        var helper = _ref5.helper, state = _ref5.state;
        unmount();
        if (hasTrackedFilters) {
          helper.removeListener("change", onHelperChange);
          return state.setQueryParameter("ruleContexts", initialRuleContexts);
        }
        return state;
      }
    };
  };
};
var connectQueryRules_default = connectQueryRules;

// node_modules/instantsearch.js/es/lib/voiceSearchHelper/index.js
function ownKeys28(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread28(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys28(Object(source), true).forEach(function(key) {
        _defineProperty29(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys28(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty29(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var createVoiceSearchHelper = function createVoiceSearchHelper2(_ref) {
  var searchAsYouSpeak = _ref.searchAsYouSpeak, language = _ref.language, onQueryChange = _ref.onQueryChange, onStateChange = _ref.onStateChange;
  var SpeechRecognitionAPI = window.webkitSpeechRecognition || window.SpeechRecognition;
  var getDefaultState = function getDefaultState2(status) {
    return {
      status,
      transcript: "",
      isSpeechFinal: false,
      errorCode: void 0
    };
  };
  var state = getDefaultState("initial");
  var recognition;
  var isBrowserSupported = function isBrowserSupported2() {
    return Boolean(SpeechRecognitionAPI);
  };
  var isListening = function isListening2() {
    return state.status === "askingPermission" || state.status === "waiting" || state.status === "recognizing";
  };
  var setState = function setState2() {
    var newState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    state = _objectSpread28(_objectSpread28({}, state), newState);
    onStateChange();
  };
  var getState = function getState2() {
    return state;
  };
  var resetState = function resetState2() {
    var status = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "initial";
    setState(getDefaultState(status));
  };
  var onStart = function onStart2() {
    setState({
      status: "waiting"
    });
  };
  var onError = function onError2(event) {
    setState({
      status: "error",
      errorCode: event.error
    });
  };
  var onResult = function onResult2(event) {
    setState({
      status: "recognizing",
      transcript: event.results[0] && event.results[0][0] && event.results[0][0].transcript || "",
      isSpeechFinal: event.results[0] && event.results[0].isFinal
    });
    if (searchAsYouSpeak && state.transcript) {
      onQueryChange(state.transcript);
    }
  };
  var onEnd = function onEnd2() {
    if (!state.errorCode && state.transcript && !searchAsYouSpeak) {
      onQueryChange(state.transcript);
    }
    if (state.status !== "error") {
      setState({
        status: "finished"
      });
    }
  };
  var startListening = function startListening2() {
    recognition = new SpeechRecognitionAPI();
    if (!recognition) {
      return;
    }
    resetState("askingPermission");
    recognition.interimResults = true;
    if (language) {
      recognition.lang = language;
    }
    recognition.addEventListener("start", onStart);
    recognition.addEventListener("error", onError);
    recognition.addEventListener("result", onResult);
    recognition.addEventListener("end", onEnd);
    recognition.start();
  };
  var dispose = function dispose2() {
    if (!recognition) {
      return;
    }
    recognition.stop();
    recognition.removeEventListener("start", onStart);
    recognition.removeEventListener("error", onError);
    recognition.removeEventListener("result", onResult);
    recognition.removeEventListener("end", onEnd);
    recognition = void 0;
  };
  var stopListening = function stopListening2() {
    dispose();
    resetState("finished");
  };
  return {
    getState,
    isBrowserSupported,
    isListening,
    startListening,
    stopListening,
    dispose
  };
};
var voiceSearchHelper_default = createVoiceSearchHelper;

// node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.js
function ownKeys29(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread29(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys29(Object(source), true).forEach(function(key) {
        _defineProperty30(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys29(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty30(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage24 = createDocumentationMessageGenerator({
  name: "voice-search",
  connector: true
});
var connectVoiceSearch = function connectVoiceSearch2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage24());
  return function(widgetParams) {
    var _widgetParams$searchA = widgetParams.searchAsYouSpeak, searchAsYouSpeak = _widgetParams$searchA === void 0 ? false : _widgetParams$searchA, language = widgetParams.language, additionalQueryParameters = widgetParams.additionalQueryParameters, _widgetParams$createV = widgetParams.createVoiceSearchHelper, createVoiceSearchHelper3 = _widgetParams$createV === void 0 ? voiceSearchHelper_default : _widgetParams$createV;
    return {
      $$type: "ais.voiceSearch",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread29(_objectSpread29({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread29(_objectSpread29({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread29(_objectSpread29({}, renderState), {}, {
          voiceSearch: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(renderOptions) {
        var _this = this;
        var helper = renderOptions.helper, instantSearchInstance = renderOptions.instantSearchInstance;
        if (!this._refine) {
          this._refine = function(query) {
            if (query !== helper.state.query) {
              var queryLanguages = language ? [language.split("-")[0]] : void 0;
              helper.setQueryParameter("queryLanguages", queryLanguages);
              if (typeof additionalQueryParameters === "function") {
                helper.setState(helper.state.setQueryParameters(_objectSpread29({
                  ignorePlurals: true,
                  removeStopWords: true,
                  optionalWords: query
                }, additionalQueryParameters({
                  query
                }))));
              }
              helper.setQuery(query).search();
            }
          };
        }
        if (!this._voiceSearchHelper) {
          this._voiceSearchHelper = createVoiceSearchHelper3({
            searchAsYouSpeak,
            language,
            onQueryChange: function onQueryChange(query) {
              return _this._refine(query);
            },
            onStateChange: function onStateChange() {
              renderFn(_objectSpread29(_objectSpread29({}, _this.getWidgetRenderState(renderOptions)), {}, {
                instantSearchInstance
              }), false);
            }
          });
        }
        var _voiceSearchHelper = this._voiceSearchHelper, isBrowserSupported = _voiceSearchHelper.isBrowserSupported, isListening = _voiceSearchHelper.isListening, startListening = _voiceSearchHelper.startListening, stopListening = _voiceSearchHelper.stopListening, getState = _voiceSearchHelper.getState;
        return {
          isBrowserSupported: isBrowserSupported(),
          isListening: isListening(),
          toggleListening: function toggleListening() {
            if (!isBrowserSupported()) {
              return;
            }
            if (isListening()) {
              stopListening();
            } else {
              startListening();
            }
          },
          voiceListeningState: getState(),
          widgetParams
        };
      },
      dispose: function dispose(_ref) {
        var state = _ref.state;
        this._voiceSearchHelper.dispose();
        unmountFn();
        var newState = state;
        if (typeof additionalQueryParameters === "function") {
          var additional = additionalQueryParameters({
            query: ""
          });
          var toReset = additional ? Object.keys(additional).reduce(function(acc, current) {
            acc[current] = void 0;
            return acc;
          }, {}) : {};
          newState = state.setQueryParameters(_objectSpread29({
            queryLanguages: void 0,
            ignorePlurals: void 0,
            removeStopWords: void 0,
            optionalWords: void 0
          }, toReset));
        }
        return newState.setQueryParameter("query", void 0);
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref2) {
        var searchParameters = _ref2.searchParameters;
        var query = searchParameters.query || "";
        if (!query) {
          return uiState;
        }
        return _objectSpread29(_objectSpread29({}, uiState), {}, {
          query
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref3) {
        var uiState = _ref3.uiState;
        return searchParameters.setQueryParameter("query", uiState.query || "");
      }
    };
  };
};
var connectVoiceSearch_default = connectVoiceSearch;

// node_modules/instantsearch.js/es/connectors/answers/connectAnswers.js
var withUsage25 = createDocumentationMessageGenerator({
  name: "answers",
  connector: true
});

// node_modules/instantsearch.js/es/connectors/relevant-sort/connectRelevantSort.js
function ownKeys30(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread30(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys30(Object(source), true).forEach(function(key) {
        _defineProperty31(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys30(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty31(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var connectRelevantSort = function connectRelevantSort2() {
  var renderFn = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : noop;
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  return function(widgetParams) {
    var connectorState = {};
    return {
      $$type: "ais.relevantSort",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread30(_objectSpread30({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread30(_objectSpread30({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref) {
        var state = _ref.state;
        unmountFn();
        return state.setQueryParameter("relevancyStrictness", void 0);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread30(_objectSpread30({}, renderState), {}, {
          relevantSort: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref2) {
        var results = _ref2.results, helper = _ref2.helper;
        if (!connectorState.refine) {
          connectorState.refine = function(relevancyStrictness) {
            helper.setQueryParameter("relevancyStrictness", relevancyStrictness).search();
          };
        }
        var _ref3 = results || {}, appliedRelevancyStrictness = _ref3.appliedRelevancyStrictness;
        var isVirtualReplica = appliedRelevancyStrictness !== void 0;
        return {
          isRelevantSorted: typeof appliedRelevancyStrictness !== "undefined" && appliedRelevancyStrictness > 0,
          isVirtualReplica,
          canRefine: isVirtualReplica,
          refine: connectorState.refine,
          widgetParams
        };
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(state, _ref4) {
        var _uiState$relevantSort;
        var uiState = _ref4.uiState;
        return state.setQueryParameter("relevancyStrictness", (_uiState$relevantSort = uiState.relevantSort) !== null && _uiState$relevantSort !== void 0 ? _uiState$relevantSort : state.relevancyStrictness);
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref5) {
        var searchParameters = _ref5.searchParameters;
        return _objectSpread30(_objectSpread30({}, uiState), {}, {
          relevantSort: searchParameters.relevancyStrictness || uiState.relevantSort
        });
      }
    };
  };
};
var connectRelevantSort_default = connectRelevantSort;

// node_modules/instantsearch.js/es/connectors/dynamic-widgets/connectDynamicWidgets.js
function ownKeys31(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread31(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys31(Object(source), true).forEach(function(key) {
        _defineProperty32(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys31(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty32(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _typeof5(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof5 = function _typeof7(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof5 = function _typeof7(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof5(obj);
}
var withUsage26 = createDocumentationMessageGenerator({
  name: "dynamic-widgets",
  connector: true
});
var MAX_WILDCARD_FACETS = 20;
var connectDynamicWidgets = function connectDynamicWidgets2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage26());
  return function(widgetParams) {
    var widgets = widgetParams.widgets, _widgetParams$maxValu = widgetParams.maxValuesPerFacet, maxValuesPerFacet = _widgetParams$maxValu === void 0 ? 20 : _widgetParams$maxValu, _widgetParams$facets = widgetParams.facets, facets = _widgetParams$facets === void 0 ? ["*"] : _widgetParams$facets, _widgetParams$transfo = widgetParams.transformItems, transformItems = _widgetParams$transfo === void 0 ? function(items) {
      return items;
    } : _widgetParams$transfo, fallbackWidget = widgetParams.fallbackWidget;
    if (!(widgets && Array.isArray(widgets) && widgets.every(function(widget) {
      return _typeof5(widget) === "object";
    }))) {
      throw new Error(withUsage26("The `widgets` option expects an array of widgets."));
    }
    if (!(Array.isArray(facets) && facets.length <= 1 && (facets[0] === "*" || facets[0] === void 0))) {
      throw new Error(withUsage26('The `facets` option only accepts [] or ["*"], you passed '.concat(JSON.stringify(facets))));
    }
    var localWidgets = /* @__PURE__ */ new Map();
    return {
      $$type: "ais.dynamicWidgets",
      init: function init(initOptions) {
        widgets.forEach(function(widget) {
          var attribute = getWidgetAttribute(widget, initOptions);
          localWidgets.set(attribute, {
            widget,
            isMounted: false
          });
        });
        renderFn(_objectSpread31(_objectSpread31({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance: initOptions.instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var parent = renderOptions.parent;
        var renderState = this.getWidgetRenderState(renderOptions);
        var widgetsToUnmount = [];
        var widgetsToMount = [];
        if (fallbackWidget) {
          renderState.attributesToRender.forEach(function(attribute) {
            if (!localWidgets.has(attribute)) {
              var widget = fallbackWidget({
                attribute
              });
              localWidgets.set(attribute, {
                widget,
                isMounted: false
              });
            }
          });
        }
        localWidgets.forEach(function(_ref, attribute) {
          var widget = _ref.widget, isMounted = _ref.isMounted;
          var shouldMount = renderState.attributesToRender.indexOf(attribute) > -1;
          if (!isMounted && shouldMount) {
            widgetsToMount.push(widget);
            localWidgets.set(attribute, {
              widget,
              isMounted: true
            });
          } else if (isMounted && !shouldMount) {
            widgetsToUnmount.push(widget);
            localWidgets.set(attribute, {
              widget,
              isMounted: false
            });
          }
        });
        parent.addWidgets(widgetsToMount);
        setTimeout(function() {
          return parent.removeWidgets(widgetsToUnmount);
        }, 0);
        renderFn(_objectSpread31(_objectSpread31({}, renderState), {}, {
          instantSearchInstance: renderOptions.instantSearchInstance
        }), false);
      },
      dispose: function dispose(_ref2) {
        var parent = _ref2.parent;
        var toRemove = [];
        localWidgets.forEach(function(_ref3) {
          var widget = _ref3.widget, isMounted = _ref3.isMounted;
          if (isMounted) {
            toRemove.push(widget);
          }
        });
        parent.removeWidgets(toRemove);
        unmountFn();
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(state) {
        return facets.reduce(function(acc, curr) {
          return acc.addFacet(curr);
        }, state.setQueryParameters({
          maxValuesPerFacet: Math.max(maxValuesPerFacet || 0, state.maxValuesPerFacet || 0)
        }));
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread31(_objectSpread31({}, renderState), {}, {
          dynamicWidgets: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(_ref4) {
        var _results$renderingCon, _results$renderingCon2, _results$renderingCon3, _results$renderingCon4;
        var results = _ref4.results, state = _ref4.state;
        if (!results) {
          return {
            attributesToRender: [],
            widgetParams
          };
        }
        var attributesToRender = transformItems((_results$renderingCon = (_results$renderingCon2 = results.renderingContent) === null || _results$renderingCon2 === void 0 ? void 0 : (_results$renderingCon3 = _results$renderingCon2.facetOrdering) === null || _results$renderingCon3 === void 0 ? void 0 : (_results$renderingCon4 = _results$renderingCon3.facets) === null || _results$renderingCon4 === void 0 ? void 0 : _results$renderingCon4.order) !== null && _results$renderingCon !== void 0 ? _results$renderingCon : [], {
          results
        });
        if (!Array.isArray(attributesToRender)) {
          throw new Error(withUsage26("The `transformItems` option expects a function that returns an Array."));
        }
        true ? _warning(maxValuesPerFacet >= (state.maxValuesPerFacet || 0), "The maxValuesPerFacet set by dynamic widgets (".concat(maxValuesPerFacet, ") is smaller than one of the limits set by a widget (").concat(state.maxValuesPerFacet, "). This causes a mismatch in query parameters and thus an extra network request when that widget is mounted.")) : void 0;
        true ? _warning(attributesToRender.length <= MAX_WILDCARD_FACETS || widgetParams.facets !== void 0, "More than ".concat(MAX_WILDCARD_FACETS, ` facets are requested to be displayed without explicitly setting which facets to retrieve. This could have a performance impact. Set "facets" to [] to do two smaller network requests, or explicitly to ['*'] to avoid this warning.`)) : void 0;
        return {
          attributesToRender,
          widgetParams
        };
      }
    };
  };
};
var connectDynamicWidgets_default = connectDynamicWidgets;

// node_modules/instantsearch.js/es/connectors/index.js
var EXPERIMENTAL_connectDynamicWidgets = deprecate(connectDynamicWidgets_default, "use connectDynamicWidgets");

// node_modules/vue-instantsearch/vue3/es/src/components/Autocomplete.vue_vue&type=script&lang.js
var Autocomplete_vue_vue_type_script_lang_default = { name: "AisAutocomplete", mixins: [n3({ connector: connectAutocomplete_default }, { $$widgetType: "ais.autocomplete" }), t({ name: "Autocomplete" })], props: { escapeHTML: { type: Boolean, required: false, default: true } }, computed: { widgetParams: function() {
  return { escapeHTML: this.escapeHTML };
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/Autocomplete.vue_vue&type=template&id=e7c95fd0&lang.js
var s2 = createVNode("p", null, "This widget doesn't render anything without a filled in default slot.", -1);
var a3 = createVNode("p", null, "query, function to refine and results are provided.", -1);
var d2 = createVNode("pre", null, "refine: Function", -1);
var f2 = createVNode("summary", null, [createVNode("code", null, "indices"), createTextVNode(":")], -1);
function c2(l7, c13, o7, m6, p5, v5) {
  return l7.state ? (openBlock(), createBlock("div", { key: 0, class: l7.suit() }, [renderSlot(l7.$slots, "default", { refine: l7.state.refine, currentRefinement: l7.state.currentRefinement, indices: l7.state.indices }, function() {
    return [s2, a3, d2, createVNode("pre", null, 'currentRefinement: "' + toDisplayString(l7.state.currentRefinement) + '"', 1), createVNode("details", null, [f2, createVNode("pre", null, toDisplayString(l7.state.indices), 1)])];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Autocomplete.vue.js
Autocomplete_vue_vue_type_script_lang_default.render = c2, Autocomplete_vue_vue_type_script_lang_default.__file = "src/components/Autocomplete.vue";
var Autocomplete_vue_default = Autocomplete_vue_vue_type_script_lang_default;

// node_modules/mitt/dist/mitt.es.js
function mitt_es_default(n5) {
  return { all: n5 = n5 || /* @__PURE__ */ new Map(), on: function(t6, e7) {
    var i4 = n5.get(t6);
    i4 && i4.push(e7) || n5.set(t6, [e7]);
  }, off: function(t6, e7) {
    var i4 = n5.get(t6);
    i4 && i4.splice(i4.indexOf(e7) >>> 0, 1);
  }, emit: function(t6, e7) {
    (n5.get(t6) || []).slice().map(function(n6) {
      n6(e7);
    }), (n5.get("*") || []).slice().map(function(n6) {
      n6(t6, e7);
    });
  } };
}

// node_modules/vue-instantsearch/vue3/es/src/mixins/panel.js
var i2 = function() {
  var e7;
  return (e7 = { props: { emitter: { type: Object, required: false, default: function() {
    return mitt_es_default();
  } } }, provide: function() {
    var t6;
    return (t6 = {}).instantSearchPanelEmitter = this.emitter, t6;
  }, data: function() {
    return { canRefine: true };
  }, created: function() {
    var t6 = this;
    this.emitter.on("PANEL_CHANGE_EVENT", function(e8) {
      t6.updateCanRefine(e8);
    });
  } }).beforeUnmount = function() {
    this.emitter.all.clear();
  }, e7.methods = { updateCanRefine: function(t6) {
    this.canRefine = t6;
  } }, e7;
};
var r2 = function(t6) {
  var e7 = t6.mapStateToCanRefine;
  return { inject: { emitter: { from: "instantSearchPanelEmitter", default: function() {
    return { emit: function() {
    } };
  } } }, data: function() {
    return { state: null, hasAlreadyEmitted: false };
  }, watch: { state: { immediate: true, handler: function(t7, n5) {
    if (t7) {
      var i4 = e7(n5 || {}), r15 = e7(t7);
      this.hasAlreadyEmitted && i4 === r15 || (this.emitter.emit("PANEL_CHANGE_EVENT", r15), this.hasAlreadyEmitted = true);
    }
  } } } };
};

// node_modules/vue-instantsearch/vue3/es/src/components/Breadcrumb.vue_vue&type=script&lang.js
var Breadcrumb_vue_vue_type_script_lang_default = { name: "AisBreadcrumb", mixins: [n3({ connector: connectBreadcrumb_default }, { $$widgetType: "ais.breadcrumb" }), r2({ mapStateToCanRefine: function(t6) {
  return Boolean(t6.canRefine);
} }), t({ name: "Breadcrumb" })], props: { attributes: { type: Array, required: true }, separator: { type: String, default: void 0 }, rootPath: { type: String, default: void 0 }, transformItems: { type: Function, default: void 0 } }, computed: { widgetParams: function() {
  return { attributes: this.attributes, separator: this.separator, rootPath: this.rootPath, transformItems: this.transformItems };
} }, methods: { isLastItem: function(t6) {
  return this.state.items.length - 1 === t6;
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/Breadcrumb.vue_vue&type=template&id=6f46de9a&lang.js
var c3 = createTextVNode("Home");
var f3 = { key: 1 };
var m2 = createTextVNode("Home");
var k2 = createTextVNode(">");
var p3 = { key: 1 };
function v2(o7, v5, L2, R, h5, d5) {
  return o7.state ? (openBlock(), createBlock("div", { key: 0, class: [o7.suit(), !o7.state.canRefine && o7.suit("", "noRefinement")] }, [renderSlot(o7.$slots, "default", { items: o7.state.items, canRefine: o7.state.canRefine, refine: o7.state.refine, createURL: o7.state.createURL }, function() {
    return [createVNode("ul", { class: o7.suit("list") }, [createVNode("li", { class: [o7.suit("item"), !o7.state.items.length && o7.suit("item", "selected")] }, [Boolean(o7.state.items.length) ? (openBlock(), createBlock("a", { key: 0, href: o7.state.createURL(), class: o7.suit("link"), onClick: v5[1] || (v5[1] = withModifiers(function(e7) {
      return o7.state.refine();
    }, ["prevent"])) }, [renderSlot(o7.$slots, "rootLabel", {}, function() {
      return [c3];
    })], 10, ["href"])) : (openBlock(), createBlock("span", f3, [renderSlot(o7.$slots, "rootLabel", {}, function() {
      return [m2];
    })]))], 2), (openBlock(true), createBlock(Fragment, null, renderList(o7.state.items, function(i4, r15) {
      return openBlock(), createBlock("li", { key: i4.label, class: [o7.suit("item"), d5.isLastItem(r15) && o7.suit("item", "selected")] }, [createVNode("span", { class: o7.suit("separator"), "aria-hidden": "true" }, [renderSlot(o7.$slots, "separator", {}, function() {
        return [k2];
      })], 2), d5.isLastItem(r15) ? (openBlock(), createBlock("span", p3, toDisplayString(i4.label), 1)) : (openBlock(), createBlock("a", { key: 0, href: o7.state.createURL(i4.value), class: o7.suit("link"), onClick: withModifiers(function(e7) {
        return o7.state.refine(i4.value);
      }, ["prevent"]) }, toDisplayString(i4.label), 11, ["href", "onClick"]))], 2);
    }), 128))], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Breadcrumb.vue.js
Breadcrumb_vue_vue_type_script_lang_default.render = v2, Breadcrumb_vue_vue_type_script_lang_default.__file = "src/components/Breadcrumb.vue";
var Breadcrumb_vue_default = Breadcrumb_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/ClearRefinements.vue_vue&type=script&lang.js
var ClearRefinements_vue_vue_type_script_lang_default = { name: "AisClearRefinements", mixins: [n3({ connector: connectClearRefinements_default }, { $$widgetType: "ais.clearRefinements" }), r2({ mapStateToCanRefine: function(e7) {
  return Boolean(e7.hasRefinements);
} }), t({ name: "ClearRefinements" })], props: { excludedAttributes: { type: Array, default: void 0 }, includedAttributes: { type: Array, default: void 0 }, transformItems: { type: Function, default: void 0 } }, computed: { widgetParams: function() {
  return { includedAttributes: this.includedAttributes, excludedAttributes: this.excludedAttributes, transformItems: this.transformItems };
}, canRefine: function() {
  return this.state.hasRefinements;
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/ClearRefinements.vue_vue&type=template&id=410a3aaa&lang.js
var f4 = createTextVNode("Clear refinements");
function u2(s6, u10, o7, c13, l7, d5) {
  return s6.state ? (openBlock(), createBlock("div", { key: 0, class: s6.suit() }, [renderSlot(s6.$slots, "default", { canRefine: d5.canRefine, refine: s6.state.refine, createURL: s6.state.createURL }, function() {
    return [createVNode("button", { type: "reset", class: [s6.suit("button"), !d5.canRefine && s6.suit("button", "disabled")], disabled: !d5.canRefine, onClick: u10[1] || (u10[1] = withModifiers(function() {
      for (var e7, t6 = [], n5 = arguments.length; n5--; )
        t6[n5] = arguments[n5];
      return s6.state.refine && (e7 = s6.state).refine.apply(e7, t6);
    }, ["prevent"])) }, [renderSlot(s6.$slots, "resetLabel", {}, function() {
      return [f4];
    })], 10, ["disabled"])];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/ClearRefinements.vue.js
ClearRefinements_vue_vue_type_script_lang_default.render = u2, ClearRefinements_vue_vue_type_script_lang_default.__file = "src/components/ClearRefinements.vue";
var ClearRefinements_vue_default = ClearRefinements_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/Configure.js
var Configure_default = { inheritAttrs: false, name: "AisConfigure", mixins: [t({ name: "Configure" }), n3({ connector: connectConfigure_default }, { $$widgetType: "ais.configure" })], computed: { widgetParams: function() {
  return { searchParameters: this.$attrs };
} }, render: n(function(t6) {
  var e7 = this.$slots.default;
  return this.state && e7 ? t6("div", { class: this.suit() }, [e7({ refine: this.state.refine, searchParameters: this.state.widgetParams.searchParameters })]) : null;
}) };

// node_modules/vue-instantsearch/vue3/es/src/components/ConfigureRelatedItems.js
var ConfigureRelatedItems_default = { inheritAttrs: false, name: "AisExperimentalConfigureRelatedItems", mixins: [n3({ connector: connectConfigureRelatedItems_default }, { $$widgetType: "ais.configureRelatedItems" })], props: { hit: { type: Object, required: true }, matchingPatterns: { type: Object, required: true }, transformSearchParameters: { type: Function, required: false } }, computed: { widgetParams: function() {
  return { hit: this.hit, matchingPatterns: this.matchingPatterns, transformSearchParameters: this.transformSearchParameters };
} }, render: function() {
  return null;
} };

// node_modules/vue-instantsearch/vue3/es/src/components/CurrentRefinements.vue_vue&type=script&lang.js
var CurrentRefinements_vue_vue_type_script_lang_default = { name: "AisCurrentRefinements", mixins: [t({ name: "CurrentRefinements" }), n3({ connector: connectCurrentRefinements_default }, { $$widgetType: "ais.currentRefinements" }), r2({ mapStateToCanRefine: function(t6) {
  return Boolean(t6.items) && t6.items.length > 0;
} })], props: { includedAttributes: { type: Array, default: void 0 }, excludedAttributes: { type: Array, default: void 0 }, transformItems: { type: Function, default: void 0 } }, computed: { noRefinement: function() {
  return this.state && 0 === this.state.items.length;
}, widgetParams: function() {
  return { includedAttributes: this.includedAttributes, excludedAttributes: this.excludedAttributes, transformItems: this.transformItems };
} }, methods: { createItemKey: function(t6) {
  var e7 = t6.attribute, i4 = t6.value;
  return [e7, t6.type, i4, t6.operator].join(":");
}, capitalize: function(t6) {
  return t6 ? t6.toString().charAt(0).toLocaleUpperCase() + t6.toString().slice(1) : "";
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/CurrentRefinements.vue_vue&type=template&id=4f1917ff&lang.js
var c4 = { key: 0 };
function f5(f8, o7, m6, y2, b2, R) {
  return f8.state ? (openBlock(), createBlock("div", { key: 0, class: [f8.suit(), R.noRefinement && f8.suit("", "noRefinement")] }, [renderSlot(f8.$slots, "default", { refine: f8.state.refine, items: f8.state.items, createURL: f8.state.createURL }, function() {
    return [createVNode("ul", { class: f8.suit("list") }, [(openBlock(true), createBlock(Fragment, null, renderList(f8.state.items, function(u10) {
      return openBlock(), createBlock("li", { key: u10.attribute, class: f8.suit("item") }, [renderSlot(f8.$slots, "item", { refine: u10.refine, item: u10, createURL: f8.state.createURL }, function() {
        return [createVNode("span", { class: f8.suit("label") }, toDisplayString(R.capitalize(u10.label)) + ": ", 3), (openBlock(true), createBlock(Fragment, null, renderList(u10.refinements, function(r15) {
          return openBlock(), createBlock("span", { key: R.createItemKey(r15), class: f8.suit("category") }, [renderSlot(f8.$slots, "refinement", { refine: u10.refine, refinement: r15, createURL: f8.state.createURL }, function() {
            return [createVNode("span", { class: f8.suit("categoryLabel") }, ["query" === r15.attribute ? (openBlock(), createBlock("q", c4, toDisplayString(r15.label), 1)) : (openBlock(), createBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(r15.label), 1)], 2112))], 2), createVNode("button", { class: f8.suit("delete"), onClick: function(e7) {
              return u10.refine(r15);
            } }, " \u2715 ", 10, ["onClick"])];
          })], 2);
        }), 128))];
      })], 2);
    }), 128))], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/CurrentRefinements.vue.js
CurrentRefinements_vue_vue_type_script_lang_default.render = f5, CurrentRefinements_vue_vue_type_script_lang_default.__file = "src/components/CurrentRefinements.vue";
var CurrentRefinements_vue_default = CurrentRefinements_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/HierarchicalMenuList.vue_vue&type=script&lang.js
var HierarchicalMenuList_vue_vue_type_script_lang_default = { name: "HierarchicalMenuList", props: { items: { type: Array, required: true }, level: { type: Number, required: true }, refine: { type: Function, required: true }, createURL: { type: Function, required: true }, suit: { type: Function, required: true } } };

// node_modules/vue-instantsearch/vue3/es/src/components/HierarchicalMenuList.vue_vue&type=template&id=0435b314&lang.js
function c5(c13, v5, f8, o7, m6, d5) {
  var p5 = resolveComponent("hierarchical-menu-list", true);
  return openBlock(), createBlock("ul", { class: [f8.suit("list"), f8.level > 0 && f8.suit("list", "child"), f8.suit("list", "lvl" + f8.level)] }, [(openBlock(true), createBlock(Fragment, null, renderList(f8.items, function(e7) {
    return openBlock(), createBlock("li", { key: e7.value, class: [f8.suit("item"), e7.data && f8.suit("item", "parent"), e7.isRefined && f8.suit("item", "selected")] }, [createVNode("a", { href: f8.createURL(e7.value), class: f8.suit("link"), onClick: withModifiers(function(t6) {
      return f8.refine(e7.value);
    }, ["prevent"]) }, [createVNode("span", { class: f8.suit("label") }, toDisplayString(e7.label), 3), createVNode("span", { class: f8.suit("count") }, toDisplayString(e7.count), 3)], 10, ["href", "onClick"]), e7.data ? (openBlock(), createBlock(p5, { key: 0, items: e7.data, level: f8.level + 1, refine: f8.refine, createURL: f8.createURL, suit: f8.suit }, null, 8, ["items", "level", "refine", "createURL", "suit"])) : createCommentVNode("v-if", true)], 2);
  }), 128))], 2);
}

// node_modules/vue-instantsearch/vue3/es/src/components/HierarchicalMenuList.vue.js
HierarchicalMenuList_vue_vue_type_script_lang_default.render = c5, HierarchicalMenuList_vue_vue_type_script_lang_default.__file = "src/components/HierarchicalMenuList.vue";
var HierarchicalMenuList_vue_default = HierarchicalMenuList_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/HierarchicalMenu.vue_vue&type=script&lang.js
var s3 = function(t6) {
  return Boolean(t6.items) && t6.items.length > 0;
};
var HierarchicalMenu_vue_vue_type_script_lang_default = { name: "AisHierarchicalMenu", mixins: [t({ name: "HierarchicalMenu" }), n3({ connector: connectHierarchicalMenu_default }, { $$widgetType: "ais.hierarchicalMenu" }), r2({ mapStateToCanRefine: s3 })], components: { HierarchicalMenuList: HierarchicalMenuList_vue_default }, props: { attributes: { type: Array, required: true }, limit: { type: Number, default: void 0 }, showMoreLimit: { type: Number, default: void 0 }, showMore: { type: Boolean, default: false }, sortBy: { type: [Array, Function], default: void 0 }, separator: { type: String, default: void 0 }, rootPath: { type: String, default: void 0 }, showParentLevel: { type: Boolean, default: void 0 }, transformItems: { type: Function, default: void 0 } }, computed: { widgetParams: function() {
  return { attributes: this.attributes, limit: this.limit, showMore: this.showMore, showMoreLimit: this.showMoreLimit, separator: this.separator, rootPath: this.rootPath, showParentLevel: this.showParentLevel, sortBy: this.sortBy, transformItems: this.transformItems };
}, canRefine: function() {
  return s3(this.state);
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/HierarchicalMenu.vue_vue&type=template&id=4361a0b8&lang.js
function g2(g4, h5, c13, u10, w2, f8) {
  var M2 = resolveComponent("hierarchical-menu-list");
  return g4.state ? (openBlock(), createBlock("div", { key: 0, class: [g4.suit(), !f8.canRefine && g4.suit("", "noRefinement")] }, [renderSlot(g4.$slots, "default", { items: g4.state.items, canRefine: f8.canRefine, canToggleShowMore: g4.state.canToggleShowMore, isShowingMore: g4.state.isShowingMore, refine: g4.state.refine, createURL: g4.state.createURL, toggleShowMore: g4.state.toggleShowMore, sendEvent: g4.state.sendEvent }, function() {
    return [createVNode(M2, { items: g4.state.items, level: 0, refine: g4.state.refine, createURL: g4.state.createURL, suit: g4.suit }, null, 8, ["items", "refine", "createURL", "suit"]), c13.showMore ? (openBlock(), createBlock("button", { key: 0, class: [g4.suit("showMore"), !g4.state.canToggleShowMore && g4.suit("showMore", "disabled")], disabled: !g4.state.canToggleShowMore, onClick: h5[1] || (h5[1] = withModifiers(function() {
      for (var e7, t6 = [], o7 = arguments.length; o7--; )
        t6[o7] = arguments[o7];
      return g4.state.toggleShowMore && (e7 = g4.state).toggleShowMore.apply(e7, t6);
    }, ["prevent"])) }, [renderSlot(g4.$slots, "showMoreLabel", { isShowingMore: g4.state.isShowingMore }, function() {
      return [createTextVNode(toDisplayString(g4.state.isShowingMore ? "Show less" : "Show more"), 1)];
    })], 10, ["disabled"])) : createCommentVNode("v-if", true)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/HierarchicalMenu.vue.js
HierarchicalMenu_vue_vue_type_script_lang_default.render = g2, HierarchicalMenu_vue_vue_type_script_lang_default.__file = "src/components/HierarchicalMenu.vue";
var HierarchicalMenu_vue_default = HierarchicalMenu_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/util/unescape.js
var t4 = { "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#39;": "'" };
var e4 = /&(?:amp|lt|gt|quot|#39);/g;
var r3 = RegExp(e4.source);
function u3(u10) {
  return u10 && r3.test(u10) ? u10.replace(e4, function(e7) {
    return t4[e7];
  }) : u10;
}

// node_modules/vue-instantsearch/vue3/es/src/util/parseAlgoliaHit.js
var t5 = { highlightPreTag: "__ais-highlight__", highlightPostTag: "__/ais-highlight__" };
function r4(i4) {
  var h5 = i4.preTag, t6 = i4.postTag, r15 = i4.highlightedValue;
  void 0 === r15 && (r15 = "");
  var a10 = r15.split(h5), g4 = a10.shift(), e7 = "" === g4 ? [] : [{ value: g4, isHighlighted: false }];
  if (t6 === h5) {
    var s6 = true;
    a10.forEach(function(i5) {
      e7.push({ value: i5, isHighlighted: s6 }), s6 = !s6;
    });
  } else
    a10.forEach(function(i5) {
      var h6 = i5.split(t6);
      e7.push({ value: h6[0], isHighlighted: true }), "" !== h6[1] && e7.push({ value: " " === h6[1] ? "  " : h6[1], isHighlighted: false });
    });
  return e7;
}
function a4(a10) {
  var g4 = a10.preTag;
  void 0 === g4 && (g4 = t5.highlightPreTag);
  var e7 = a10.postTag;
  void 0 === e7 && (e7 = t5.highlightPostTag);
  var s6 = a10.highlightProperty, l7 = a10.attribute, o7 = a10.hit;
  if (!o7)
    throw new Error("`hit`, the matching record, must be provided");
  var u10 = getPropertyByPath(o7[s6], l7) || {};
  return Array.isArray(u10) ? u10.map(function(i4) {
    return r4({ preTag: g4, postTag: e7, highlightedValue: u3(i4.value) });
  }) : r4({ preTag: g4, postTag: e7, highlightedValue: u3(u10.value) });
}

// node_modules/vue-instantsearch/vue3/es/src/components/Highlighter.vue_vue&type=script&lang.js
var e5 = function(t6, e7) {
  return e7.slots.default();
};
var Highlighter_vue_vue_type_script_lang_default = { name: "AisHighlighter", props: { hit: { type: Object, required: true }, attribute: { type: String, required: true }, highlightedTagName: { type: String, default: "mark" }, suit: { type: Function, required: true }, highlightProperty: { type: String, required: true }, preTag: { type: String, required: true }, postTag: { type: String, required: true } }, data: function() {
  return { TextNode: e5 };
}, computed: { parsedHighlights: function() {
  return a4({ attribute: this.attribute, hit: this.hit, highlightProperty: this.highlightProperty, preTag: this.preTag, postTag: this.postTag });
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/Highlighter.vue_vue&type=template&id=92153c3e&lang.js
function a5(a10, h5, g4, o7, c13, d5) {
  return openBlock(), createBlock("span", { class: g4.suit() }, [(openBlock(true), createBlock(Fragment, null, renderList(d5.parsedHighlights, function(i4, s6) {
    var a11 = i4.value, h6 = i4.isHighlighted;
    return openBlock(), createBlock(resolveDynamicComponent(h6 ? g4.highlightedTagName : c13.TextNode), { class: [h6 && g4.suit("highlighted")], key: s6 }, { default: withCtx(function() {
      return [createTextVNode(toDisplayString(a11), 1)];
    }), _: 2 }, 1032, ["class"]);
  }), 128))], 2);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Highlighter.vue.js
Highlighter_vue_vue_type_script_lang_default.render = a5, Highlighter_vue_vue_type_script_lang_default.__file = "src/components/Highlighter.vue";
var Highlighter_vue_default = Highlighter_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/Highlight.vue_vue&type=script&lang.js
var Highlight_vue_vue_type_script_lang_default = { name: "AisHighlight", mixins: [t({ name: "Highlight" })], components: { AisHighlighter: Highlighter_vue_default }, props: { hit: { type: Object, required: true }, attribute: { type: String, required: true }, highlightedTagName: { type: String, default: "mark" } } };

// node_modules/vue-instantsearch/vue3/es/src/components/Highlight.vue_vue&type=template&id=300b0ab4&lang.js
function g3(g4, e7, a10, r15, u10, l7) {
  var m6 = resolveComponent("ais-highlighter");
  return openBlock(), createBlock(m6, { hit: a10.hit, attribute: a10.attribute, "highlighted-tag-name": a10.highlightedTagName, suit: g4.suit, "highlight-property": "_highlightResult", "pre-tag": "<mark>", "post-tag": "</mark>" }, null, 8, ["hit", "attribute", "highlighted-tag-name", "suit"]);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Highlight.vue.js
Highlight_vue_vue_type_script_lang_default.render = g3, Highlight_vue_vue_type_script_lang_default.__file = "src/components/Highlight.vue";
var Highlight_vue_default = Highlight_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/Hits.vue_vue&type=script&lang.js
var Hits_vue_vue_type_script_lang_default = { name: "AisHits", mixins: [n3({ connector: connectHitsWithInsights_default }, { $$widgetType: "ais.hits" }), t({ name: "Hits" })], props: { escapeHTML: { type: Boolean, default: true }, transformItems: { type: Function, default: void 0 } }, computed: { items: function() {
  return this.state.hits;
}, widgetParams: function() {
  return { escapeHTML: this.escapeHTML, transformItems: this.transformItems };
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/Hits.vue_vue&type=template&id=ef242920&lang.js
function c6(c13, a10, m6, f8, d5, v5) {
  return c13.state ? (openBlock(), createBlock("div", { key: 0, class: c13.suit() }, [renderSlot(c13.$slots, "default", { items: v5.items, insights: c13.state.insights, sendEvent: c13.state.sendEvent }, function() {
    return [createVNode("ol", { class: c13.suit("list") }, [(openBlock(true), createBlock(Fragment, null, renderList(v5.items, function(i4, n5) {
      return openBlock(), createBlock("li", { key: i4.objectID, class: c13.suit("item") }, [renderSlot(c13.$slots, "item", { item: i4, index: n5, insights: c13.state.insights }, function() {
        return [createTextVNode("objectID: " + toDisplayString(i4.objectID) + ", index: " + toDisplayString(n5), 1)];
      })], 2);
    }), 128))], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Hits.vue.js
Hits_vue_vue_type_script_lang_default.render = c6, Hits_vue_vue_type_script_lang_default.__file = "src/components/Hits.vue";
var Hits_vue_default = Hits_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/HitsPerPage.vue_vue&type=script&lang.js
var HitsPerPage_vue_vue_type_script_lang_default = { name: "AisHitsPerPage", mixins: [t({ name: "HitsPerPage" }), n3({ connector: connectHitsPerPage_default }, { $$widgetType: "ais.hitsPerPage" }), r2({ mapStateToCanRefine: function(t6) {
  return false === t6.hasNoResults;
} })], props: { items: { type: Array, required: true }, transformItems: { type: Function, default: void 0 } }, data: function() {
  return { selected: this.items.find(function(t6) {
    return true === t6.default;
  }).value };
}, computed: { widgetParams: function() {
  return { items: this.items, transformItems: this.transformItems };
} }, methods: { handleChange: function() {
  this.state.refine(this.selected);
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/HitsPerPage.vue_vue&type=template&id=74f3ac28&lang.js
function c7(c13, f8, d5, h5, v5, p5) {
  return c13.state ? (openBlock(), createBlock("div", { key: 0, class: c13.suit() }, [renderSlot(c13.$slots, "default", { items: c13.state.items, refine: c13.state.refine, hasNoResults: c13.state.hasNoResults }, function() {
    return [withDirectives(createVNode("select", { class: c13.suit("select"), "onUpdate:modelValue": f8[1] || (f8[1] = function(e7) {
      return v5.selected = e7;
    }), onChange: f8[2] || (f8[2] = function() {
      for (var e7 = [], t6 = arguments.length; t6--; )
        e7[t6] = arguments[t6];
      return p5.handleChange && p5.handleChange.apply(p5, e7);
    }) }, [(openBlock(true), createBlock(Fragment, null, renderList(c13.state.items, function(s6) {
      return openBlock(), createBlock("option", { key: s6.value, class: c13.suit("option"), value: s6.value }, toDisplayString(s6.label), 11, ["value"]);
    }), 128))], 34), [[vModelSelect, v5.selected]])];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/HitsPerPage.vue.js
HitsPerPage_vue_vue_type_script_lang_default.render = c7, HitsPerPage_vue_vue_type_script_lang_default.__file = "src/components/HitsPerPage.vue";
var HitsPerPage_vue_default = HitsPerPage_vue_vue_type_script_lang_default;

// node_modules/instantsearch.js/es/widgets/index/index.js
var import_algoliasearch_helper3 = __toESM(require_algoliasearch_helper2());
function ownKeys32(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread32(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys32(Object(source), true).forEach(function(key) {
        _defineProperty33(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys32(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty33(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toConsumableArray10(arr) {
  return _arrayWithoutHoles10(arr) || _iterableToArray10(arr) || _unsupportedIterableToArray15(arr) || _nonIterableSpread10();
}
function _nonIterableSpread10() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray15(o7, minLen) {
  if (!o7)
    return;
  if (typeof o7 === "string")
    return _arrayLikeToArray15(o7, minLen);
  var n5 = Object.prototype.toString.call(o7).slice(8, -1);
  if (n5 === "Object" && o7.constructor)
    n5 = o7.constructor.name;
  if (n5 === "Map" || n5 === "Set")
    return Array.from(o7);
  if (n5 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n5))
    return _arrayLikeToArray15(o7, minLen);
}
function _iterableToArray10(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles10(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray15(arr);
}
function _arrayLikeToArray15(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i4 = 0, arr2 = new Array(len); i4 < len; i4++) {
    arr2[i4] = arr[i4];
  }
  return arr2;
}
function _objectWithoutProperties6(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose6(source, excluded);
  var key, i4;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
      key = sourceSymbolKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var withUsage27 = createDocumentationMessageGenerator({
  name: "index-widget"
});
function privateHelperSetState(helper, _ref) {
  var state = _ref.state, isPageReset = _ref.isPageReset, _uiState = _ref._uiState;
  if (state !== helper.state) {
    helper.state = state;
    helper.emit("change", {
      state: helper.state,
      results: helper.lastResults,
      isPageReset,
      _uiState
    });
  }
}
function getLocalWidgetsUiState(widgets, widgetStateOptions) {
  var initialUiState = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  return widgets.reduce(function(uiState, widget) {
    if (isIndexWidget(widget)) {
      return uiState;
    }
    if (!widget.getWidgetUiState && !widget.getWidgetState) {
      return uiState;
    }
    if (widget.getWidgetUiState) {
      return widget.getWidgetUiState(uiState, widgetStateOptions);
    }
    return widget.getWidgetState(uiState, widgetStateOptions);
  }, initialUiState);
}
function getLocalWidgetsSearchParameters(widgets, widgetSearchParametersOptions) {
  var initialSearchParameters = widgetSearchParametersOptions.initialSearchParameters, rest = _objectWithoutProperties6(widgetSearchParametersOptions, ["initialSearchParameters"]);
  return widgets.filter(function(widget) {
    return !isIndexWidget(widget);
  }).reduce(function(state, widget) {
    if (!widget.getWidgetSearchParameters) {
      return state;
    }
    return widget.getWidgetSearchParameters(state, rest);
  }, initialSearchParameters);
}
function resetPageFromWidgets(widgets) {
  var indexWidgets = widgets.filter(isIndexWidget);
  if (indexWidgets.length === 0) {
    return;
  }
  indexWidgets.forEach(function(widget) {
    var widgetHelper = widget.getHelper();
    privateHelperSetState(widgetHelper, {
      state: widgetHelper.state.resetPage(),
      isPageReset: true
    });
    resetPageFromWidgets(widget.getWidgets());
  });
}
function resolveScopedResultsFromWidgets(widgets) {
  var indexWidgets = widgets.filter(isIndexWidget);
  return indexWidgets.reduce(function(scopedResults, current) {
    return scopedResults.concat.apply(scopedResults, [{
      indexId: current.getIndexId(),
      results: current.getResults(),
      helper: current.getHelper()
    }].concat(_toConsumableArray10(resolveScopedResultsFromWidgets(current.getWidgets()))));
  }, []);
}
var index = function index2(widgetParams) {
  if (widgetParams === void 0 || widgetParams.indexName === void 0) {
    throw new Error(withUsage27("The `indexName` option is required."));
  }
  var indexName = widgetParams.indexName, _widgetParams$indexId = widgetParams.indexId, indexId = _widgetParams$indexId === void 0 ? indexName : _widgetParams$indexId;
  var localWidgets = [];
  var localUiState = {};
  var localInstantSearchInstance = null;
  var localParent = null;
  var helper = null;
  var derivedHelper = null;
  return {
    $$type: "ais.index",
    $$widgetType: "ais.index",
    getIndexName: function getIndexName() {
      return indexName;
    },
    getIndexId: function getIndexId() {
      return indexId;
    },
    getHelper: function getHelper() {
      return helper;
    },
    getResults: function getResults() {
      return derivedHelper && derivedHelper.lastResults;
    },
    getScopedResults: function getScopedResults() {
      var widgetParent = this.getParent();
      var widgetSiblings = widgetParent ? widgetParent.getWidgets() : [this];
      return resolveScopedResultsFromWidgets(widgetSiblings);
    },
    getParent: function getParent() {
      return localParent;
    },
    createURL: function createURL(nextState) {
      return localInstantSearchInstance._createURL(_defineProperty33({}, indexId, getLocalWidgetsUiState(localWidgets, {
        searchParameters: nextState,
        helper
      })));
    },
    getWidgets: function getWidgets() {
      return localWidgets;
    },
    addWidgets: function addWidgets(widgets) {
      var _this = this;
      if (!Array.isArray(widgets)) {
        throw new Error(withUsage27("The `addWidgets` method expects an array of widgets."));
      }
      if (widgets.some(function(widget) {
        return typeof widget.init !== "function" && typeof widget.render !== "function";
      })) {
        throw new Error(withUsage27("The widget definition expects a `render` and/or an `init` method."));
      }
      localWidgets = localWidgets.concat(widgets);
      if (localInstantSearchInstance && Boolean(widgets.length)) {
        privateHelperSetState(helper, {
          state: getLocalWidgetsSearchParameters(localWidgets, {
            uiState: localUiState,
            initialSearchParameters: helper.state
          }),
          _uiState: localUiState
        });
        widgets.forEach(function(widget) {
          if (widget.getRenderState) {
            var renderState = widget.getRenderState(localInstantSearchInstance.renderState[_this.getIndexId()] || {}, {
              uiState: localInstantSearchInstance._initialUiState,
              helper: _this.getHelper(),
              parent: _this,
              instantSearchInstance: localInstantSearchInstance,
              state: helper.state,
              renderState: localInstantSearchInstance.renderState,
              templatesConfig: localInstantSearchInstance.templatesConfig,
              createURL: _this.createURL,
              scopedResults: [],
              searchMetadata: {
                isSearchStalled: localInstantSearchInstance._isSearchStalled
              }
            });
            storeRenderState({
              renderState,
              instantSearchInstance: localInstantSearchInstance,
              parent: _this
            });
          }
        });
        widgets.forEach(function(widget) {
          if (widget.init) {
            widget.init({
              helper,
              parent: _this,
              uiState: localInstantSearchInstance._initialUiState,
              instantSearchInstance: localInstantSearchInstance,
              state: helper.state,
              renderState: localInstantSearchInstance.renderState,
              templatesConfig: localInstantSearchInstance.templatesConfig,
              createURL: _this.createURL,
              scopedResults: [],
              searchMetadata: {
                isSearchStalled: localInstantSearchInstance._isSearchStalled
              }
            });
          }
        });
        localInstantSearchInstance.scheduleSearch();
      }
      return this;
    },
    removeWidgets: function removeWidgets(widgets) {
      var _this2 = this;
      if (!Array.isArray(widgets)) {
        throw new Error(withUsage27("The `removeWidgets` method expects an array of widgets."));
      }
      if (widgets.some(function(widget) {
        return typeof widget.dispose !== "function";
      })) {
        throw new Error(withUsage27("The widget definition expects a `dispose` method."));
      }
      localWidgets = localWidgets.filter(function(widget) {
        return widgets.indexOf(widget) === -1;
      });
      if (localInstantSearchInstance && Boolean(widgets.length)) {
        var nextState = widgets.reduce(function(state, widget) {
          var next = widget.dispose({
            helper,
            state,
            parent: _this2
          });
          return next || state;
        }, helper.state);
        localUiState = getLocalWidgetsUiState(localWidgets, {
          searchParameters: nextState,
          helper
        });
        helper.setState(getLocalWidgetsSearchParameters(localWidgets, {
          uiState: localUiState,
          initialSearchParameters: nextState
        }));
        if (localWidgets.length) {
          localInstantSearchInstance.scheduleSearch();
        }
      }
      return this;
    },
    init: function init(_ref2) {
      var _this3 = this, _instantSearchInstanc;
      var instantSearchInstance = _ref2.instantSearchInstance, parent = _ref2.parent, uiState = _ref2.uiState;
      if (helper !== null) {
        return;
      }
      localInstantSearchInstance = instantSearchInstance;
      localParent = parent;
      localUiState = uiState[indexId] || {};
      var mainHelper = instantSearchInstance.mainHelper;
      var parameters = getLocalWidgetsSearchParameters(localWidgets, {
        uiState: localUiState,
        initialSearchParameters: new import_algoliasearch_helper3.default.SearchParameters({
          index: indexName
        })
      });
      helper = (0, import_algoliasearch_helper3.default)({}, parameters.index, parameters);
      helper.search = function() {
        if (instantSearchInstance.onStateChange) {
          instantSearchInstance.onStateChange({
            uiState: instantSearchInstance.mainIndex.getWidgetUiState({}),
            setUiState: function setUiState(nextState) {
              return instantSearchInstance.setUiState(nextState, false);
            }
          });
          return mainHelper;
        }
        return mainHelper.search();
      };
      helper.searchWithoutTriggeringOnStateChange = function() {
        return mainHelper.search();
      };
      helper.searchForFacetValues = function(facetName, facetValue, maxFacetHits, userState) {
        var state = helper.state.setQueryParameters(userState);
        return mainHelper.searchForFacetValues(facetName, facetValue, maxFacetHits, state);
      };
      derivedHelper = mainHelper.derive(function() {
        return mergeSearchParameters.apply(void 0, _toConsumableArray10(resolveSearchParameters(_this3)));
      });
      var indexInitialResults = (_instantSearchInstanc = instantSearchInstance._initialResults) === null || _instantSearchInstanc === void 0 ? void 0 : _instantSearchInstanc[this.getIndexId()];
      if (indexInitialResults) {
        var results = new import_algoliasearch_helper3.default.SearchResults(new import_algoliasearch_helper3.default.SearchParameters(indexInitialResults.state), indexInitialResults.results);
        derivedHelper.lastResults = results;
        helper.lastResults = results;
      }
      helper.on("change", function(_ref3) {
        var isPageReset = _ref3.isPageReset;
        if (isPageReset) {
          resetPageFromWidgets(localWidgets);
        }
      });
      derivedHelper.on("search", function() {
        instantSearchInstance.scheduleStalledRender();
        if (true) {
          checkIndexUiState({
            index: _this3,
            indexUiState: localUiState
          });
        }
      });
      derivedHelper.on("result", function(_ref4) {
        var results2 = _ref4.results;
        instantSearchInstance.scheduleRender();
        helper.lastResults = results2;
      });
      localWidgets.forEach(function(widget) {
        if (widget.getRenderState) {
          var renderState = widget.getRenderState(instantSearchInstance.renderState[_this3.getIndexId()] || {}, {
            uiState,
            helper,
            parent: _this3,
            instantSearchInstance,
            state: helper.state,
            renderState: instantSearchInstance.renderState,
            templatesConfig: instantSearchInstance.templatesConfig,
            createURL: _this3.createURL,
            scopedResults: [],
            searchMetadata: {
              isSearchStalled: instantSearchInstance._isSearchStalled
            }
          });
          storeRenderState({
            renderState,
            instantSearchInstance,
            parent: _this3
          });
        }
      });
      localWidgets.forEach(function(widget) {
        true ? _warning(
          !widget.getWidgetState || Boolean(widget.getWidgetUiState),
          "The `getWidgetState` method is renamed `getWidgetUiState` and will no longer exist under that name in InstantSearch.js 5.x. Please use `getWidgetUiState` instead."
        ) : void 0;
        if (widget.init) {
          widget.init({
            uiState,
            helper,
            parent: _this3,
            instantSearchInstance,
            state: helper.state,
            renderState: instantSearchInstance.renderState,
            templatesConfig: instantSearchInstance.templatesConfig,
            createURL: _this3.createURL,
            scopedResults: [],
            searchMetadata: {
              isSearchStalled: instantSearchInstance._isSearchStalled
            }
          });
        }
      });
      helper.on("change", function(event) {
        var state = event.state;
        var _uiState = event._uiState;
        localUiState = getLocalWidgetsUiState(localWidgets, {
          searchParameters: state,
          helper
        }, _uiState || {});
        if (!instantSearchInstance.onStateChange) {
          instantSearchInstance.onInternalStateChange();
        }
      });
      if (indexInitialResults) {
        instantSearchInstance.scheduleRender();
      }
    },
    render: function render(_ref5) {
      var _this4 = this;
      var instantSearchInstance = _ref5.instantSearchInstance;
      if (!this.getResults()) {
        return;
      }
      localWidgets.forEach(function(widget) {
        if (widget.getRenderState) {
          var renderState = widget.getRenderState(instantSearchInstance.renderState[_this4.getIndexId()] || {}, {
            helper: _this4.getHelper(),
            parent: _this4,
            instantSearchInstance,
            results: _this4.getResults(),
            scopedResults: _this4.getScopedResults(),
            state: _this4.getResults()._state,
            renderState: instantSearchInstance.renderState,
            templatesConfig: instantSearchInstance.templatesConfig,
            createURL: _this4.createURL,
            searchMetadata: {
              isSearchStalled: instantSearchInstance._isSearchStalled
            }
          });
          storeRenderState({
            renderState,
            instantSearchInstance,
            parent: _this4
          });
        }
      });
      localWidgets.forEach(function(widget) {
        if (widget.render) {
          widget.render({
            helper,
            parent: _this4,
            instantSearchInstance,
            results: _this4.getResults(),
            scopedResults: _this4.getScopedResults(),
            state: _this4.getResults()._state,
            renderState: instantSearchInstance.renderState,
            templatesConfig: instantSearchInstance.templatesConfig,
            createURL: _this4.createURL,
            searchMetadata: {
              isSearchStalled: instantSearchInstance._isSearchStalled
            }
          });
        }
      });
    },
    dispose: function dispose() {
      var _this5 = this;
      localWidgets.forEach(function(widget) {
        if (widget.dispose) {
          widget.dispose({
            helper,
            state: helper.state,
            parent: _this5
          });
        }
      });
      localInstantSearchInstance = null;
      localParent = null;
      helper.removeAllListeners();
      helper = null;
      derivedHelper.detach();
      derivedHelper = null;
    },
    getWidgetUiState: function getWidgetUiState(uiState) {
      return localWidgets.filter(isIndexWidget).reduce(function(previousUiState, innerIndex) {
        return innerIndex.getWidgetUiState(previousUiState);
      }, _objectSpread32(_objectSpread32({}, uiState), {}, _defineProperty33({}, this.getIndexId(), localUiState)));
    },
    getWidgetState: function getWidgetState(uiState) {
      true ? _warning(false, "The `getWidgetState` method is renamed `getWidgetUiState` and will no longer exist under that name in InstantSearch.js 5.x. Please use `getWidgetUiState` instead.") : void 0;
      return this.getWidgetUiState(uiState);
    },
    getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref6) {
      var uiState = _ref6.uiState;
      return getLocalWidgetsSearchParameters(localWidgets, {
        uiState,
        initialSearchParameters: searchParameters
      });
    },
    refreshUiState: function refreshUiState() {
      localUiState = getLocalWidgetsUiState(localWidgets, {
        searchParameters: this.getHelper().state,
        helper: this.getHelper()
      }, localUiState);
    }
  };
};
var index_default = index;
function storeRenderState(_ref7) {
  var renderState = _ref7.renderState, instantSearchInstance = _ref7.instantSearchInstance, parent = _ref7.parent;
  var parentIndexName = parent ? parent.getIndexId() : instantSearchInstance.mainIndex.getIndexId();
  instantSearchInstance.renderState = _objectSpread32(_objectSpread32({}, instantSearchInstance.renderState), {}, _defineProperty33({}, parentIndexName, _objectSpread32(_objectSpread32({}, instantSearchInstance.renderState[parentIndexName]), renderState)));
}

// node_modules/vue-instantsearch/vue3/es/src/components/Index.js
var Index_default = { name: "AisIndex", mixins: [t({ name: "Index" }), n3({ connector: function() {
  return index_default;
} }, { $$widgetType: "ais.index" })], provide: function() {
  var e7 = this;
  return { $_ais_getParentIndex: function() {
    return e7.widget;
  } };
}, props: { indexName: { type: String, required: true }, indexId: { type: String, required: false } }, render: n(function(e7) {
  return e7("div", {}, p(this));
}), computed: { widgetParams: function() {
  return { indexName: this.indexName, indexId: this.indexId };
} } };

// node_modules/instantsearch.js/es/lib/InstantSearch.js
var import_algoliasearch_helper4 = __toESM(require_algoliasearch_helper2(), 1);
var import_events = __toESM(require_events(), 1);

// node_modules/instantsearch.js/es/lib/version.js
var version_default = "4.46.3";

// node_modules/instantsearch.js/es/lib/suit.js
var NAMESPACE = "ais";
var component = function component2(componentName) {
  return function() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, descendantName = _ref.descendantName, modifierName = _ref.modifierName;
    var descendent = descendantName ? "-".concat(descendantName) : "";
    var modifier = modifierName ? "--".concat(modifierName) : "";
    return "".concat(NAMESPACE, "-").concat(componentName).concat(descendent).concat(modifier);
  };
};

// node_modules/instantsearch.js/es/helpers/highlight.js
var suit = component("Highlight");
function highlight(_ref) {
  var attribute = _ref.attribute, _ref$highlightedTagNa = _ref.highlightedTagName, highlightedTagName = _ref$highlightedTagNa === void 0 ? "mark" : _ref$highlightedTagNa, hit = _ref.hit, _ref$cssClasses = _ref.cssClasses, cssClasses = _ref$cssClasses === void 0 ? {} : _ref$cssClasses;
  var highlightAttributeResult = getPropertyByPath(hit._highlightResult, attribute);
  true ? _warning(highlightAttributeResult, 'Could not enable highlight for "'.concat(attribute, '", will display an empty string.\nPlease check whether this attribute exists and is either searchable or specified in `attributesToHighlight`.\n\nSee: https://alg.li/highlighting\n')) : void 0;
  var _ref2 = highlightAttributeResult || {}, _ref2$value = _ref2.value, attributeValue = _ref2$value === void 0 ? "" : _ref2$value;
  var className = suit({
    descendantName: "highlighted"
  }) + (cssClasses.highlighted ? " ".concat(cssClasses.highlighted) : "");
  return attributeValue.replace(new RegExp(TAG_REPLACEMENT.highlightPreTag, "g"), "<".concat(highlightedTagName, ' class="').concat(className, '">')).replace(new RegExp(TAG_REPLACEMENT.highlightPostTag, "g"), "</".concat(highlightedTagName, ">"));
}

// node_modules/instantsearch.js/es/helpers/reverseHighlight.js
var suit2 = component("ReverseHighlight");
function reverseHighlight(_ref) {
  var attribute = _ref.attribute, _ref$highlightedTagNa = _ref.highlightedTagName, highlightedTagName = _ref$highlightedTagNa === void 0 ? "mark" : _ref$highlightedTagNa, hit = _ref.hit, _ref$cssClasses = _ref.cssClasses, cssClasses = _ref$cssClasses === void 0 ? {} : _ref$cssClasses;
  var highlightAttributeResult = getPropertyByPath(hit._highlightResult, attribute);
  true ? _warning(highlightAttributeResult, 'Could not enable reverse highlight for "'.concat(attribute, '", will display an empty string.\nPlease check whether this attribute exists and is either searchable or specified in `attributesToHighlight`.\n\nSee: https://alg.li/highlighting\n')) : void 0;
  var _ref2 = highlightAttributeResult || {}, _ref2$value = _ref2.value, attributeValue = _ref2$value === void 0 ? "" : _ref2$value;
  var className = suit2({
    descendantName: "highlighted"
  }) + (cssClasses.highlighted ? " ".concat(cssClasses.highlighted) : "");
  var reverseHighlightedValue = concatHighlightedParts(reverseHighlightedParts(getHighlightedParts(attributeValue)));
  return reverseHighlightedValue.replace(new RegExp(TAG_REPLACEMENT.highlightPreTag, "g"), "<".concat(highlightedTagName, ' class="').concat(className, '">')).replace(new RegExp(TAG_REPLACEMENT.highlightPostTag, "g"), "</".concat(highlightedTagName, ">"));
}

// node_modules/instantsearch.js/es/helpers/snippet.js
var suit3 = component("Snippet");
function snippet(_ref) {
  var attribute = _ref.attribute, _ref$highlightedTagNa = _ref.highlightedTagName, highlightedTagName = _ref$highlightedTagNa === void 0 ? "mark" : _ref$highlightedTagNa, hit = _ref.hit, _ref$cssClasses = _ref.cssClasses, cssClasses = _ref$cssClasses === void 0 ? {} : _ref$cssClasses;
  var snippetAttributeResult = getPropertyByPath(hit._snippetResult, attribute);
  true ? _warning(snippetAttributeResult, 'Could not enable snippet for "'.concat(attribute, '", will display an empty string.\nPlease check whether this attribute exists and is specified in `attributesToSnippet`.\n\nSee: https://alg.li/highlighting\n')) : void 0;
  var _ref2 = snippetAttributeResult || {}, _ref2$value = _ref2.value, attributeValue = _ref2$value === void 0 ? "" : _ref2$value;
  var className = suit3({
    descendantName: "highlighted"
  }) + (cssClasses.highlighted ? " ".concat(cssClasses.highlighted) : "");
  return attributeValue.replace(new RegExp(TAG_REPLACEMENT.highlightPreTag, "g"), "<".concat(highlightedTagName, ' class="').concat(className, '">')).replace(new RegExp(TAG_REPLACEMENT.highlightPostTag, "g"), "</".concat(highlightedTagName, ">"));
}

// node_modules/instantsearch.js/es/helpers/reverseSnippet.js
var suit4 = component("ReverseSnippet");
function reverseSnippet(_ref) {
  var attribute = _ref.attribute, _ref$highlightedTagNa = _ref.highlightedTagName, highlightedTagName = _ref$highlightedTagNa === void 0 ? "mark" : _ref$highlightedTagNa, hit = _ref.hit, _ref$cssClasses = _ref.cssClasses, cssClasses = _ref$cssClasses === void 0 ? {} : _ref$cssClasses;
  var snippetAttributeResult = getPropertyByPath(hit._snippetResult, attribute);
  true ? _warning(snippetAttributeResult, 'Could not enable reverse snippet for "'.concat(attribute, '", will display an empty string.\nPlease check whether this attribute exists and is specified in `attributesToSnippet`.\n\nSee: https://alg.li/highlighting\n')) : void 0;
  var _ref2 = snippetAttributeResult || {}, _ref2$value = _ref2.value, attributeValue = _ref2$value === void 0 ? "" : _ref2$value;
  var className = suit4({
    descendantName: "highlighted"
  }) + (cssClasses.highlighted ? " ".concat(cssClasses.highlighted) : "");
  var reverseHighlightedValue = concatHighlightedParts(reverseHighlightedParts(getHighlightedParts(attributeValue)));
  return reverseHighlightedValue.replace(new RegExp(TAG_REPLACEMENT.highlightPreTag, "g"), "<".concat(highlightedTagName, ' class="').concat(className, '">')).replace(new RegExp(TAG_REPLACEMENT.highlightPostTag, "g"), "</".concat(highlightedTagName, ">"));
}

// node_modules/instantsearch.js/es/helpers/get-insights-anonymous-user-token.js
var ANONYMOUS_TOKEN_COOKIE_KEY = "_ALGOLIA";
function getCookie(name) {
  var prefix = "".concat(name, "=");
  var cookies = document.cookie.split(";");
  for (var i4 = 0; i4 < cookies.length; i4++) {
    var cookie = cookies[i4];
    while (cookie.charAt(0) === " ") {
      cookie = cookie.substring(1);
    }
    if (cookie.indexOf(prefix) === 0) {
      return cookie.substring(prefix.length, cookie.length);
    }
  }
  return void 0;
}
function getInsightsAnonymousUserTokenInternal() {
  return getCookie(ANONYMOUS_TOKEN_COOKIE_KEY);
}
function getInsightsAnonymousUserToken() {
  true ? _warning(false, "`getInsightsAnonymousUserToken` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\n\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/") : void 0;
  return getInsightsAnonymousUserTokenInternal();
}

// node_modules/instantsearch.js/es/lib/formatNumber.js
function formatNumber(value, numberLocale) {
  return value.toLocaleString(numberLocale);
}

// node_modules/instantsearch.js/es/lib/createHelpers.js
function ownKeys33(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread33(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys33(Object(source), true).forEach(function(key) {
        _defineProperty34(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys33(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty34(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function hoganHelpers(_ref) {
  var numberLocale = _ref.numberLocale;
  return {
    formatNumber: function formatNumber2(value, render) {
      return formatNumber(Number(render(value)), numberLocale);
    },
    highlight: function highlight2(options, render) {
      try {
        var highlightOptions = JSON.parse(options);
        return render(highlight(_objectSpread33(_objectSpread33({}, highlightOptions), {}, {
          hit: this
        })));
      } catch (error) {
        throw new Error('\nThe highlight helper expects a JSON object of the format:\n{ "attribute": "name", "highlightedTagName": "mark" }');
      }
    },
    reverseHighlight: function reverseHighlight2(options, render) {
      try {
        var reverseHighlightOptions = JSON.parse(options);
        return render(reverseHighlight(_objectSpread33(_objectSpread33({}, reverseHighlightOptions), {}, {
          hit: this
        })));
      } catch (error) {
        throw new Error('\n  The reverseHighlight helper expects a JSON object of the format:\n  { "attribute": "name", "highlightedTagName": "mark" }');
      }
    },
    snippet: function snippet2(options, render) {
      try {
        var snippetOptions = JSON.parse(options);
        return render(snippet(_objectSpread33(_objectSpread33({}, snippetOptions), {}, {
          hit: this
        })));
      } catch (error) {
        throw new Error('\nThe snippet helper expects a JSON object of the format:\n{ "attribute": "name", "highlightedTagName": "mark" }');
      }
    },
    reverseSnippet: function reverseSnippet2(options, render) {
      try {
        var reverseSnippetOptions = JSON.parse(options);
        return render(reverseSnippet(_objectSpread33(_objectSpread33({}, reverseSnippetOptions), {}, {
          hit: this
        })));
      } catch (error) {
        throw new Error('\n  The reverseSnippet helper expects a JSON object of the format:\n  { "attribute": "name", "highlightedTagName": "mark" }');
      }
    },
    insights: function insights2(options, render) {
      try {
        var _JSON$parse = JSON.parse(options), method = _JSON$parse.method, payload = _JSON$parse.payload;
        return render(insights(method, _objectSpread33({
          objectIDs: [this.objectID]
        }, payload)));
      } catch (error) {
        throw new Error('\nThe insights helper expects a JSON object of the format:\n{ "method": "method-name", "payload": { "eventName": "name of the event" } }');
      }
    }
  };
}

// node_modules/instantsearch.js/es/lib/stateMappings/simple.js
function ownKeys34(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread34(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys34(Object(source), true).forEach(function(key) {
        _defineProperty35(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys34(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty35(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties7(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose7(source, excluded);
  var key, i4;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
      key = sourceSymbolKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function getIndexStateWithoutConfigure(uiState) {
  var configure = uiState.configure, trackedUiState = _objectWithoutProperties7(uiState, ["configure"]);
  return trackedUiState;
}
function simpleStateMapping() {
  return {
    stateToRoute: function stateToRoute(uiState) {
      return Object.keys(uiState).reduce(function(state, indexId) {
        return _objectSpread34(_objectSpread34({}, state), {}, _defineProperty35({}, indexId, getIndexStateWithoutConfigure(uiState[indexId])));
      }, {});
    },
    routeToState: function routeToState() {
      var routeState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      return Object.keys(routeState).reduce(function(state, indexId) {
        return _objectSpread34(_objectSpread34({}, state), {}, _defineProperty35({}, indexId, getIndexStateWithoutConfigure(routeState[indexId])));
      }, {});
    }
  };
}

// node_modules/instantsearch.js/es/lib/routers/history.js
var import_qs = __toESM(require_lib(), 1);
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i4 = 0; i4 < props.length; i4++) {
    var descriptor = props[i4];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  return Constructor;
}
function _defineProperty36(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var setWindowTitle = function setWindowTitle2(title) {
  if (title) {
    window.document.title = title;
  }
};
var BrowserHistory = function() {
  function BrowserHistory2(_ref) {
    var _this = this;
    var windowTitle = _ref.windowTitle, _ref$writeDelay = _ref.writeDelay, writeDelay = _ref$writeDelay === void 0 ? 400 : _ref$writeDelay, createURL = _ref.createURL, parseURL = _ref.parseURL, getLocation = _ref.getLocation;
    _classCallCheck2(this, BrowserHistory2);
    _defineProperty36(this, "windowTitle", void 0);
    _defineProperty36(this, "writeDelay", void 0);
    _defineProperty36(this, "_createURL", void 0);
    _defineProperty36(this, "parseURL", void 0);
    _defineProperty36(this, "getLocation", void 0);
    _defineProperty36(this, "writeTimer", void 0);
    _defineProperty36(this, "inPopState", false);
    _defineProperty36(this, "isDisposed", false);
    _defineProperty36(this, "latestAcknowledgedHistory", 0);
    this.windowTitle = windowTitle;
    this.writeTimer = void 0;
    this.writeDelay = writeDelay;
    this._createURL = createURL;
    this.parseURL = parseURL;
    this.getLocation = getLocation;
    safelyRunOnBrowser(function(_ref2) {
      var window2 = _ref2.window;
      var title = _this.windowTitle && _this.windowTitle(_this.read());
      setWindowTitle(title);
      _this.latestAcknowledgedHistory = window2.history.length;
    });
  }
  _createClass2(BrowserHistory2, [{
    key: "read",
    value: function read() {
      return this.parseURL({
        qsModule: import_qs.default,
        location: this.getLocation()
      });
    }
  }, {
    key: "write",
    value: function write(routeState) {
      var _this2 = this;
      safelyRunOnBrowser(function(_ref3) {
        var window2 = _ref3.window;
        var url = _this2.createURL(routeState);
        var title = _this2.windowTitle && _this2.windowTitle(routeState);
        if (_this2.writeTimer) {
          clearTimeout(_this2.writeTimer);
        }
        _this2.writeTimer = setTimeout(function() {
          setWindowTitle(title);
          if (_this2.shouldWrite(url)) {
            window2.history.pushState(routeState, title || "", url);
            _this2.latestAcknowledgedHistory = window2.history.length;
          }
          _this2.inPopState = false;
          _this2.writeTimer = void 0;
        }, _this2.writeDelay);
      });
    }
  }, {
    key: "onUpdate",
    value: function onUpdate(callback) {
      var _this3 = this;
      this._onPopState = function(event) {
        if (_this3.writeTimer) {
          clearTimeout(_this3.writeTimer);
          _this3.writeTimer = void 0;
        }
        _this3.inPopState = true;
        var routeState = event.state;
        if (!routeState) {
          callback(_this3.read());
        } else {
          callback(routeState);
        }
      };
      safelyRunOnBrowser(function(_ref4) {
        var window2 = _ref4.window;
        window2.addEventListener("popstate", _this3._onPopState);
      });
    }
  }, {
    key: "createURL",
    value: function createURL(routeState) {
      return this._createURL({
        qsModule: import_qs.default,
        routeState,
        location: this.getLocation()
      });
    }
  }, {
    key: "dispose",
    value: function dispose() {
      var _this4 = this;
      this.isDisposed = true;
      safelyRunOnBrowser(function(_ref5) {
        var window2 = _ref5.window;
        if (_this4._onPopState) {
          window2.removeEventListener("popstate", _this4._onPopState);
        }
      });
      if (this.writeTimer) {
        clearTimeout(this.writeTimer);
      }
      this.write({});
    }
  }, {
    key: "shouldWrite",
    value: function shouldWrite(url) {
      var _this5 = this;
      return safelyRunOnBrowser(function(_ref6) {
        var window2 = _ref6.window;
        var lastPushWasByISAfterDispose = !(_this5.isDisposed && _this5.latestAcknowledgedHistory !== window2.history.length);
        return !_this5.inPopState && lastPushWasByISAfterDispose && url !== window2.location.href;
      });
    }
  }]);
  return BrowserHistory2;
}();
function historyRouter() {
  var _ref7 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref7$createURL = _ref7.createURL, createURL = _ref7$createURL === void 0 ? function(_ref8) {
    var qsModule = _ref8.qsModule, routeState = _ref8.routeState, location2 = _ref8.location;
    var protocol = location2.protocol, hostname = location2.hostname, _location$port = location2.port, port = _location$port === void 0 ? "" : _location$port, pathname = location2.pathname, hash = location2.hash;
    var queryString = qsModule.stringify(routeState);
    var portWithPrefix = port === "" ? "" : ":".concat(port);
    if (!queryString) {
      return "".concat(protocol, "//").concat(hostname).concat(portWithPrefix).concat(pathname).concat(hash);
    }
    return "".concat(protocol, "//").concat(hostname).concat(portWithPrefix).concat(pathname, "?").concat(queryString).concat(hash);
  } : _ref7$createURL, _ref7$parseURL = _ref7.parseURL, parseURL = _ref7$parseURL === void 0 ? function(_ref9) {
    var qsModule = _ref9.qsModule, location2 = _ref9.location;
    return qsModule.parse(location2.search.slice(1), {
      arrayLimit: 99
    });
  } : _ref7$parseURL, _ref7$writeDelay = _ref7.writeDelay, writeDelay = _ref7$writeDelay === void 0 ? 400 : _ref7$writeDelay, windowTitle = _ref7.windowTitle, _ref7$getLocation = _ref7.getLocation, getLocation = _ref7$getLocation === void 0 ? function() {
    return safelyRunOnBrowser(function(_ref10) {
      var window2 = _ref10.window;
      return window2.location;
    }, {
      fallback: function fallback() {
        throw new Error("You need to provide `getLocation` to the `history` router in environments where `window` does not exist.");
      }
    });
  } : _ref7$getLocation;
  return new BrowserHistory({
    createURL,
    parseURL,
    writeDelay,
    windowTitle,
    getLocation
  });
}

// node_modules/instantsearch.js/es/middlewares/createRouterMiddleware.js
function ownKeys35(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread35(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys35(Object(source), true).forEach(function(key) {
        _defineProperty37(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys35(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty37(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var createRouterMiddleware = function createRouterMiddleware2() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _props$router = props.router, router = _props$router === void 0 ? historyRouter() : _props$router, _props$stateMapping = props.stateMapping, stateMapping = _props$stateMapping === void 0 ? simpleStateMapping() : _props$stateMapping;
  return function(_ref) {
    var instantSearchInstance = _ref.instantSearchInstance;
    function topLevelCreateURL(nextState) {
      var uiState = Object.keys(nextState).reduce(function(acc, indexId) {
        return _objectSpread35(_objectSpread35({}, acc), {}, _defineProperty37({}, indexId, nextState[indexId]));
      }, instantSearchInstance.mainIndex.getWidgetUiState({}));
      var route = stateMapping.stateToRoute(uiState);
      return router.createURL(route);
    }
    instantSearchInstance._createURL = topLevelCreateURL;
    var lastRouteState = void 0;
    var initialUiState = instantSearchInstance._initialUiState;
    return {
      onStateChange: function onStateChange(_ref2) {
        var uiState = _ref2.uiState;
        var routeState = stateMapping.stateToRoute(uiState);
        if (lastRouteState === void 0 || !isEqual(lastRouteState, routeState)) {
          router.write(routeState);
          lastRouteState = routeState;
        }
      },
      subscribe: function subscribe() {
        instantSearchInstance._initialUiState = _objectSpread35(_objectSpread35({}, initialUiState), stateMapping.routeToState(router.read()));
        router.onUpdate(function(route) {
          instantSearchInstance.setUiState(stateMapping.routeToState(route));
        });
      },
      started: function started() {
      },
      unsubscribe: function unsubscribe() {
        router.dispose();
      }
    };
  };
};

// node_modules/instantsearch.js/es/middlewares/createMetadataMiddleware.js
function extractPayload(widgets, instantSearchInstance, payload) {
  var parent = instantSearchInstance.mainIndex;
  var initOptions = {
    instantSearchInstance,
    parent,
    scopedResults: [],
    state: parent.getHelper().state,
    helper: parent.getHelper(),
    createURL: parent.createURL,
    uiState: instantSearchInstance._initialUiState,
    renderState: instantSearchInstance.renderState,
    templatesConfig: instantSearchInstance.templatesConfig,
    searchMetadata: {
      isSearchStalled: instantSearchInstance._isSearchStalled
    }
  };
  widgets.forEach(function(widget) {
    var widgetParams = {};
    if (widget.getWidgetRenderState) {
      var renderState = widget.getWidgetRenderState(initOptions);
      if (renderState && renderState.widgetParams) {
        widgetParams = renderState.widgetParams;
      }
    }
    var params = Object.keys(widgetParams).filter(function(key) {
      return widgetParams[key] !== void 0;
    });
    payload.widgets.push({
      type: widget.$$type,
      widgetType: widget.$$widgetType,
      params
    });
    if (widget.$$type === "ais.index") {
      extractPayload(widget.getWidgets(), instantSearchInstance, payload);
    }
  });
}
function isMetadataEnabled() {
  return safelyRunOnBrowser(function(_ref) {
    var _window$navigator, _window$navigator$use;
    var window2 = _ref.window;
    return ((_window$navigator = window2.navigator) === null || _window$navigator === void 0 ? void 0 : (_window$navigator$use = _window$navigator.userAgent) === null || _window$navigator$use === void 0 ? void 0 : _window$navigator$use.indexOf("Algolia Crawler")) > -1;
  }, {
    fallback: function fallback() {
      return false;
    }
  });
}
function createMetadataMiddleware() {
  return function(_ref2) {
    var instantSearchInstance = _ref2.instantSearchInstance;
    var payload = {
      widgets: []
    };
    var payloadContainer = document.createElement("meta");
    var refNode = document.querySelector("head");
    payloadContainer.name = "instantsearch:widgets";
    return {
      onStateChange: function onStateChange() {
      },
      subscribe: function subscribe() {
        setTimeout(function() {
          var client = instantSearchInstance.client;
          payload.ua = client.transporter && client.transporter.userAgent ? client.transporter.userAgent.value : client._ua;
          extractPayload(instantSearchInstance.mainIndex.getWidgets(), instantSearchInstance, payload);
          payloadContainer.content = JSON.stringify(payload);
          refNode.appendChild(payloadContainer);
        }, 0);
      },
      started: function started() {
      },
      unsubscribe: function unsubscribe() {
        payloadContainer.remove();
      }
    };
  };
}

// node_modules/instantsearch.js/es/lib/InstantSearch.js
function _typeof6(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof6 = function _typeof7(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof6 = function _typeof7(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof6(obj);
}
function ownKeys36(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread36(target) {
  for (var i4 = 1; i4 < arguments.length; i4++) {
    var source = arguments[i4] != null ? arguments[i4] : {};
    if (i4 % 2) {
      ownKeys36(Object(source), true).forEach(function(key) {
        _defineProperty38(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys36(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i4 = 0; i4 < props.length; i4++) {
    var descriptor = props[i4];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o7, p5) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o8, p6) {
    o8.__proto__ = p6;
    return o8;
  };
  return _setPrototypeOf(o7, p5);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof6(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e7) {
    return false;
  }
}
function _getPrototypeOf(o7) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o8) {
    return o8.__proto__ || Object.getPrototypeOf(o8);
  };
  return _getPrototypeOf(o7);
}
function _defineProperty38(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage28 = createDocumentationMessageGenerator({
  name: "instantsearch"
});
function defaultCreateURL() {
  return "#";
}
var InstantSearch = function(_EventEmitter) {
  _inherits(InstantSearch2, _EventEmitter);
  var _super = _createSuper(InstantSearch2);
  function InstantSearch2(options) {
    var _this;
    _classCallCheck3(this, InstantSearch2);
    _this = _super.call(this);
    _defineProperty38(_assertThisInitialized(_this), "client", void 0);
    _defineProperty38(_assertThisInitialized(_this), "indexName", void 0);
    _defineProperty38(_assertThisInitialized(_this), "insightsClient", void 0);
    _defineProperty38(_assertThisInitialized(_this), "onStateChange", null);
    _defineProperty38(_assertThisInitialized(_this), "helper", void 0);
    _defineProperty38(_assertThisInitialized(_this), "mainHelper", void 0);
    _defineProperty38(_assertThisInitialized(_this), "mainIndex", void 0);
    _defineProperty38(_assertThisInitialized(_this), "started", void 0);
    _defineProperty38(_assertThisInitialized(_this), "templatesConfig", void 0);
    _defineProperty38(_assertThisInitialized(_this), "renderState", {});
    _defineProperty38(_assertThisInitialized(_this), "_stalledSearchDelay", void 0);
    _defineProperty38(_assertThisInitialized(_this), "_searchStalledTimer", void 0);
    _defineProperty38(_assertThisInitialized(_this), "_isSearchStalled", void 0);
    _defineProperty38(_assertThisInitialized(_this), "_initialUiState", void 0);
    _defineProperty38(_assertThisInitialized(_this), "_initialResults", void 0);
    _defineProperty38(_assertThisInitialized(_this), "_createURL", void 0);
    _defineProperty38(_assertThisInitialized(_this), "_searchFunction", void 0);
    _defineProperty38(_assertThisInitialized(_this), "_mainHelperSearch", void 0);
    _defineProperty38(_assertThisInitialized(_this), "middleware", []);
    _defineProperty38(_assertThisInitialized(_this), "sendEventToInsights", void 0);
    _defineProperty38(_assertThisInitialized(_this), "scheduleSearch", defer(function() {
      if (_this.started) {
        _this.mainHelper.search();
      }
    }));
    _defineProperty38(_assertThisInitialized(_this), "scheduleRender", defer(function() {
      if (!_this.mainHelper.hasPendingRequests()) {
        clearTimeout(_this._searchStalledTimer);
        _this._searchStalledTimer = null;
        _this._isSearchStalled = false;
      }
      _this.mainIndex.render({
        instantSearchInstance: _assertThisInitialized(_this)
      });
      _this.emit("render");
    }));
    _defineProperty38(_assertThisInitialized(_this), "onInternalStateChange", defer(function() {
      var nextUiState = _this.mainIndex.getWidgetUiState({});
      _this.middleware.forEach(function(_ref) {
        var instance = _ref.instance;
        instance.onStateChange({
          uiState: nextUiState
        });
      });
    }));
    var _options$indexName = options.indexName, indexName = _options$indexName === void 0 ? null : _options$indexName, numberLocale = options.numberLocale, _options$initialUiSta = options.initialUiState, initialUiState = _options$initialUiSta === void 0 ? {} : _options$initialUiSta, _options$routing = options.routing, routing = _options$routing === void 0 ? null : _options$routing, searchFunction = options.searchFunction, _options$stalledSearc = options.stalledSearchDelay, stalledSearchDelay = _options$stalledSearc === void 0 ? 200 : _options$stalledSearc, _options$searchClient = options.searchClient, searchClient = _options$searchClient === void 0 ? null : _options$searchClient, _options$insightsClie = options.insightsClient, insightsClient = _options$insightsClie === void 0 ? null : _options$insightsClie, _options$onStateChang = options.onStateChange, onStateChange = _options$onStateChang === void 0 ? null : _options$onStateChang;
    if (indexName === null) {
      throw new Error(withUsage28("The `indexName` option is required."));
    }
    if (searchClient === null) {
      throw new Error(withUsage28("The `searchClient` option is required."));
    }
    if (typeof searchClient.search !== "function") {
      throw new Error("The `searchClient` must implement a `search` method.\n\nSee: https://www.algolia.com/doc/guides/building-search-ui/going-further/backend-search/in-depth/backend-instantsearch/js/");
    }
    if (typeof searchClient.addAlgoliaAgent === "function") {
      searchClient.addAlgoliaAgent("instantsearch.js (".concat(version_default, ")"));
    }
    true ? _warning(insightsClient === null, "`insightsClient` property has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\n\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/") : void 0;
    if (insightsClient && typeof insightsClient !== "function") {
      throw new Error(withUsage28("The `insightsClient` option should be a function."));
    }
    true ? _warning(!options.searchParameters, "The `searchParameters` option is deprecated and will not be supported in InstantSearch.js 4.x.\n\nYou can replace it with the `configure` widget:\n\n```\nsearch.addWidgets([\n  configure(".concat(JSON.stringify(options.searchParameters, null, 2), ")\n]);\n```\n\nSee ").concat(createDocumentationLink({
      name: "configure"
    }))) : void 0;
    _this.client = searchClient;
    _this.insightsClient = insightsClient;
    _this.indexName = indexName;
    _this.helper = null;
    _this.mainHelper = null;
    _this.mainIndex = index_default({
      indexName
    });
    _this.onStateChange = onStateChange;
    _this.started = false;
    _this.templatesConfig = {
      helpers: hoganHelpers({
        numberLocale
      }),
      compileOptions: {}
    };
    _this._stalledSearchDelay = stalledSearchDelay;
    _this._searchStalledTimer = null;
    _this._isSearchStalled = false;
    _this._createURL = defaultCreateURL;
    _this._initialUiState = initialUiState;
    _this._initialResults = null;
    if (searchFunction) {
      _this._searchFunction = searchFunction;
    }
    _this.sendEventToInsights = noop;
    if (routing) {
      var routerOptions = typeof routing === "boolean" ? void 0 : routing;
      _this.use(createRouterMiddleware(routerOptions));
    }
    if (isMetadataEnabled()) {
      _this.use(createMetadataMiddleware());
    }
    return _this;
  }
  _createClass3(InstantSearch2, [{
    key: "use",
    value: function use() {
      var _this2 = this;
      for (var _len = arguments.length, middleware = new Array(_len), _key = 0; _key < _len; _key++) {
        middleware[_key] = arguments[_key];
      }
      var newMiddlewareList = middleware.map(function(fn) {
        var newMiddleware = _objectSpread36({
          subscribe: noop,
          started: noop,
          unsubscribe: noop,
          onStateChange: noop
        }, fn({
          instantSearchInstance: _this2
        }));
        _this2.middleware.push({
          creator: fn,
          instance: newMiddleware
        });
        return newMiddleware;
      });
      if (this.started) {
        newMiddlewareList.forEach(function(m6) {
          m6.subscribe();
          m6.started();
        });
      }
      return this;
    }
  }, {
    key: "unuse",
    value: function unuse() {
      for (var _len2 = arguments.length, middlewareToUnuse = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        middlewareToUnuse[_key2] = arguments[_key2];
      }
      this.middleware.filter(function(m6) {
        return middlewareToUnuse.includes(m6.creator);
      }).forEach(function(m6) {
        return m6.instance.unsubscribe();
      });
      this.middleware = this.middleware.filter(function(m6) {
        return !middlewareToUnuse.includes(m6.creator);
      });
      return this;
    }
  }, {
    key: "EXPERIMENTAL_use",
    value: function EXPERIMENTAL_use() {
      true ? _warning(false, "The middleware API is now considered stable, so we recommend replacing `EXPERIMENTAL_use` with `use` before upgrading to the next major version.") : void 0;
      return this.use.apply(this, arguments);
    }
  }, {
    key: "addWidget",
    value: function addWidget(widget) {
      true ? _warning(false, "addWidget will still be supported in 4.x releases, but not further. It is replaced by `addWidgets([widget])`") : void 0;
      return this.addWidgets([widget]);
    }
  }, {
    key: "addWidgets",
    value: function addWidgets(widgets) {
      if (!Array.isArray(widgets)) {
        throw new Error(withUsage28("The `addWidgets` method expects an array of widgets. Please use `addWidget`."));
      }
      if (widgets.some(function(widget) {
        return typeof widget.init !== "function" && typeof widget.render !== "function";
      })) {
        throw new Error(withUsage28("The widget definition expects a `render` and/or an `init` method."));
      }
      this.mainIndex.addWidgets(widgets);
      return this;
    }
  }, {
    key: "removeWidget",
    value: function removeWidget(widget) {
      true ? _warning(false, "removeWidget will still be supported in 4.x releases, but not further. It is replaced by `removeWidgets([widget])`") : void 0;
      return this.removeWidgets([widget]);
    }
  }, {
    key: "removeWidgets",
    value: function removeWidgets(widgets) {
      if (!Array.isArray(widgets)) {
        throw new Error(withUsage28("The `removeWidgets` method expects an array of widgets. Please use `removeWidget`."));
      }
      if (widgets.some(function(widget) {
        return typeof widget.dispose !== "function";
      })) {
        throw new Error(withUsage28("The widget definition expects a `dispose` method."));
      }
      this.mainIndex.removeWidgets(widgets);
      return this;
    }
  }, {
    key: "start",
    value: function start() {
      var _this3 = this;
      if (this.started) {
        throw new Error(withUsage28("The `start` method has already been called once."));
      }
      var mainHelper = this.mainHelper || (0, import_algoliasearch_helper4.default)(this.client, this.indexName);
      mainHelper.search = function() {
        return mainHelper.searchOnlyWithDerivedHelpers();
      };
      if (this._searchFunction) {
        var fakeClient = {
          search: function search() {
            return new Promise(noop);
          }
        };
        this._mainHelperSearch = mainHelper.search.bind(mainHelper);
        mainHelper.search = function() {
          var mainIndexHelper = _this3.mainIndex.getHelper();
          var searchFunctionHelper = (0, import_algoliasearch_helper4.default)(fakeClient, mainIndexHelper.state.index, mainIndexHelper.state);
          searchFunctionHelper.once("search", function(_ref2) {
            var state = _ref2.state;
            mainIndexHelper.overrideStateWithoutTriggeringChangeEvent(state);
            _this3._mainHelperSearch();
          });
          searchFunctionHelper.on("change", function(_ref3) {
            var state = _ref3.state;
            mainIndexHelper.setState(state);
          });
          _this3._searchFunction(searchFunctionHelper);
          return mainHelper;
        };
      }
      mainHelper.on("error", function(_ref4) {
        var error = _ref4.error;
        if (!(error instanceof Error)) {
          var err = error;
          error = Object.keys(err).reduce(function(acc, key) {
            acc[key] = err[key];
            return acc;
          }, new Error(err.message));
        }
        error.error = error;
        _this3.emit("error", error);
      });
      this.mainHelper = mainHelper;
      this.middleware.forEach(function(_ref5) {
        var instance = _ref5.instance;
        instance.subscribe();
      });
      this.mainIndex.init({
        instantSearchInstance: this,
        parent: null,
        uiState: this._initialUiState
      });
      if (this._initialResults) {
        var originalScheduleSearch = this.scheduleSearch;
        this.scheduleSearch = defer(noop);
        defer(function() {
          _this3.scheduleSearch = originalScheduleSearch;
        })();
      } else if (this.mainIndex.getWidgets().length > 0) {
        this.scheduleSearch();
      }
      this.helper = this.mainIndex.getHelper();
      this.started = true;
      this.middleware.forEach(function(_ref6) {
        var instance = _ref6.instance;
        instance.started();
      });
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.scheduleSearch.cancel();
      this.scheduleRender.cancel();
      clearTimeout(this._searchStalledTimer);
      this.removeWidgets(this.mainIndex.getWidgets());
      this.mainIndex.dispose();
      this.started = false;
      this.removeAllListeners();
      this.mainHelper.removeAllListeners();
      this.mainHelper = null;
      this.helper = null;
      this.middleware.forEach(function(_ref7) {
        var instance = _ref7.instance;
        instance.unsubscribe();
      });
    }
  }, {
    key: "scheduleStalledRender",
    value: function scheduleStalledRender() {
      var _this4 = this;
      if (!this._searchStalledTimer) {
        this._searchStalledTimer = setTimeout(function() {
          _this4._isSearchStalled = true;
          _this4.scheduleRender();
        }, this._stalledSearchDelay);
      }
    }
  }, {
    key: "setUiState",
    value: function setUiState(uiState) {
      var _this5 = this;
      var callOnStateChange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (!this.mainHelper) {
        throw new Error(withUsage28("The `start` method needs to be called before `setUiState`."));
      }
      this.mainIndex.refreshUiState();
      var nextUiState = typeof uiState === "function" ? uiState(this.mainIndex.getWidgetUiState({})) : uiState;
      if (this.onStateChange && callOnStateChange) {
        this.onStateChange({
          uiState: nextUiState,
          setUiState: function setUiState2(finalUiState) {
            setIndexHelperState(typeof finalUiState === "function" ? finalUiState(nextUiState) : finalUiState, _this5.mainIndex);
            _this5.scheduleSearch();
            _this5.onInternalStateChange();
          }
        });
      } else {
        setIndexHelperState(nextUiState, this.mainIndex);
        this.scheduleSearch();
        this.onInternalStateChange();
      }
    }
  }, {
    key: "getUiState",
    value: function getUiState() {
      if (this.started) {
        this.mainIndex.refreshUiState();
      }
      return this.mainIndex.getWidgetUiState({});
    }
  }, {
    key: "createURL",
    value: function createURL() {
      var nextState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (!this.started) {
        throw new Error(withUsage28("The `start` method needs to be called before `createURL`."));
      }
      return this._createURL(nextState);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      if (!this.mainHelper) {
        throw new Error(withUsage28("The `start` method needs to be called before `refresh`."));
      }
      this.mainHelper.clearCache().search();
    }
  }]);
  return InstantSearch2;
}(import_events.default);
var InstantSearch_default = InstantSearch;

// node_modules/instantsearch.js/es/lib/infiniteHitsCache/sessionStorage.js
function _objectWithoutProperties8(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose8(source, excluded);
  var key, i4;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i4 = 0; i4 < sourceSymbolKeys.length; i4++) {
      key = sourceSymbolKeys[i4];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i4;
  for (i4 = 0; i4 < sourceKeys.length; i4++) {
    key = sourceKeys[i4];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function getStateWithoutPage2(state) {
  var _ref = state || {}, page = _ref.page, rest = _objectWithoutProperties8(_ref, ["page"]);
  return rest;
}
var KEY = "ais.infiniteHits";
function createInfiniteHitsSessionStorageCache() {
  return {
    read: function read(_ref2) {
      var state = _ref2.state;
      var sessionStorage = safelyRunOnBrowser(function(_ref3) {
        var window2 = _ref3.window;
        return window2.sessionStorage;
      });
      if (!sessionStorage) {
        return null;
      }
      try {
        var cache = JSON.parse(
          sessionStorage.getItem(KEY)
        );
        return cache && isEqual(cache.state, getStateWithoutPage2(state)) ? cache.hits : null;
      } catch (error) {
        if (error instanceof SyntaxError) {
          try {
            sessionStorage.removeItem(KEY);
          } catch (err) {
          }
        }
        return null;
      }
    },
    write: function write(_ref4) {
      var state = _ref4.state, hits = _ref4.hits;
      var sessionStorage = safelyRunOnBrowser(function(_ref5) {
        var window2 = _ref5.window;
        return window2.sessionStorage;
      });
      if (!sessionStorage) {
        return;
      }
      try {
        sessionStorage.setItem(KEY, JSON.stringify({
          state: getStateWithoutPage2(state),
          hits
        }));
      } catch (error) {
      }
    }
  };
}

// node_modules/instantsearch.js/es/index.js
var instantsearch = function instantsearch2(options) {
  return new InstantSearch_default(options);
};
instantsearch.version = version_default;
instantsearch.createInfiniteHitsSessionStorageCache = deprecate(createInfiniteHitsSessionStorageCache, "import { createInfiniteHitsSessionStorageCache } from 'instantsearch.js/es/lib/infiniteHitsCache'");
instantsearch.highlight = deprecate(highlight, "import { highlight } from 'instantsearch.js/es/helpers'");
instantsearch.reverseHighlight = deprecate(reverseHighlight, "import { reverseHighlight } from 'instantsearch.js/es/helpers'");
instantsearch.snippet = deprecate(snippet, "import { snippet } from 'instantsearch.js/es/helpers'");
instantsearch.reverseSnippet = deprecate(reverseSnippet, "import { reverseSnippet } from 'instantsearch.js/es/helpers'");
instantsearch.insights = insights;
instantsearch.getInsightsAnonymousUserToken = getInsightsAnonymousUserToken;
Object.defineProperty(instantsearch, "widgets", {
  get: function get() {
    throw new ReferenceError(`"instantsearch.widgets" are not available from the ES build.

To import the widgets:

import { searchBox } from 'instantsearch.js/es/widgets'`);
  }
});
Object.defineProperty(instantsearch, "connectors", {
  get: function get2() {
    throw new ReferenceError(`"instantsearch.connectors" are not available from the ES build.

To import the connectors:

import { connectSearchBox } from 'instantsearch.js/es/connectors'`);
  }
});
var es_default = instantsearch;

// node_modules/vue-instantsearch/vue3/es/package.json.js
var r5 = "4.4.2";

// node_modules/vue-instantsearch/vue3/es/src/util/createInstantSearchComponent.js
var i3 = function(i4) {
  var s6;
  return e(((s6 = { mixins: [t({ name: "InstantSearch" })], provide: function() {
    return { $_ais_instantSearchInstance: this.instantSearchInstance };
  }, watch: { searchClient: function(n5) {
    this.instantSearchInstance.helper.setClient(n5).search();
  }, indexName: function(n5) {
    this.instantSearchInstance.helper.setIndex(n5).search();
  }, stalledSearchDelay: function(n5) {
    this.instantSearchInstance._stalledSearchDelay = n5;
  }, routing: function() {
    throw new Error("routing configuration can not be changed dynamically at this point.\n\nPlease open a new issue: https://github.com/algolia/vue-instantsearch/issues/new?template=feature.md");
  }, searchFunction: function(n5) {
    this.instantSearchInstance._searchFunction = n5;
  }, middlewares: { immediate: true, handler: function(n5, t6) {
    var e7 = this;
    (t6 || []).filter(function(t7) {
      return -1 === (n5 || []).indexOf(t7);
    }).forEach(function(n6) {
      e7.instantSearchInstance.unuse(n6);
    }), (n5 || []).filter(function(n6) {
      return -1 === (t6 || []).indexOf(n6);
    }).forEach(function(n6) {
      e7.instantSearchInstance.use(n6);
    });
  } } }, created: function() {
    var n5 = this.instantSearchInstance.client;
    "function" == typeof n5.addAlgoliaAgent && (n5.addAlgoliaAgent("Vue (" + version + ")"), n5.addAlgoliaAgent("Vue InstantSearch (" + r5 + ")"));
  }, mounted: function() {
    var n5 = this;
    this.$nextTick(function() {
      n5.instantSearchInstance.started || n5.instantSearchInstance.start();
    });
  } }).beforeUnmount = function() {
    this.instantSearchInstance.started && this.instantSearchInstance.dispose(), this.instantSearchInstance.__initialSearchResults = void 0;
  }, s6), i4);
};

// node_modules/vue-instantsearch/vue3/es/src/components/InstantSearch.js
var r6 = "Vue InstantSearch: You used the prop api-key or app-id.\nThese have been replaced by search-client.\n\nSee more info here: https://www.algolia.com/doc/api-reference/widgets/instantsearch/vue/#widget-param-search-client";
var InstantSearch_default2 = i3({ name: "AisInstantSearch", props: { searchClient: { type: Object, required: true }, insightsClient: { type: Function, default: void 0 }, indexName: { type: String, required: true }, routing: { default: void 0, validator: function(e7) {
  return !("boolean" == typeof e7 || !e7.router && !e7.stateMapping) || (a("The `routing` option expects an object with `router` and/or `stateMapping`.\n\nSee https://www.algolia.com/doc/api-reference/widgets/instantsearch/vue/#widget-param-routing"), false);
} }, stalledSearchDelay: { type: Number, default: void 0 }, searchFunction: { type: Function, default: void 0 }, initialUiState: { type: Object, default: void 0 }, apiKey: { type: String, default: void 0, validator: function(e7) {
  return e7 && a(r6), false;
} }, appId: { type: String, default: void 0, validator: function(e7) {
  return e7 && a(r6), false;
} }, middlewares: { type: Array, default: null } }, data: function() {
  return { instantSearchInstance: es_default({ searchClient: this.searchClient, insightsClient: this.insightsClient, indexName: this.indexName, routing: this.routing, stalledSearchDelay: this.stalledSearchDelay, searchFunction: this.searchFunction, initialUiState: this.initialUiState }) };
}, render: n(function(e7) {
  var i4;
  return e7("div", { class: (i4 = {}, i4[this.suit()] = true, i4[this.suit("", "ssr")] = false, i4) }, p(this));
}) });

// node_modules/vue-instantsearch/vue3/es/src/components/InstantSearchSsr.js
var InstantSearchSsr_default = i3({ name: "AisInstantSearchSsr", inject: { $_ais_ssrInstantSearchInstance: { default: function() {
  throw new Error("`createServerRootMixin` is required when using SSR.");
} } }, data: function() {
  return { instantSearchInstance: this.$_ais_ssrInstantSearchInstance };
}, render: n(function(t6) {
  var e7;
  return t6("div", { class: (e7 = {}, e7[this.suit()] = true, e7[this.suit("", "ssr")] = true, e7) }, p(this));
}) });

// node_modules/vue-instantsearch/vue3/es/src/components/InfiniteHits.vue_vue&type=script&lang.js
var InfiniteHits_vue_vue_type_script_lang_default = { name: "AisInfiniteHits", mixins: [n3({ connector: connectInfiniteHitsWithInsights_default }, { $$widgetType: "ais.infiniteHits" }), t({ name: "InfiniteHits" })], props: { showPrevious: { type: Boolean, default: false }, escapeHTML: { type: Boolean, default: true }, transformItems: { type: Function, default: void 0 }, cache: { type: Object, default: void 0 } }, computed: { widgetParams: function() {
  return { showPrevious: this.showPrevious, escapeHTML: this.escapeHTML, transformItems: this.transformItems, cache: this.cache };
}, items: function() {
  return this.state.hits;
} }, methods: { refinePrevious: function() {
  this.state.showPrevious();
}, refineNext: function() {
  this.state.showMore();
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/InfiniteHits.vue_vue&type=template&id=dcfb64b8&lang.js
function l2(l7, f8, d5, P, c13, g4) {
  return l7.state ? (openBlock(), createBlock("div", { key: 0, class: l7.suit() }, [d5.showPrevious ? renderSlot(l7.$slots, "loadPrevious", { key: 0, refinePrevious: g4.refinePrevious, page: l7.state.results.page, isFirstPage: l7.state.isFirstPage }, function() {
    return [createVNode("button", { class: [l7.suit("loadPrevious"), l7.state.isFirstPage && l7.suit("loadPrevious", "disabled")], disabled: l7.state.isFirstPage, onClick: f8[1] || (f8[1] = function(e7) {
      return g4.refinePrevious();
    }) }, "Show previous results", 10, ["disabled"])];
  }) : createCommentVNode("v-if", true), renderSlot(l7.$slots, "default", { items: g4.items, results: l7.state.results, isLastPage: l7.state.isLastPage, refinePrevious: g4.refinePrevious, refineNext: g4.refineNext, refine: g4.refineNext, insights: l7.state.insights, sendEvent: l7.state.sendEvent }, function() {
    return [createVNode("ol", { class: l7.suit("list") }, [(openBlock(true), createBlock(Fragment, null, renderList(g4.items, function(i4, r15) {
      return openBlock(), createBlock("li", { class: l7.suit("item"), key: i4.objectID }, [renderSlot(l7.$slots, "item", { item: i4, index: r15, insights: l7.state.insights }, function() {
        return [createTextVNode("objectID: " + toDisplayString(i4.objectID) + ", index: " + toDisplayString(r15), 1)];
      })], 2);
    }), 128))], 2), renderSlot(l7.$slots, "loadMore", { refineNext: g4.refineNext, refine: g4.refineNext, page: l7.state.results.page, isLastPage: l7.state.isLastPage }, function() {
      return [createVNode("button", { class: [l7.suit("loadMore"), l7.state.isLastPage && l7.suit("loadMore", "disabled")], disabled: l7.state.isLastPage, onClick: f8[2] || (f8[2] = function(e7) {
        return g4.refineNext();
      }) }, "Show more results", 10, ["disabled"])];
    })];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/InfiniteHits.vue.js
InfiniteHits_vue_vue_type_script_lang_default.render = l2, InfiniteHits_vue_vue_type_script_lang_default.__file = "src/components/InfiniteHits.vue";
var InfiniteHits_vue_default = InfiniteHits_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/Menu.vue_vue&type=script&lang.js
var Menu_vue_vue_type_script_lang_default = { name: "AisMenu", mixins: [t({ name: "Menu" }), n3({ connector: connectMenu_default }, { $$widgetType: "ais.menu" }), r2({ mapStateToCanRefine: function(t6) {
  return Boolean(t6.canRefine);
} })], props: { attribute: { type: String, required: true }, limit: { type: Number, default: void 0 }, showMoreLimit: { type: Number, default: void 0 }, showMore: { type: Boolean, default: false }, sortBy: { type: [Array, Function], default: void 0 }, transformItems: { type: Function, default: void 0 } }, computed: { widgetParams: function() {
  return { attribute: this.attribute, limit: this.limit, showMore: this.showMore, showMoreLimit: this.showMoreLimit, sortBy: this.sortBy, transformItems: this.transformItems };
}, showShowMoreButton: function() {
  return this.state.canRefine && this.showMore;
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/Menu.vue_vue&type=template&id=9bcc0be2&lang.js
function c8(c13, h5, f8, g4, w2, M2) {
  return c13.state ? (openBlock(), createBlock("div", { key: 0, class: [c13.suit(), !c13.state.canRefine && c13.suit("", "noRefinement")] }, [renderSlot(c13.$slots, "default", { items: c13.state.items, canRefine: c13.state.canRefine, canToggleShowMore: c13.state.canToggleShowMore, isShowingMore: c13.state.isShowingMore, refine: c13.state.refine, createURL: c13.state.createURL, toggleShowMore: c13.state.toggleShowMore, sendEvent: c13.state.sendEvent }, function() {
    return [createVNode("ul", { class: c13.suit("list") }, [(openBlock(true), createBlock(Fragment, null, renderList(c13.state.items, function(s6) {
      return openBlock(), createBlock("li", { key: s6.value, class: [c13.suit("item"), s6.isRefined && c13.suit("item", "selected")] }, [createVNode("a", { href: c13.state.createURL(s6.value), class: c13.suit("link"), onClick: withModifiers(function(e7) {
        return c13.state.refine(s6.value);
      }, ["prevent"]) }, [createVNode("span", { class: c13.suit("label") }, toDisplayString(s6.label), 3), createVNode("span", { class: c13.suit("count") }, toDisplayString(s6.count), 3)], 10, ["href", "onClick"])], 2);
    }), 128))], 2), M2.showShowMoreButton ? (openBlock(), createBlock("button", { key: 0, class: [c13.suit("showMore"), !c13.state.canToggleShowMore && c13.suit("showMore", "disabled")], disabled: !c13.state.canToggleShowMore, onClick: h5[1] || (h5[1] = withModifiers(function(e7) {
      return c13.state.toggleShowMore();
    }, ["prevent"])) }, [renderSlot(c13.$slots, "showMoreLabel", { isShowingMore: c13.state.isShowingMore }, function() {
      return [createTextVNode(toDisplayString(c13.state.isShowingMore ? "Show less" : "Show more"), 1)];
    })], 10, ["disabled"])) : createCommentVNode("v-if", true)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Menu.vue.js
Menu_vue_vue_type_script_lang_default.render = c8, Menu_vue_vue_type_script_lang_default.__file = "src/components/Menu.vue";
var Menu_vue_default = Menu_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/MenuSelect.vue_vue&type=script&lang.js
var MenuSelect_vue_vue_type_script_lang_default = { name: "AisMenuSelect", mixins: [t({ name: "MenuSelect" }), n3({ connector: connectMenu_default }, { $$widgetType: "ais.menuSelect" }), r2({ mapStateToCanRefine: function(t6) {
  return Boolean(t6.canRefine);
} })], props: { attribute: { type: String, required: true }, limit: { type: Number, default: 10 }, sortBy: { type: [Array, Function], default: void 0 }, transformItems: { type: Function, default: function(t6) {
  return t6;
} } }, computed: { widgetParams: function() {
  return { attribute: this.attribute, limit: this.limit, sortBy: this.sortBy, transformItems: this.transformItems };
} }, methods: { refine: function(t6) {
  this.state.refine(t6);
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/MenuSelect.vue_vue&type=template&id=694477eb&lang.js
var r7 = createTextVNode("See all");
function c9(c13, f8, v5, d5, m6, p5) {
  return c13.state ? (openBlock(), createBlock("div", { key: 0, class: [c13.suit(), !c13.state.canRefine && c13.suit("", "noRefinement")] }, [renderSlot(c13.$slots, "default", { items: c13.state.items, canRefine: c13.state.canRefine, refine: p5.refine, createURL: c13.state.createURL, sendEvent: c13.state.sendEvent }, function() {
    return [createVNode("select", { class: c13.suit("select"), onChange: f8[1] || (f8[1] = function(e7) {
      return p5.refine(e7.currentTarget.value);
    }) }, [createVNode("option", { class: c13.suit("option"), value: "" }, [renderSlot(c13.$slots, "defaultOption", {}, function() {
      return [r7];
    })], 2), (openBlock(true), createBlock(Fragment, null, renderList(c13.state.items, function(s6) {
      return openBlock(), createBlock("option", { key: s6.value, class: c13.suit("option"), value: s6.value, selected: s6.isRefined }, [renderSlot(c13.$slots, "item", { item: s6 }, function() {
        return [createTextVNode(toDisplayString(s6.label) + " (" + toDisplayString(s6.count) + ")", 1)];
      })], 10, ["value", "selected"]);
    }), 128))], 34)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/MenuSelect.vue.js
MenuSelect_vue_vue_type_script_lang_default.render = c9, MenuSelect_vue_vue_type_script_lang_default.__file = "src/components/MenuSelect.vue";
var MenuSelect_vue_default = MenuSelect_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/NumericMenu.vue_vue&type=script&lang.js
var NumericMenu_vue_vue_type_script_lang_default = { name: "AisNumericMenu", mixins: [n3({ connector: connectNumericMenu_default }, { $$widgetType: "ais.numericMenu" }), t({ name: "NumericMenu" }), r2({ mapStateToCanRefine: function(t6) {
  return false === t6.hasNoResults;
} })], props: { attribute: { type: String, required: true }, items: { type: Array, required: true }, transformItems: { type: Function, default: void 0 } }, computed: { widgetParams: function() {
  return { attribute: this.attribute, transformItems: this.transformItems, items: this.items };
}, canRefine: function() {
  return !this.state.hasNoResults;
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/NumericMenu.vue_vue&type=template&id=160fae0c&lang.js
function c10(c13, r15, f8, o7, d5, m6) {
  return c13.state ? (openBlock(), createBlock("div", { key: 0, class: [c13.suit(), !m6.canRefine && c13.suit("", "noRefinement")] }, [renderSlot(c13.$slots, "default", { items: c13.state.items, canRefine: m6.canRefine, refine: c13.state.refine, createURL: c13.state.createURL, sendEvent: c13.state.sendEvent }, function() {
    return [createVNode("ul", { class: [c13.suit("list")] }, [(openBlock(true), createBlock(Fragment, null, renderList(c13.state.items, function(s6) {
      return openBlock(), createBlock("li", { key: s6.label, class: [c13.suit("item"), s6.isRefined && c13.suit("item", "selected")] }, [createVNode("label", { class: c13.suit("label") }, [createVNode("input", { type: "radio", class: c13.suit("radio"), name: f8.attribute, value: s6.value, checked: s6.isRefined, onChange: r15[1] || (r15[1] = function(e7) {
        return c13.state.refine(e7.target.value);
      }) }, null, 42, ["name", "value", "checked"]), createVNode("span", { class: c13.suit("labelText") }, toDisplayString(s6.label), 3)], 2)], 2);
    }), 128))], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/NumericMenu.vue.js
NumericMenu_vue_vue_type_script_lang_default.render = c10, NumericMenu_vue_vue_type_script_lang_default.__file = "src/components/NumericMenu.vue";
var NumericMenu_vue_default = NumericMenu_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/Pagination.vue_vue&type=script&lang.js
var Pagination_vue_vue_type_script_lang_default = { name: "AisPagination", mixins: [t({ name: "Pagination" }), n3({ connector: connectPagination_default }, { $$widgetType: "ais.pagination" }), r2({ mapStateToCanRefine: function(t6) {
  return t6.nbPages > 1;
} })], props: { padding: { type: Number, default: void 0, validator: function(t6) {
  return t6 > 0;
} }, totalPages: { type: Number, default: void 0, validator: function(t6) {
  return t6 > 0;
} }, showFirst: { type: Boolean, default: true }, showLast: { type: Boolean, default: true }, showNext: { type: Boolean, default: true }, showPrevious: { type: Boolean, default: true } }, computed: { widgetParams: function() {
  return { padding: this.padding, totalPages: this.totalPages };
} }, emits: ["page-change"], methods: { refine: function(t6) {
  var e7 = Math.min(Math.max(t6, 0), this.state.nbPages - 1);
  this.state.refine(e7), this.$emit("page-change", e7);
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/Pagination.vue_vue&type=template&id=849a166c&lang.js
function f6(f8, l7, o7, g4, P, L2) {
  return f8.state ? (openBlock(), createBlock("div", { key: 0, class: f8.suit() }, [renderSlot(f8.$slots, "default", { refine: L2.refine, createURL: f8.state.createURL, currentRefinement: f8.state.currentRefinement, nbHits: f8.state.nbHits, nbPages: f8.state.nbPages, pages: f8.state.pages, isFirstPage: f8.state.isFirstPage, isLastPage: f8.state.isLastPage }, function() {
    var g5, P2, k3, m6;
    return [createVNode("ul", { class: f8.suit("list") }, [o7.showFirst ? (openBlock(), createBlock("li", { key: 0, class: (g5 = {}, g5[f8.suit("item")] = true, g5[f8.suit("item", "firstPage")] = true, g5[f8.suit("item", "disabled")] = f8.state.isFirstPage, g5) }, [renderSlot(f8.$slots, "first", { createURL: function() {
      return f8.state.createURL(0);
    }, isFirstPage: f8.state.isFirstPage, refine: function() {
      return L2.refine(0);
    } }, function() {
      return [f8.state.isFirstPage ? (openBlock(), createBlock("span", { key: 1, class: f8.suit("link"), "aria-label": "First" }, "\u2039\u2039", 2)) : (openBlock(), createBlock("a", { key: 0, class: f8.suit("link"), "aria-label": "First", href: f8.state.createURL(0), onClick: l7[1] || (l7[1] = withModifiers(function(e7) {
        return L2.refine(0);
      }, ["prevent"])) }, "\u2039\u2039", 10, ["href"]))];
    })], 2)) : createCommentVNode("v-if", true), o7.showPrevious ? (openBlock(), createBlock("li", { key: 1, class: (P2 = {}, P2[f8.suit("item")] = true, P2[f8.suit("item", "previousPage")] = true, P2[f8.suit("item", "disabled")] = f8.state.isFirstPage, P2) }, [renderSlot(f8.$slots, "previous", { createURL: function() {
      return f8.state.createURL(f8.state.currentRefinement - 1);
    }, isFirstPage: f8.state.isFirstPage, refine: function() {
      return L2.refine(f8.state.currentRefinement - 1);
    } }, function() {
      return [f8.state.isFirstPage ? (openBlock(), createBlock("span", { key: 1, class: f8.suit("link"), "aria-label": "Previous" }, "\u2039", 2)) : (openBlock(), createBlock("a", { key: 0, class: f8.suit("link"), "aria-label": "Previous", href: f8.state.createURL(f8.state.currentRefinement - 1), onClick: l7[2] || (l7[2] = withModifiers(function(e7) {
        return L2.refine(f8.state.currentRefinement - 1);
      }, ["prevent"])) }, "\u2039", 10, ["href"]))];
    })], 2)) : createCommentVNode("v-if", true), (openBlock(true), createBlock(Fragment, null, renderList(f8.state.pages, function(n5) {
      var r15;
      return openBlock(), createBlock("li", { class: (r15 = {}, r15[f8.suit("item")] = true, r15[f8.suit("item", "page")] = true, r15[f8.suit("item", "selected")] = f8.state.currentRefinement === n5, r15), key: n5 }, [renderSlot(f8.$slots, "item", { page: n5, createURL: function() {
        return f8.state.createURL(n5);
      }, isFirstPage: f8.state.isFirstPage, isLastPage: f8.state.isLastPage, refine: function() {
        return L2.refine(n5);
      } }, function() {
        return [createVNode("a", { class: f8.suit("link"), href: f8.state.createURL(n5), onClick: withModifiers(function(e7) {
          return L2.refine(n5);
        }, ["prevent"]) }, toDisplayString(n5 + 1), 11, ["href", "onClick"])];
      })], 2);
    }), 128)), o7.showNext ? (openBlock(), createBlock("li", { key: 2, class: (k3 = {}, k3[f8.suit("item")] = true, k3[f8.suit("item", "nextPage")] = true, k3[f8.suit("item", "disabled")] = f8.state.isLastPage, k3) }, [renderSlot(f8.$slots, "next", { createURL: function() {
      return f8.state.createURL(f8.state.currentRefinement + 1);
    }, isLastPage: f8.state.isLastPage, refine: function() {
      return L2.refine(f8.state.currentRefinement + 1);
    } }, function() {
      return [f8.state.isLastPage ? (openBlock(), createBlock("span", { key: 1, class: f8.suit("link"), "aria-label": "Next" }, "\u203A", 2)) : (openBlock(), createBlock("a", { key: 0, class: f8.suit("link"), "aria-label": "Next", href: f8.state.createURL(f8.state.currentRefinement + 1), onClick: l7[3] || (l7[3] = withModifiers(function(e7) {
        return L2.refine(f8.state.currentRefinement + 1);
      }, ["prevent"])) }, "\u203A", 10, ["href"]))];
    })], 2)) : createCommentVNode("v-if", true), o7.showLast ? (openBlock(), createBlock("li", { key: 3, class: (m6 = {}, m6[f8.suit("item")] = true, m6[f8.suit("item", "lastPage")] = true, m6[f8.suit("item", "disabled")] = f8.state.isLastPage, m6) }, [renderSlot(f8.$slots, "last", { createURL: function() {
      return f8.state.createURL(f8.state.nbPages - 1);
    }, isLastPage: f8.state.isLastPage, refine: function() {
      return L2.refine(f8.state.nbPages - 1);
    } }, function() {
      return [f8.state.isLastPage ? (openBlock(), createBlock("span", { key: 1, class: f8.suit("link"), "aria-label": "Last" }, "\u203A\u203A", 2)) : (openBlock(), createBlock("a", { key: 0, class: f8.suit("link"), "aria-label": "Last", href: f8.state.createURL(f8.state.nbPages - 1), onClick: l7[4] || (l7[4] = withModifiers(function(e7) {
        return L2.refine(f8.state.nbPages - 1);
      }, ["prevent"])) }, "\u203A\u203A", 10, ["href"]))];
    })], 2)) : createCommentVNode("v-if", true)], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Pagination.vue.js
Pagination_vue_vue_type_script_lang_default.render = f6, Pagination_vue_vue_type_script_lang_default.__file = "src/components/Pagination.vue";
var Pagination_vue_default = Pagination_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/Panel.vue_vue&type=script&lang.js
var Panel_vue_vue_type_script_lang_default = { name: "AisPanel", mixins: [t({ name: "Panel" }), i2()], methods: { getSlot: function(i4) {
  return this.$slots[i4];
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/Panel.vue_vue&type=template&id=d32d57f8&lang.js
function o3(o7, f8, a10, r15, l7, c13) {
  return openBlock(), createBlock("div", { class: [o7.suit(), !o7.canRefine && o7.suit("", "noRefinement")] }, [c13.getSlot("header") ? (openBlock(), createBlock("div", { key: 0, class: o7.suit("header") }, [renderSlot(o7.$slots, "header", { hasRefinements: o7.canRefine })], 2)) : createCommentVNode("v-if", true), createVNode("div", { class: o7.suit("body") }, [renderSlot(o7.$slots, "default", { hasRefinements: o7.canRefine })], 2), c13.getSlot("footer") ? (openBlock(), createBlock("div", { key: 1, class: o7.suit("footer") }, [renderSlot(o7.$slots, "footer", { hasRefinements: o7.canRefine })], 2)) : createCommentVNode("v-if", true)], 2);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Panel.vue.js
Panel_vue_vue_type_script_lang_default.render = o3, Panel_vue_vue_type_script_lang_default.__file = "src/components/Panel.vue";
var Panel_vue_default = Panel_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/PoweredBy.vue_vue&type=script&lang.js
var PoweredBy_vue_vue_type_script_lang_default = { name: "AisPoweredBy", mixins: [t({ name: "PoweredBy" })], props: { theme: { default: "light", validator: function(t6) {
  return -1 !== ["light", "dark"].indexOf(t6);
} } }, computed: { algoliaUrl: function() {
  return "https://www.algolia.com/?utm_source=vue-instantsearch&utm_medium=website&utm_content=" + (location ? location.hostname : "") + "&utm_campaign=poweredby";
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/PoweredBy.vue_vue&type=template&id=3e8d7a5b&lang.js
var v3 = createVNode("path", { fill: "#5468FF", d: "M78.99.94h16.6a2.97 2.97 0 0 1 2.96 2.96v16.6a2.97 2.97 0 0 1-2.97 2.96h-16.6a2.97 2.97 0 0 1-2.96-2.96V3.9A2.96 2.96 0 0 1 79 .94" }, null, -1);
var m3 = createVNode("path", { fill: "#FFF", d: "M89.63 5.97v-.78a.98.98 0 0 0-.98-.97h-2.28a.98.98 0 0 0-.97.97V6c0 .09.08.15.17.13a7.13 7.13 0 0 1 3.9-.02c.08.02.16-.04.16-.13m-6.25 1L83 6.6a.98.98 0 0 0-1.38 0l-.46.46a.97.97 0 0 0 0 1.38l.38.39c.06.06.15.04.2-.02a7.49 7.49 0 0 1 1.63-1.62c.07-.04.08-.14.02-.2m4.16 2.45v3.34c0 .1.1.17.2.12l2.97-1.54c.06-.03.08-.12.05-.18a3.7 3.7 0 0 0-3.08-1.87c-.07 0-.14.06-.14.13m0 8.05a4.49 4.49 0 1 1 0-8.98 4.49 4.49 0 0 1 0 8.98m0-10.85a6.37 6.37 0 1 0 0 12.74 6.37 6.37 0 0 0 0-12.74" }, null, -1);
function h3(h5, z2, e7, t6, i4, V) {
  return openBlock(), createBlock("div", { class: h5.suit() }, [createVNode("a", { class: h5.suit("link"), href: V.algoliaUrl, target: "_blank", rel: "noopener", "aria-label": "search by Algolia" }, [(openBlock(), createBlock("svg", { style: { height: "1.2em", width: "auto" }, class: [h5.suit("logo"), h5.suit("", e7.theme)], viewBox: "0 0 168 24" }, [createVNode("path", { fill: "dark" === e7.theme ? "#FFF" : "#5D6494", d: "M6.97 6.68V8.3a4.47 4.47 0 0 0-2.42-.67 2.2 2.2 0 0 0-1.38.4c-.34.26-.5.6-.5 1.02 0 .43.16.77.49 1.03.33.25.83.53 1.51.83a7.04 7.04 0 0 1 1.9 1.08c.34.24.58.54.73.89.15.34.23.74.23 1.18 0 .95-.33 1.7-1 2.24a4 4 0 0 1-2.6.81 5.71 5.71 0 0 1-2.94-.68v-1.71c.84.63 1.81.94 2.92.94.58 0 1.05-.14 1.39-.4.34-.28.5-.65.5-1.13 0-.29-.1-.55-.3-.8a2.2 2.2 0 0 0-.65-.53 23.03 23.03 0 0 0-1.64-.78 13.67 13.67 0 0 1-1.11-.64c-.12-.1-.28-.22-.46-.4a1.72 1.72 0 0 1-.39-.5 4.46 4.46 0 0 1-.22-.6c-.07-.23-.1-.48-.1-.75 0-.91.33-1.63 1-2.17a4 4 0 0 1 2.57-.8c.97 0 1.8.18 2.47.52zm7.47 5.7v-.3a2.26 2.26 0 0 0-.5-1.44c-.3-.35-.74-.53-1.32-.53-.53 0-.99.2-1.37.58-.38.39-.62.95-.72 1.68h3.91zm1 2.79v1.4c-.6.34-1.38.51-2.36.51a4.02 4.02 0 0 1-3-1.13 4.04 4.04 0 0 1-1.11-2.97c0-1.3.34-2.32 1.02-3.06a3.38 3.38 0 0 1 2.6-1.1c1.03 0 1.85.32 2.46.96.6.64.9 1.57.9 2.78 0 .33-.03.68-.09 1.04h-5.31c.1.7.4 1.24.89 1.61.49.38 1.1.56 1.85.56.86 0 1.58-.2 2.15-.6zm6.61-1.78h-1.21c-.6 0-1.05.12-1.35.36-.3.23-.46.53-.46.89 0 .37.12.66.36.88.23.2.57.32 1.02.32.5 0 .9-.15 1.2-.43.3-.28.44-.65.44-1.1v-.92zm-4.07-2.55V9.33a4.96 4.96 0 0 1 2.5-.55c2.1 0 3.17 1.03 3.17 3.08V17H22.1v-.96c-.42.68-1.15 1.02-2.19 1.02-.76 0-1.38-.22-1.84-.66-.46-.44-.7-1-.7-1.68 0-.78.3-1.38.88-1.81.59-.43 1.4-.65 2.46-.65h1.34v-.46c0-.55-.13-.97-.4-1.25-.26-.29-.7-.43-1.32-.43-.86 0-1.65.24-2.35.72zm9.34-1.93v1.42c.39-1 1.1-1.5 2.12-1.5.15 0 .31.02.5.05v1.53c-.23-.1-.48-.14-.76-.14-.54 0-.99.24-1.34.71a2.8 2.8 0 0 0-.52 1.71V17h-1.57V8.91h1.57zm5 4.09a3 3 0 0 0 .76 2.01c.47.53 1.14.8 2 .8.64 0 1.24-.18 1.8-.53v1.4c-.53.32-1.2.48-2 .48a3.98 3.98 0 0 1-4.17-4.18c0-1.16.38-2.15 1.14-2.98a4 4 0 0 1 3.1-1.23c.7 0 1.34.15 1.92.44v1.44a3.24 3.24 0 0 0-1.77-.5A2.65 2.65 0 0 0 32.33 13zm7.92-7.28v4.58c.46-1 1.3-1.5 2.5-1.5.8 0 1.42.24 1.9.73.48.5.72 1.17.72 2.05V17H43.8v-5.1c0-.56-.14-.99-.43-1.29-.28-.3-.65-.45-1.1-.45-.54 0-1 .2-1.42.6-.4.4-.61 1.02-.61 1.85V17h-1.56V5.72h1.56zM55.2 15.74c.6 0 1.1-.25 1.5-.76.4-.5.6-1.16.6-1.95 0-.92-.2-1.62-.6-2.12-.4-.5-.92-.74-1.55-.74-.56 0-1.05.22-1.5.67-.44.45-.66 1.13-.66 2.06 0 .96.22 1.67.64 2.14.43.47.95.7 1.57.7zM53 5.72v4.42a2.74 2.74 0 0 1 2.43-1.34c1.03 0 1.86.38 2.51 1.15.65.76.97 1.78.97 3.05 0 1.13-.3 2.1-.92 2.9-.62.81-1.47 1.21-2.54 1.21s-1.9-.45-2.46-1.34V17h-1.58V5.72H53zm9.9 11.1l-3.22-7.9h1.74l1 2.62 1.26 3.42c.1-.32.48-1.46 1.15-3.42l.91-2.63h1.66l-2.92 7.87c-.78 2.07-1.96 3.1-3.56 3.1-.28 0-.53-.02-.73-.07v-1.34c.17.04.35.06.54.06 1.03 0 1.76-.57 2.17-1.7z" }, null, 8, ["fill"]), v3, m3, createVNode("path", { fill: "dark" === e7.theme ? "#FFF" : "#5468FF", d: "M120.92 18.8c-4.38.02-4.38-3.54-4.38-4.1V1.36l2.67-.42v13.25c0 .32 0 2.36 1.71 2.37v2.24zm-10.84-2.18c.82 0 1.43-.04 1.85-.12v-2.72a5.48 5.48 0 0 0-1.57-.2c-.3 0-.6.02-.9.07-.3.04-.57.12-.81.24-.24.11-.44.28-.58.49a.93.93 0 0 0-.22.65c0 .63.22 1 .61 1.23.4.24.94.36 1.62.36zm-.23-9.7c.88 0 1.62.11 2.23.33.6.22 1.09.53 1.44.92.36.4.61.92.76 1.48.16.56.23 1.17.23 1.85v6.87c-.4.1-1.03.2-1.86.32-.84.12-1.78.18-2.82.18-.69 0-1.32-.07-1.9-.2a4 4 0 0 1-1.46-.63c-.4-.3-.72-.67-.96-1.13a4.3 4.3 0 0 1-.34-1.8c0-.66.13-1.08.39-1.53.26-.45.6-.82 1.04-1.1.45-.3.95-.5 1.54-.62a8.8 8.8 0 0 1 3.79.05v-.44c0-.3-.04-.6-.11-.87a1.78 1.78 0 0 0-1.1-1.22c-.31-.12-.7-.2-1.15-.2a9.75 9.75 0 0 0-2.95.46l-.33-2.19c.34-.12.84-.23 1.48-.35.65-.12 1.34-.18 2.08-.18zm52.84 9.63c.82 0 1.43-.05 1.85-.13V13.7a5.42 5.42 0 0 0-1.57-.2c-.3 0-.6.02-.9.07-.3.04-.57.12-.81.24-.24.12-.44.28-.58.5a.93.93 0 0 0-.22.65c0 .63.22.99.61 1.23.4.24.94.36 1.62.36zm-.23-9.7c.88 0 1.63.11 2.23.33.6.22 1.1.53 1.45.92.35.39.6.92.76 1.48.15.56.23 1.18.23 1.85v6.88c-.41.08-1.03.19-1.87.31-.83.12-1.77.18-2.81.18-.7 0-1.33-.06-1.9-.2a4 4 0 0 1-1.47-.63c-.4-.3-.72-.67-.95-1.13a4.3 4.3 0 0 1-.34-1.8c0-.66.13-1.08.38-1.53.26-.45.61-.82 1.05-1.1.44-.3.95-.5 1.53-.62a8.8 8.8 0 0 1 3.8.05v-.43c0-.31-.04-.6-.12-.88-.07-.28-.2-.52-.38-.73a1.78 1.78 0 0 0-.73-.5c-.3-.1-.68-.2-1.14-.2a9.85 9.85 0 0 0-2.95.47l-.32-2.19a11.63 11.63 0 0 1 3.55-.53zm-8.03-1.27a1.62 1.62 0 0 0 0-3.24 1.62 1.62 0 1 0 0 3.24zm1.35 13.22h-2.7V7.27l2.7-.42V18.8zm-4.72 0c-4.38.02-4.38-3.54-4.38-4.1l-.01-13.34 2.67-.42v13.25c0 .32 0 2.36 1.72 2.37v2.24zm-8.7-5.9a4.7 4.7 0 0 0-.74-2.79 2.4 2.4 0 0 0-2.07-1 2.4 2.4 0 0 0-2.06 1 4.7 4.7 0 0 0-.74 2.8c0 1.16.25 1.94.74 2.62a2.4 2.4 0 0 0 2.07 1.02c.88 0 1.57-.34 2.07-1.02.49-.68.73-1.46.73-2.63zm2.74 0a6.46 6.46 0 0 1-1.52 4.23c-.49.53-1.07.94-1.76 1.22-.68.29-1.73.45-2.26.45-.53 0-1.58-.15-2.25-.45a5.1 5.1 0 0 1-2.88-3.13 7.3 7.3 0 0 1-.01-4.84 5.13 5.13 0 0 1 2.9-3.1 5.67 5.67 0 0 1 2.22-.42c.81 0 1.56.14 2.24.42.69.29 1.28.69 1.75 1.22.49.52.87 1.15 1.14 1.89a7 7 0 0 1 .43 2.5zm-20.14 0c0 1.11.25 2.36.74 2.88.5.52 1.13.78 1.91.78a4.07 4.07 0 0 0 2.12-.6V9.33c-.19-.04-.99-.2-1.76-.23a2.67 2.67 0 0 0-2.23 1 4.73 4.73 0 0 0-.78 2.8zm7.44 5.27c0 1.82-.46 3.16-1.4 4-.94.85-2.37 1.27-4.3 1.27-.7 0-2.17-.13-3.34-.4l.43-2.11c.98.2 2.27.26 2.95.26 1.08 0 1.84-.22 2.3-.66.46-.43.68-1.08.68-1.94v-.44a5.2 5.2 0 0 1-2.54.6 5.6 5.6 0 0 1-2.01-.36 4.2 4.2 0 0 1-2.58-2.71 9.88 9.88 0 0 1 .02-5.35 4.92 4.92 0 0 1 2.93-2.96 6.6 6.6 0 0 1 2.43-.46 19.64 19.64 0 0 1 4.43.66v10.6z" }, null, 8, ["fill"])], 2))], 10, ["href"])], 2);
}

// node_modules/vue-instantsearch/vue3/es/src/components/PoweredBy.vue.js
PoweredBy_vue_vue_type_script_lang_default.render = h3, PoweredBy_vue_vue_type_script_lang_default.__file = "src/components/PoweredBy.vue";
var PoweredBy_vue_default = PoweredBy_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/QueryRuleContext.js
var QueryRuleContext_default = { name: "AisQueryRuleContext", mixins: [t({ name: "QueryRuleContext" }), n3({ connector: connectQueryRules_default }, { $$widgetType: "ais.queryRuleContext" })], props: { trackedFilters: { type: Object, required: true }, transformRuleContexts: { type: Function, required: false, default: void 0 } }, computed: { widgetParams: function() {
  return { trackedFilters: this.trackedFilters, transformRuleContexts: this.transformRuleContexts };
} }, render: function() {
  return null;
} };

// node_modules/vue-instantsearch/vue3/es/src/components/QueryRuleCustomData.vue_vue&type=script&lang.js
var QueryRuleCustomData_vue_vue_type_script_lang_default = { name: "AisQueryRuleCustomData", mixins: [t({ name: "QueryRuleCustomData" }), n3({ connector: connectQueryRules_default }, { $$widgetType: "ais.queryRuleCustomData" })], props: { transformItems: { type: Function, required: false, default: void 0 } }, computed: { widgetParams: function() {
  return { transformItems: this.transformItems };
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/QueryRuleCustomData.vue_vue&type=template&id=e4da0782&lang.js
function l3(l7, f8, m6, a10, c13, v5) {
  return l7.state ? (openBlock(), createBlock("div", { key: 0, class: l7.suit() }, [renderSlot(l7.$slots, "default", { items: l7.state.items }, function() {
    return [(openBlock(true), createBlock(Fragment, null, renderList(l7.state.items, function(n5, s6) {
      return openBlock(), createBlock("div", { key: s6 }, [renderSlot(l7.$slots, "item", { item: n5 }, function() {
        return [createVNode("pre", null, toDisplayString(n5), 1)];
      })]);
    }), 128))];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/QueryRuleCustomData.vue.js
QueryRuleCustomData_vue_vue_type_script_lang_default.render = l3, QueryRuleCustomData_vue_vue_type_script_lang_default.__file = "src/components/QueryRuleCustomData.vue";
var QueryRuleCustomData_vue_default = QueryRuleCustomData_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/RangeInput.vue_vue&type=script&lang.js
var r8 = function(t6) {
  return t6 && Boolean(t6.range) && t6.range.min !== t6.range.max;
};
var RangeInput_vue_vue_type_script_lang_default = { name: "AisRangeInput", mixins: [t({ name: "RangeInput" }), n3({ connector: connectRange_default }, { $$widgetType: "ais.rangeInput" }), r2({ mapStateToCanRefine: r8 })], props: { attribute: { type: String, required: true }, min: { type: Number, required: false, default: void 0 }, max: { type: Number, required: false, default: void 0 }, precision: { type: Number, required: false, default: 0 } }, data: function() {
  return { minInput: void 0, maxInput: void 0 };
}, updated: function() {
  this.minInput = void 0, this.maxInput = void 0;
}, computed: { widgetParams: function() {
  return { attribute: this.attribute, min: this.min, max: this.max, precision: this.precision };
}, canRefine: function() {
  return r8(this.state);
}, step: function() {
  return 1 / Math.pow(10, this.precision);
}, values: function() {
  var t6 = this.state.start, i4 = t6[0], n5 = t6[1], e7 = this.state.range, r15 = e7.min, a10 = e7.max;
  return { min: i4 !== -1 / 0 && i4 !== r15 ? i4 : void 0, max: n5 !== 1 / 0 && n5 !== a10 ? n5 : void 0 };
} }, methods: { pick: function(t6, i4) {
  return null != t6 ? t6 : i4;
}, refine: function(t6) {
  var i4 = t6.min, n5 = t6.max;
  this.state.refine([i4, n5]);
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/RangeInput.vue_vue&type=template&id=1e17783d&lang.js
var r9 = createTextVNode("to");
var l4 = createTextVNode("Go");
function m4(i4, m6, p5, o7, c13, f8) {
  return i4.state ? (openBlock(), createBlock("div", { key: 0, class: [i4.suit(), !f8.canRefine && i4.suit("", "noRefinement")] }, [renderSlot(i4.$slots, "default", { currentRefinement: f8.values, refine: f8.refine, canRefine: f8.canRefine, range: i4.state.range, sendEvent: i4.state.sendEvent }, function() {
    return [createVNode("form", { class: i4.suit("form"), onSubmit: m6[3] || (m6[3] = withModifiers(function(e7) {
      return f8.refine({ min: f8.pick(c13.minInput, f8.values.min), max: f8.pick(c13.maxInput, f8.values.max) });
    }, ["prevent"])) }, [createVNode("label", { class: i4.suit("label") }, [renderSlot(i4.$slots, "minLabel"), createVNode("input", { type: "number", class: [i4.suit("input"), i4.suit("input", "min")], step: f8.step, min: i4.state.range.min, max: i4.state.range.max, placeholder: i4.state.range.min, value: f8.values.min, onChange: m6[1] || (m6[1] = function(e7) {
      return c13.minInput = e7.currentTarget.value;
    }) }, null, 42, ["step", "min", "max", "placeholder", "value"])], 2), createVNode("span", { class: i4.suit("separator") }, [renderSlot(i4.$slots, "separator", {}, function() {
      return [r9];
    })], 2), createVNode("label", { class: i4.suit("label") }, [renderSlot(i4.$slots, "maxLabel"), createVNode("input", { class: [i4.suit("input"), i4.suit("input", "max")], type: "number", step: f8.step, min: i4.state.range.min, max: i4.state.range.max, placeholder: i4.state.range.max, value: f8.values.max, onChange: m6[2] || (m6[2] = function(e7) {
      return c13.maxInput = e7.currentTarget.value;
    }) }, null, 42, ["step", "min", "max", "placeholder", "value"])], 2), createVNode("button", { class: i4.suit("submit"), type: "submit" }, [renderSlot(i4.$slots, "submitLabel", {}, function() {
      return [l4];
    })], 2)], 34)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/RangeInput.vue.js
RangeInput_vue_vue_type_script_lang_default.render = m4, RangeInput_vue_vue_type_script_lang_default.__file = "src/components/RangeInput.vue";
var RangeInput_vue_default = RangeInput_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/RatingMenu.vue_vue&type=script&lang.js
var RatingMenu_vue_vue_type_script_lang_default = { name: "AisRatingMenu", mixins: [t({ name: "RatingMenu" }), n3({ connector: connectRatingMenu_default }, { $$widgetType: "ais.ratingMenu" }), r2({ mapStateToCanRefine: function(t6) {
  return false === t6.hasNoResults;
} })], props: { attribute: { type: String, required: true }, max: { type: Number, default: void 0 } }, computed: { widgetParams: function() {
  return { attribute: this.attribute, max: this.max };
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/RatingMenu.vue_vue&type=template&id=9254de68&lang.js
var c11 = createVNode("svg", { xmlns: "http://www.w3.org/2000/svg", style: { display: "none" } }, [createVNode("symbol", { id: "ais-RatingMenu-starSymbol", viewBox: "0 0 24 24" }, [createVNode("path", { d: "M12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z" })]), createVNode("symbol", { id: "ais-RatingMenu-starEmptySymbol", viewBox: "0 0 24 24" }, [createVNode("path", { d: "M12 6.76l1.379 4.246h4.465l-3.612 2.625 1.379 4.246-3.611-2.625-3.612 2.625 1.379-4.246-3.612-2.625h4.465l1.38-4.246zm0-6.472l-2.833 8.718h-9.167l7.416 5.389-2.833 8.718 7.417-5.388 7.416 5.388-2.833-8.718 7.417-5.389h-9.167l-2.833-8.718z" })])], -1);
var h4 = createVNode("use", { "xlink:href": "#ais-RatingMenu-starSymbol" }, null, -1);
var d3 = createVNode("use", { "xlink:href": "#ais-RatingMenu-starEmptySymbol" }, null, -1);
var f7 = createTextVNode("& Up");
function m5(o7, m6, p5, v5, y2, g4) {
  return o7.state ? (openBlock(), createBlock("div", { key: 0, class: o7.suit() }, [renderSlot(o7.$slots, "default", { items: o7.state.items, refine: o7.state.refine, createURL: o7.state.createURL, sendEvent: o7.state.sendEvent }, function() {
    return [c11, createVNode("ul", { class: o7.suit("list") }, [(openBlock(true), createBlock(Fragment, null, renderList(o7.state.items, function(r15, c13) {
      return openBlock(), createBlock("li", { key: c13, class: [o7.suit("item"), r15.isRefined && o7.suit("item", "selected")] }, [createVNode("a", { href: o7.state.createURL(r15.value), "aria-label": r15.value + " & Up", class: o7.suit("link"), onClick: withModifiers(function(t6) {
        return o7.state.refine(r15.value);
      }, ["prevent"]) }, [(openBlock(true), createBlock(Fragment, null, renderList(r15.stars, function(s6, i4) {
        return openBlock(), createBlock(Fragment, null, [s6 ? (openBlock(), createBlock("svg", { "aria-hidden": "true", width: "24", height: "24", class: [o7.suit("starIcon"), o7.suit("starIcon--full")], key: i4 + "-full" }, [h4], 2)) : (openBlock(), createBlock("svg", { class: [o7.suit("starIcon"), o7.suit("starIcon--empty")], "aria-hidden": "true", width: "24", height: "24", key: i4 + "-empty" }, [d3], 2))], 64);
      }), 256)), createVNode("span", { class: o7.suit("label"), "aria-hidden": "true" }, [renderSlot(o7.$slots, "andUp", {}, function() {
        return [f7];
      })], 2), createVNode("span", { class: o7.suit("count") }, toDisplayString(r15.count), 3)], 10, ["href", "aria-label", "onClick"])], 2);
    }), 128))], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/RatingMenu.vue.js
RatingMenu_vue_vue_type_script_lang_default.render = m5, RatingMenu_vue_vue_type_script_lang_default.__file = "src/components/RatingMenu.vue";
var RatingMenu_vue_default = RatingMenu_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/SearchInput.vue_vue&type=script&lang.js
var SearchInput_vue_vue_type_script_lang_default = { name: "SearchInput", mixins: [t({ name: "SearchBox" })], props: { placeholder: { type: String, default: "Search here\u2026" }, autofocus: { type: Boolean, default: false }, showLoadingIndicator: { type: Boolean, default: false }, shouldShowLoadingIndicator: { type: Boolean, default: false }, submitTitle: { type: String, default: "Search" }, resetTitle: { type: String, default: "Clear" }, value: { type: String, required: false, default: void 0 }, modelValue: { type: String, required: false, default: void 0 } }, emits: ["input", "update:modelValue", "blur", "focus", "reset"], data: function() {
  return { query: "" };
}, methods: { isFocused: function() {
  return document.activeElement === this.$refs.input;
}, onFormSubmit: function() {
  this.$refs.input.blur();
}, onFormReset: function() {
  this.$emit("input", ""), this.$emit("update:modelValue", ""), this.$emit("reset");
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/SearchInput.vue_vue&type=template&id=2eed8ffc&lang.js
var a6 = createVNode("path", { d: "M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z", fillRule: "evenodd" }, null, -1);
var r10 = createVNode("path", { d: "M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z", fillRule: "evenodd" }, null, -1);
var s4 = createVNode("g", { fill: "none", "fill-rule": "evenodd" }, [createVNode("g", { transform: "translate(1 1)", "stroke-width": "2" }, [createVNode("circle", { "stroke-opacity": ".5", cx: "18", cy: "18", r: "18" }), createVNode("path", { d: "M36 18c0-9.94-8.06-18-18-18" }, [createVNode("animateTransform", { attributeName: "transform", type: "rotate", from: "0 18 18", to: "360 18 18", dur: "1s", repeatCount: "indefinite" })])])], -1);
function u4(u10, d5, c13, m6, h5, p5) {
  return openBlock(), createBlock("form", { action: "", role: "search", novalidate: "", class: u10.suit("form"), onSubmit: d5[4] || (d5[4] = withModifiers(function() {
    for (var t6 = [], e7 = arguments.length; e7--; )
      t6[e7] = arguments[e7];
    return p5.onFormSubmit && p5.onFormSubmit.apply(p5, t6);
  }, ["prevent"])), onReset: d5[5] || (d5[5] = withModifiers(function() {
    for (var t6 = [], e7 = arguments.length; e7--; )
      t6[e7] = arguments[e7];
    return p5.onFormReset && p5.onFormReset.apply(p5, t6);
  }, ["prevent"])) }, [createCommentVNode(" :value/@input allows us to pass v-model to the component in v2 "), createCommentVNode(" :modelValue/@update:modelValue allows us to pass v-model to the component in v3 "), createVNode("input", { type: "search", autocorrect: "off", autocapitalize: "off", autocomplete: "off", spellcheck: "false", required: "", maxlength: "512", "aria-label": "Search", placeholder: c13.placeholder, autofocus: c13.autofocus, class: u10.suit("input"), value: c13.value || c13.modelValue, onFocus: d5[1] || (d5[1] = function(t6) {
    return u10.$emit("focus", t6);
  }), onBlur: d5[2] || (d5[2] = function(t6) {
    return u10.$emit("blur", t6);
  }), onInput: d5[3] || (d5[3] = function(t6) {
    u10.$emit("input", t6.target.value), u10.$emit("update:modelValue", t6.target.value);
  }), ref: "input" }, null, 42, ["placeholder", "autofocus", "value"]), createVNode("button", { type: "submit", title: c13.submitTitle, class: u10.suit("submit"), hidden: c13.showLoadingIndicator && c13.shouldShowLoadingIndicator }, [renderSlot(u10.$slots, "submit-icon", {}, function() {
    return [(openBlock(), createBlock("svg", { role: "img", xmlns: "http://www.w3.org/2000/svg", width: "10", height: "10", viewBox: "0 0 40 40", class: u10.suit("submitIcon") }, [a6], 2))];
  })], 10, ["title", "hidden"]), createVNode("button", { type: "reset", title: c13.resetTitle, class: u10.suit("reset"), hidden: !c13.value && !c13.modelValue || c13.showLoadingIndicator && c13.shouldShowLoadingIndicator }, [renderSlot(u10.$slots, "reset-icon", {}, function() {
    return [(openBlock(), createBlock("svg", { role: "img", xmlns: "http://www.w3.org/2000/svg", width: "1em", height: "1em", viewBox: "0 0 20 20", class: u10.suit("resetIcon") }, [r10], 2))];
  })], 10, ["title", "hidden"]), c13.showLoadingIndicator ? (openBlock(), createBlock("span", { key: 0, hidden: !c13.shouldShowLoadingIndicator, class: u10.suit("loadingIndicator") }, [renderSlot(u10.$slots, "loading-indicator", {}, function() {
    return [(openBlock(), createBlock("svg", { role: "img", "aria-label": "Results are loading", width: "16", height: "16", xmlns: "http://www.w3.org/2000/svg", stroke: "#444", viewBox: "0 0 38 38", class: u10.suit("loadingIcon") }, [s4], 2))];
  })], 10, ["hidden"])) : createCommentVNode("v-if", true)], 34);
}

// node_modules/vue-instantsearch/vue3/es/src/components/SearchInput.vue.js
SearchInput_vue_vue_type_script_lang_default.render = u4, SearchInput_vue_vue_type_script_lang_default.__file = "src/components/SearchInput.vue";
var SearchInput_vue_default = SearchInput_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/RefinementList.vue_vue&type=script&lang.js
var a7 = function() {
};
var RefinementList_vue_vue_type_script_lang_default = { name: "AisRefinementList", components: { SearchInput: SearchInput_vue_default, AisHighlight: Highlight_vue_default }, mixins: [t({ name: "RefinementList" }), n3({ connector: connectRefinementList_default }, { $$widgetType: "ais.refinementList" }), r2({ mapStateToCanRefine: function(e7) {
  return Boolean(e7.canRefine);
} })], props: { attribute: { type: String, required: true }, searchable: { type: Boolean, default: void 0 }, searchablePlaceholder: { type: String, required: false, default: "Search here\u2026" }, operator: { default: "or", validator: function(e7) {
  return "and" === e7 || "or" === e7;
}, required: false }, limit: { type: Number, required: false, default: void 0 }, showMoreLimit: { type: Number, required: false, default: void 0 }, showMore: { type: Boolean, required: false, default: false }, sortBy: { type: [Array, Function], required: false, default: void 0 }, transformItems: { type: Function, required: false, default: void 0 } }, data: function() {
  return { searchForFacetValuesQuery: "" };
}, computed: { searchForFacetValues: { get: function() {
  return this.searchForFacetValuesQuery;
}, set: function(e7) {
  this.state.searchForItems(e7), this.searchForFacetValuesQuery = e7;
} }, toggleShowMore: function() {
  return this.state.toggleShowMore || a7;
}, items: function() {
  return this.state.items.map(function(e7) {
    return Object.assign({}, e7, { _highlightResult: { item: { value: e7.highlighted } } });
  });
}, widgetParams: function() {
  return { attribute: this.attribute, operator: this.operator, limit: this.limit, showMore: this.showMore, showMoreLimit: this.showMoreLimit, sortBy: this.sortBy, escapeFacetValues: true, transformItems: this.transformItems };
} }, methods: { refine: function(e7) {
  this.state.refine(e7), this.searchForFacetValuesQuery = "";
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/RefinementList.vue_vue&type=template&id=28927239&lang.js
function u5(u10, h5, f8, g4, m6, d5) {
  var v5 = resolveComponent("search-input"), w2 = resolveComponent("ais-highlight");
  return u10.state ? (openBlock(), createBlock("div", { key: 0, class: [u10.suit(), !u10.state.canRefine && u10.suit("", "noRefinement")] }, [renderSlot(u10.$slots, "default", { items: d5.items, refine: d5.refine, searchForItems: u10.state.searchForItems, searchForItemsQuery: m6.searchForFacetValuesQuery, toggleShowMore: d5.toggleShowMore, canToggleShowMore: u10.state.canToggleShowMore, isShowingMore: u10.state.isShowingMore, createURL: u10.state.createURL, isFromSearch: u10.state.isFromSearch, canRefine: u10.state.canRefine, sendEvent: u10.state.sendEvent }, function() {
    var e7;
    return [f8.searchable ? (openBlock(), createBlock("div", { key: 0, class: u10.suit("searchBox") }, [createVNode(v5, { modelValue: d5.searchForFacetValues, "onUpdate:modelValue": h5[1] || (h5[1] = function(e8) {
      return d5.searchForFacetValues = e8;
    }), placeholder: f8.searchablePlaceholder, "class-names": u10.classNames }, null, 8, ["modelValue", "placeholder", "class-names"])], 2)) : createCommentVNode("v-if", true), u10.state.isFromSearch && 0 === d5.items.length ? renderSlot(u10.$slots, "noResults", { key: 1, query: d5.searchForFacetValues }, function() {
      return [createVNode("div", { class: u10.suit("noResults") }, "No results.", 2)];
    }) : createCommentVNode("v-if", true), createVNode("ul", { class: u10.suit("list") }, [(openBlock(true), createBlock(Fragment, null, renderList(d5.items, function(e8) {
      return openBlock(), createBlock("li", { class: [u10.suit("item"), e8.isRefined && u10.suit("item", "selected")], key: e8.value }, [renderSlot(u10.$slots, "item", { item: e8, refine: d5.refine, createURL: u10.state.createURL }, function() {
        return [createVNode("label", { class: u10.suit("label") }, [createVNode("input", { class: u10.suit("checkbox"), type: "checkbox", value: e8.value, checked: e8.isRefined, onChange: function(s6) {
          return d5.refine(e8.value);
        } }, null, 42, ["value", "checked", "onChange"]), f8.searchable ? (openBlock(), createBlock("span", { key: 0, class: u10.suit("labelText") }, [createVNode(w2, { attribute: "item", hit: e8 }, null, 8, ["hit"])], 2)) : (openBlock(), createBlock("span", { key: 1, class: u10.suit("labelText") }, toDisplayString(e8.label), 3)), createVNode("span", { class: u10.suit("count") }, toDisplayString(e8.count), 3)], 2)];
      })], 2);
    }), 128))], 2), f8.showMore ? (openBlock(), createBlock("button", { key: 2, class: [u10.suit("showMore"), (e7 = {}, e7[u10.suit("showMore", "disabled")] = !u10.state.canToggleShowMore, e7)], onClick: h5[2] || (h5[2] = function() {
      for (var e8 = [], s6 = arguments.length; s6--; )
        e8[s6] = arguments[s6];
      return d5.toggleShowMore && d5.toggleShowMore.apply(d5, e8);
    }), disabled: !u10.state.canToggleShowMore }, [renderSlot(u10.$slots, "showMoreLabel", { isShowingMore: u10.state.isShowingMore }, function() {
      return [createTextVNode("Show " + toDisplayString(u10.state.isShowingMore ? "less" : "more"), 1)];
    })], 10, ["disabled"])) : createCommentVNode("v-if", true)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/RefinementList.vue.js
RefinementList_vue_vue_type_script_lang_default.render = u5, RefinementList_vue_vue_type_script_lang_default.__file = "src/components/RefinementList.vue";
var RefinementList_vue_default = RefinementList_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/connectors/connectStateResults.js
function connectStateResults_default(n5, e7) {
  return void 0 === e7 && (e7 = function() {
  }), function(s6) {
    return void 0 === s6 && (s6 = {}), { init: function(t6) {
      var e8 = t6.instantSearchInstance;
      n5({ state: void 0, results: void 0, instantSearchInstance: e8, widgetParams: s6 }, true);
    }, render: function(e8) {
      var a10 = e8.results, i4 = e8.instantSearchInstance, r15 = e8.state, o7 = e({}, a10), c13 = e({}, r15);
      n5({ results: o7, state: c13, instantSearchInstance: i4, widgetParams: s6 }, false);
    }, dispose: function() {
      e7();
    } };
  };
}

// node_modules/vue-instantsearch/vue3/es/src/components/StateResults.vue_vue&type=script&lang.js
var StateResults_vue_vue_type_script_lang_default = { name: "AisStateResults", mixins: [n3({ connector: connectStateResults_default }, { $$widgetType: "ais.stateResults" }), t({ name: "StateResults" })], computed: { stateResults: function() {
  var t6 = this.state, e7 = t6.state, i4 = t6.results;
  return e({}, i4, { results: i4, state: e7 });
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/StateResults.vue_vue&type=template&id=5992f3d5&lang.js
var u6 = createVNode("p", null, " Use this component to have a different layout based on a certain state. ", -1);
var o4 = createVNode("p", null, " Fill in the slot, and get access to the following things: ", -1);
function r11(r15, i4, c13, f8, p5, d5) {
  return r15.state && r15.state.state && r15.state.results ? (openBlock(), createBlock("div", { key: 0, class: r15.suit() }, [renderSlot(r15.$slots, "default", d5.stateResults, function() {
    return [u6, o4, createVNode("pre", null, "results: " + toDisplayString(Object.keys(r15.state.results)), 1), createVNode("pre", null, "state: " + toDisplayString(Object.keys(r15.state.state)), 1)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/StateResults.vue.js
StateResults_vue_vue_type_script_lang_default.render = r11, StateResults_vue_vue_type_script_lang_default.__file = "src/components/StateResults.vue";
var StateResults_vue_default = StateResults_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/SearchBox.vue_vue&type=script&lang.js
var SearchBox_vue_vue_type_script_lang_default = { name: "AisSearchBox", mixins: [n3({ connector: connectSearchBox_default }, { $$widgetType: "ais.searchBox" }), t({ name: "SearchBox" })], components: { SearchInput: SearchInput_vue_default }, props: { placeholder: { type: String, default: "Search here\u2026" }, autofocus: { type: Boolean, default: false }, showLoadingIndicator: { type: Boolean, default: false }, submitTitle: { type: String, default: "Search" }, resetTitle: { type: String, default: "Clear" }, value: { type: String, default: void 0 }, modelValue: { type: String, default: void 0 }, queryHook: { type: Function, default: void 0 } }, data: function() {
  return { localValue: "", isVue2: e2, isVue3: o };
}, computed: { widgetParams: function() {
  return { queryHook: this.queryHook };
}, isControlled: function() {
  return void 0 !== this.value || void 0 !== this.modelValue;
}, model: function() {
  return this.value || this.modelValue;
}, currentRefinement: { get: function() {
  this.isControlled && this.model !== this.localValue && (this.localValue = this.model, this.$emit("input", this.model), this.$emit("update:modelValue", this.model), this.state.refine(this.model));
  var e7 = this.$refs.searchInput;
  return e7 && e7.isFocused() ? this.localValue : this.model || this.state.query || "";
}, set: function(e7) {
  this.localValue = e7, this.state.refine(e7), this.isControlled && (this.$emit("input", e7), this.$emit("update:modelValue", e7));
} } } };

// node_modules/vue-instantsearch/vue3/es/src/components/SearchBox.vue_vue&type=template&id=27029d83&lang.js
function a8(a10, l7, c13, d5, f8, m6) {
  var h5 = resolveComponent("search-input");
  return a10.state ? (openBlock(), createBlock("div", { key: 0, class: a10.suit() }, [renderSlot(a10.$slots, "default", { currentRefinement: m6.currentRefinement, isSearchStalled: a10.state.isSearchStalled, refine: a10.state.refine }, function() {
    return [createVNode(h5, { onFocus: l7[1] || (l7[1] = function(e7) {
      return a10.$emit("focus", e7);
    }), onBlur: l7[2] || (l7[2] = function(e7) {
      return a10.$emit("blur", e7);
    }), onReset: l7[3] || (l7[3] = function(e7) {
      return a10.$emit("reset");
    }), placeholder: c13.placeholder, autofocus: c13.autofocus, "show-loading-indicator": c13.showLoadingIndicator, "should-show-loading-indicator": a10.state.isSearchStalled, "submit-title": c13.submitTitle, "reset-title": c13.resetTitle, "class-names": a10.classNames, modelValue: m6.currentRefinement, "onUpdate:modelValue": l7[4] || (l7[4] = function(e7) {
      return m6.currentRefinement = e7;
    }), ref: "searchInput" }, createSlots({ default: withCtx(function() {
      return [f8.isVue2 ? renderSlot(a10.$slots, "loading-indicator", { key: 0, slot: "loading-indicator" }) : createCommentVNode("v-if", true), f8.isVue2 ? renderSlot(a10.$slots, "submit-icon", { key: 1, slot: "submit-icon" }) : createCommentVNode("v-if", true), f8.isVue2 ? renderSlot(a10.$slots, "reset-icon", { key: 2, slot: "reset-icon" }) : createCommentVNode("v-if", true)];
    }), _: 2 }, [f8.isVue3 ? { name: "loading-indicator", fn: withCtx(function() {
      return [renderSlot(a10.$slots, "loading-indicator")];
    }) } : void 0, f8.isVue3 ? { name: "submit-icon", fn: withCtx(function() {
      return [renderSlot(a10.$slots, "submit-icon")];
    }) } : void 0, f8.isVue3 ? { name: "reset-icon", fn: withCtx(function() {
      return [renderSlot(a10.$slots, "reset-icon")];
    }) } : void 0]), 1032, ["placeholder", "autofocus", "show-loading-indicator", "should-show-loading-indicator", "submit-title", "reset-title", "class-names", "modelValue"])];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/SearchBox.vue.js
SearchBox_vue_vue_type_script_lang_default.render = a8, SearchBox_vue_vue_type_script_lang_default.__file = "src/components/SearchBox.vue";
var SearchBox_vue_default = SearchBox_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/Snippet.vue_vue&type=script&lang.js
var Snippet_vue_vue_type_script_lang_default = { name: "AisSnippet", mixins: [t({ name: "Snippet" })], components: { AisHighlighter: Highlighter_vue_default }, props: { hit: { type: Object, required: true }, attribute: { type: String, required: true }, highlightedTagName: { type: String, default: "mark" } } };

// node_modules/vue-instantsearch/vue3/es/src/components/Snippet.vue_vue&type=template&id=eb4966c6&lang.js
function e6(e7, a10, g4, r15, u10, l7) {
  var p5 = resolveComponent("ais-highlighter");
  return openBlock(), createBlock(p5, { hit: g4.hit, attribute: g4.attribute, "highlighted-tag-name": g4.highlightedTagName, suit: e7.suit, "highlight-property": "_snippetResult", "pre-tag": "<mark>", "post-tag": "</mark>" }, null, 8, ["hit", "attribute", "highlighted-tag-name", "suit"]);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Snippet.vue.js
Snippet_vue_vue_type_script_lang_default.render = e6, Snippet_vue_vue_type_script_lang_default.__file = "src/components/Snippet.vue";
var Snippet_vue_default = Snippet_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/SortBy.vue_vue&type=script&lang.js
var SortBy_vue_vue_type_script_lang_default = { name: "AisSortBy", mixins: [t({ name: "SortBy" }), n3({ connector: connectSortBy_default }, { $$widgetType: "ais.sortBy" }), r2({ mapStateToCanRefine: function(t6) {
  return false === t6.hasNoResults;
} })], props: { items: { type: Array, required: true }, transformItems: { type: Function, default: void 0 } }, computed: { widgetParams: function() {
  return { items: this.items, transformItems: this.transformItems };
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/SortBy.vue_vue&type=template&id=b69b3b76&lang.js
function l5(l7, o7, c13, f8, v5, m6) {
  return l7.state ? (openBlock(), createBlock("div", { key: 0, class: l7.suit() }, [renderSlot(l7.$slots, "default", { items: l7.state.options, hasNoResults: l7.state.hasNoResults, refine: l7.state.refine, currentRefinement: l7.state.currentRefinement }, function() {
    return [createVNode("select", { class: l7.suit("select"), onChange: o7[1] || (o7[1] = function(e7) {
      return l7.state.refine(e7.currentTarget.value);
    }) }, [(openBlock(true), createBlock(Fragment, null, renderList(l7.state.options, function(n5) {
      return openBlock(), createBlock("option", { key: n5.value, class: l7.suit("option"), value: n5.value, selected: n5.value === l7.state.currentRefinement }, toDisplayString(n5.label), 11, ["value", "selected"]);
    }), 128))], 34)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/SortBy.vue.js
SortBy_vue_vue_type_script_lang_default.render = l5, SortBy_vue_vue_type_script_lang_default.__file = "src/components/SortBy.vue";
var SortBy_vue_default = SortBy_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/Stats.vue_vue&type=script&lang.js
var Stats_vue_vue_type_script_lang_default = { name: "AisStats", mixins: [n3({ connector: connectStats_default }, { $$widgetType: "ais.stats" }), t({ name: "Stats" })], computed: { widgetParams: function() {
  return {};
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/Stats.vue_vue&type=template&id=7337491f&lang.js
function u7(u10, c13, S, f8, d5, g4) {
  return u10.state ? (openBlock(), createBlock("div", { key: 0, class: u10.suit() }, [renderSlot(u10.$slots, "default", mergeProps(u10.state, { results: u10.state.instantSearchInstance.helper.lastResults }), function() {
    return [createVNode("span", { class: u10.suit("text") }, [u10.state.areHitsSorted ? (openBlock(), createBlock(Fragment, { key: 0 }, [createTextVNode(toDisplayString(u10.state.nbSortedHits.toLocaleString()) + " relevant results sorted out of " + toDisplayString(u10.state.nbHits.toLocaleString()), 1)], 2112)) : (openBlock(), createBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(u10.state.nbHits.toLocaleString()) + " results", 1)], 2112)), createTextVNode(" found in " + toDisplayString(u10.state.processingTimeMS.toLocaleString()) + "ms", 1)], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/Stats.vue.js
Stats_vue_vue_type_script_lang_default.render = u7, Stats_vue_vue_type_script_lang_default.__file = "src/components/Stats.vue";
var Stats_vue_default = Stats_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/ToggleRefinement.vue_vue&type=script&lang.js
var r12 = function(e7) {
  return Boolean(e7.value && e7.value.count);
};
var ToggleRefinement_vue_vue_type_script_lang_default = { name: "AisToggleRefinement", mixins: [t({ name: "ToggleRefinement" }), n3({ connector: connectToggleRefinement_default }, { $$widgetType: "ais.toggleRefinement" }), r2({ mapStateToCanRefine: r12 })], props: { attribute: { type: String, required: true }, label: { type: String, required: true }, on: { type: [String, Number, Boolean, Array], required: false, default: true }, off: { type: [String, Number, Boolean, Array], required: false, default: void 0 } }, computed: { widgetParams: function() {
  return { attribute: this.attribute, label: this.label, on: this.on, off: this.off };
}, canRefine: function() {
  return r12(this.state);
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/ToggleRefinement.vue_vue&type=template&id=14e4586f&lang.js
function u8(u10, c13, i4, o7, f8, r15) {
  return u10.state ? (openBlock(), createBlock("div", { key: 0, class: [u10.suit(), !r15.canRefine && u10.suit("", "noRefinement")] }, [renderSlot(u10.$slots, "default", { value: u10.state.value, canRefine: r15.canRefine, refine: u10.state.refine, createURL: u10.state.createURL, sendEvent: u10.state.sendEvent }, function() {
    return [createVNode("label", { class: u10.suit("label") }, [createVNode("input", { class: u10.suit("checkbox"), type: "checkbox", name: u10.state.value.name, value: i4.on, checked: u10.state.value.isRefined, onChange: c13[1] || (c13[1] = function(e7) {
      return u10.state.refine(u10.state.value);
    }) }, null, 42, ["name", "value", "checked"]), createVNode("span", { class: u10.suit("labelText") }, toDisplayString(i4.label), 3), null !== u10.state.value.count ? (openBlock(), createBlock("span", { key: 0, class: u10.suit("count") }, toDisplayString(u10.state.value.count.toLocaleString()), 3)) : createCommentVNode("v-if", true)], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/ToggleRefinement.vue.js
ToggleRefinement_vue_vue_type_script_lang_default.render = u8, ToggleRefinement_vue_vue_type_script_lang_default.__file = "src/components/ToggleRefinement.vue";
var ToggleRefinement_vue_default = ToggleRefinement_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/VoiceSearch.vue_vue&type=script&lang.js
var VoiceSearch_vue_vue_type_script_lang_default = { name: "AisVoiceSearch", mixins: [n3({ connector: connectVoiceSearch_default }, { $$widgetType: "ais.voiceSearch" }), t({ name: "VoiceSearch" })], props: { searchAsYouSpeak: { type: Boolean, required: false, default: void 0 }, language: { type: String, default: void 0 }, additionalQueryParameters: { type: Object, default: void 0 }, buttonTitle: { type: String, required: false, default: "Search by voice" }, disabledButtonTitle: { type: String, required: false, default: "Search by voice (not supported on this browser)" } }, data: function() {
  return { buttonSvgAttrs: { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" } };
}, computed: { widgetParams: function() {
  return { searchAsYouSpeak: this.searchAsYouSpeak, language: this.language, additionalQueryParameters: this.additionalQueryParameters };
}, errorNotAllowed: function() {
  return "error" === this.state.voiceListeningState.status && "not-allowed" === this.state.voiceListeningState.errorCode;
}, rootSlotProps: function() {
  return { isBrowserSupported: this.state.isBrowserSupported, isListening: this.state.isListening, toggleListening: this.state.toggleListening, voiceListeningState: this.state.voiceListeningState };
}, innerSlotProps: function() {
  return { status: this.state.voiceListeningState.status, errorCode: this.state.voiceListeningState.errorCode, isListening: this.state.isListening, transcript: this.state.voiceListeningState.transcript, isSpeechFinal: this.state.voiceListeningState.isSpeechFinal, isBrowserSupported: this.state.isBrowserSupported };
} }, methods: { handleClick: function(t6) {
  t6.currentTarget.blur(), this.state.toggleListening();
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/VoiceSearch.vue_vue&type=template&id=24b0f67a&lang.js
var r13 = createVNode("line", { x1: "1", y1: "1", x2: "23", y2: "23" }, null, -1);
var u9 = createVNode("path", { d: "M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6" }, null, -1);
var a9 = createVNode("path", { d: "M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23" }, null, -1);
var d4 = createVNode("line", { x1: "12", y1: "19", x2: "12", y2: "23" }, null, -1);
var p4 = createVNode("line", { x1: "8", y1: "23", x2: "16", y2: "23" }, null, -1);
var v4 = createVNode("path", { d: "M19 10v2a7 7 0 0 1-14 0v-2" }, null, -1);
var y = createVNode("line", { x1: "12", y1: "19", x2: "12", y2: "23" }, null, -1);
var c12 = createVNode("line", { x1: "8", y1: "23", x2: "16", y2: "23" }, null, -1);
function x(x2, f8, b2, S, g4, h5) {
  return x2.state ? (openBlock(), createBlock("div", { key: 0, class: x2.suit() }, [renderSlot(x2.$slots, "default", h5.rootSlotProps, function() {
    return [createVNode("button", { type: "button", class: x2.suit("button"), title: x2.state.isBrowserSupported ? b2.buttonTitle : b2.disabledButtonTitle, disabled: !x2.state.isBrowserSupported, onClick: f8[1] || (f8[1] = function() {
      for (var t6 = [], l7 = arguments.length; l7--; )
        t6[l7] = arguments[l7];
      return h5.handleClick && h5.handleClick.apply(h5, t6);
    }) }, [renderSlot(x2.$slots, "buttonText", h5.innerSlotProps, function() {
      return [h5.errorNotAllowed ? (openBlock(), createBlock("svg", mergeProps({ key: 0 }, g4.buttonSvgAttrs), [r13, u9, a9, d4, p4], 16)) : (openBlock(), createBlock("svg", mergeProps({ key: 1 }, g4.buttonSvgAttrs), [createVNode("path", { d: "M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z", fill: x2.state.isListening ? "currentColor" : "none" }, null, 8, ["fill"]), v4, y, c12], 16))];
    })], 10, ["title", "disabled"]), createVNode("div", { class: x2.suit("status") }, [renderSlot(x2.$slots, "status", h5.innerSlotProps, function() {
      return [createVNode("p", null, toDisplayString(x2.state.voiceListeningState.transcript), 1)];
    })], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/VoiceSearch.vue.js
VoiceSearch_vue_vue_type_script_lang_default.render = x, VoiceSearch_vue_vue_type_script_lang_default.__file = "src/components/VoiceSearch.vue";
var VoiceSearch_vue_default = VoiceSearch_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/RelevantSort.vue_vue&type=script&lang.js
var RelevantSort_vue_vue_type_script_lang_default = { name: "AisRelevantSort", mixins: [t({ name: "RelevantSort" }), n3({ connector: connectRelevantSort_default }, { $$widgetType: "ais.relevantSort" })], methods: { refine: function() {
  this.state.isRelevantSorted ? this.state.refine(0) : this.state.refine(void 0);
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/RelevantSort.vue_vue&type=template&id=257b248b&lang.js
function l6(l7, o7, u10, v5, d5, f8) {
  return l7.state && l7.state.isVirtualReplica ? (openBlock(), createBlock("div", { key: 0, class: l7.suit() }, [renderSlot(l7.$slots, "default", { isRelevantSorted: l7.state.isRelevantSorted, refine: l7.state.refine }, function() {
    return [createVNode("div", { class: l7.suit("text") }, [renderSlot(l7.$slots, "text", { isRelevantSorted: l7.state.isRelevantSorted })], 2), createVNode("button", { type: "button", class: l7.suit("button"), onClick: o7[1] || (o7[1] = function(t6) {
      return f8.refine();
    }) }, [renderSlot(l7.$slots, "button", { isRelevantSorted: l7.state.isRelevantSorted }, function() {
      return [createTextVNode(toDisplayString(l7.state.isRelevantSorted ? "See all results" : "See relevant results"), 1)];
    })], 2)];
  })], 2)) : createCommentVNode("v-if", true);
}

// node_modules/vue-instantsearch/vue3/es/src/components/RelevantSort.vue.js
RelevantSort_vue_vue_type_script_lang_default.render = l6, RelevantSort_vue_vue_type_script_lang_default.__file = "src/components/RelevantSort.vue";
var RelevantSort_vue_default = RelevantSort_vue_vue_type_script_lang_default;

// node_modules/vue-instantsearch/vue3/es/src/components/DynamicWidgets.js
var DynamicWidgets_default = { name: "AisDynamicWidgets", mixins: [n3({ connector: connectDynamicWidgets_default }, { $$widgetType: "ais.dynamicWidgets" }), t({ name: "DynamicWidgets" })], props: { transformItems: { type: Function, default: void 0 }, facets: { type: Array, default: void 0 }, maxValuesPerFacet: { type: Number, default: void 0 } }, render: n(function(t6) {
  var i4 = this, s6 = /* @__PURE__ */ new Map();
  if ((p(this) || []).forEach(function(e7) {
    var r15 = function t7(e8) {
      var i5, r16 = e8.props;
      if (r16) {
        if (r16.attribute)
          return r16.attribute;
        if (Array.isArray(r16.attributes))
          return r16.attributes[0];
      }
      if (i5 = e8.children && e8.children.default && e8.children.default(), Array.isArray(i5))
        return i5.reduce(function(e9, i6) {
          return e9 || t7(i6);
        }, void 0);
    }(e7);
    r15 && s6.set(r15, t6("div", { key: r15, class: [i4.suit("widget")] }, [e7]));
  }), !this.state) {
    var a10 = [];
    return s6.forEach(function(t7) {
      return a10.push(t7);
    }), t6("div", e({ class: [this.suit()] }, { attrs: { hidden: true } }), a10);
  }
  return t6("div", { class: [this.suit()] }, this.state.attributesToRender.map(function(t7) {
    return s6.get(t7);
  }));
}), computed: { widgetParams: function() {
  return { transformItems: this.transformItems, facets: this.facets, maxValuesPerFacet: this.maxValuesPerFacet, widgets: [] };
} } };

// node_modules/vue-instantsearch/vue3/es/src/components/ExperimentalDynamicWidgets.js
var ExperimentalDynamicWidgets_default = Object.assign({}, DynamicWidgets_default, { name: "AisExperimentalDynamicWidgets", mounted: function() {
  a("Use AisDynamicWidgets instead of AisExperimentalDynamicWidgets.");
} });

// node_modules/vue-instantsearch/vue3/es/src/widgets.js
var widgets_exports = {};
__export(widgets_exports, {
  AisAutocomplete: () => Autocomplete_vue_default,
  AisBreadcrumb: () => Breadcrumb_vue_default,
  AisClearRefinements: () => ClearRefinements_vue_default,
  AisConfigure: () => Configure_default,
  AisCurrentRefinements: () => CurrentRefinements_vue_default,
  AisDynamicWidgets: () => DynamicWidgets_default,
  AisExperimentalConfigureRelatedItems: () => ConfigureRelatedItems_default,
  AisExperimentalDynamicWidgets: () => ExperimentalDynamicWidgets_default,
  AisHierarchicalMenu: () => HierarchicalMenu_vue_default,
  AisHighlight: () => Highlight_vue_default,
  AisHits: () => Hits_vue_default,
  AisHitsPerPage: () => HitsPerPage_vue_default,
  AisIndex: () => Index_default,
  AisInfiniteHits: () => InfiniteHits_vue_default,
  AisInstantSearch: () => InstantSearch_default2,
  AisInstantSearchSsr: () => InstantSearchSsr_default,
  AisMenu: () => Menu_vue_default,
  AisMenuSelect: () => MenuSelect_vue_default,
  AisNumericMenu: () => NumericMenu_vue_default,
  AisPagination: () => Pagination_vue_default,
  AisPanel: () => Panel_vue_default,
  AisPoweredBy: () => PoweredBy_vue_default,
  AisQueryRuleContext: () => QueryRuleContext_default,
  AisQueryRuleCustomData: () => QueryRuleCustomData_vue_default,
  AisRangeInput: () => RangeInput_vue_default,
  AisRatingMenu: () => RatingMenu_vue_default,
  AisRefinementList: () => RefinementList_vue_default,
  AisRelevantSort: () => RelevantSort_vue_default,
  AisSearchBox: () => SearchBox_vue_default,
  AisSnippet: () => Snippet_vue_default,
  AisSortBy: () => SortBy_vue_default,
  AisStateResults: () => StateResults_vue_default,
  AisStats: () => Stats_vue_default,
  AisToggleRefinement: () => ToggleRefinement_vue_default,
  AisVoiceSearch: () => VoiceSearch_vue_default
});

// node_modules/vue-instantsearch/vue3/es/src/plugin.js
var o5 = { install: function(o7) {
  Object.keys(widgets_exports).forEach(function(t6) {
    o7.component(widgets_exports[t6].name, widgets_exports[t6]);
  });
} };

// node_modules/vue-instantsearch/vue3/es/src/util/createServerRootMixin.js
function r14(e7, n5) {
  void 0 === n5 && (n5 = {});
  var r15 = n5.mixins;
  void 0 === r15 && (r15 = []);
  var s6, o7 = { serverPrefetch: void 0, fetch: void 0, _base: void 0, name: "ais-ssr-root-component" }, i4 = Object.assign({}, e7.$options, o7);
  return i4.mixins = r15.concat(i4.mixins || []), s6 = createSSRApp(i4), e7.$router && s6.use(e7.$router), e7.$store && s6.use(e7.$store), s6.$slots = e7.$slots, s6.$root = e7.$root, s6;
}
function s5(t6, r15) {
  var s6, o7 = es_default(t6);
  return o7.findResultsState = function(t7) {
    var e7, n5, i4 = t7.component, a10 = t7.renderToString;
    if (!a10)
      throw new Error("findResultsState requires `renderToString: (component) => Promise<string>` in the first argument.");
    return Promise.resolve().then(function() {
      e7 = r15(i4, { mixins: [{ beforeCreate: function() {
        i4.$nuxt && (this.$nuxt = i4.$nuxt);
      }, created: function() {
        (n5 = this.instantsearch).start(), n5.started = false;
      } }] });
    }).then(function() {
      return a10(e7);
    }).then(function() {
      return t8 = n5.mainHelper, new Promise(function(e8, n6) {
        t8.searchOnlyWithDerivedHelpers(), t8.derivedHelpers[0].on("result", function() {
          e8();
        }), t8.derivedHelpers.forEach(function(t9) {
          return t9.on("error", function(t10) {
            n6(t10);
          });
        });
      });
      var t8;
    }).then(function() {
      return s6 = {}, function t8(e8, n6) {
        return n6(e8), e8.getWidgets().forEach(function(e9) {
          "ais.index" === e9.$$type && (n6(e9), t8(e9, n6));
        });
      }(n5.mainIndex, function(t8) {
        var e8 = t8.getResults(), n6 = e8._state, r16 = e8._rawResults;
        s6[t8.getIndexId()] = { state: Object.keys(n6).reduce(function(t9, e9) {
          return t9[e9] = n6[e9], t9;
        }, {}), results: r16 };
      }), o7.hydrate(s6), o7.getState();
    });
  }, o7.getState = function() {
    if (!s6)
      throw new Error("You need to wait for findResultsState to finish");
    return s6;
  }, o7.__forceRender = function(t7, e7) {
    var n5 = e7.getResults();
    if (null !== n5) {
      var r16 = n5._state, s7 = e7.getHelper();
      s7.state = r16, t7.render({ helper: s7, results: n5, scopedResults: e7.getScopedResults(), parent: e7, state: r16, templatesConfig: {}, createURL: e7.createURL, instantSearchInstance: o7, searchMetadata: { isSearchStalled: false } });
    }
  }, o7.hydrate = function(t7) {
    t7 ? (o7._initialResults = t7, o7.start(), o7.started = false) : a("The result of `findResultsState()` needs to be passed to `hydrate()`.");
  }, o7;
}
function o6(t6) {
  void 0 === t6 && (t6 = {});
  var e7 = t6.$cloneComponent;
  void 0 === e7 && (e7 = r14);
  var n5 = s5(t6, e7);
  return { provide: function() {
    return { $_ais_ssrInstantSearchInstance: this.instantsearch };
  }, data: function() {
    return { instantsearch: n5 };
  } };
}

// node_modules/vue-instantsearch/vue3/es/index.js
var es_default2 = o5;

// dep:vue-instantsearch_vue3_es
var vue_instantsearch_vue3_es_default = es_default2;
export {
  Autocomplete_vue_default as AisAutocomplete,
  Breadcrumb_vue_default as AisBreadcrumb,
  ClearRefinements_vue_default as AisClearRefinements,
  Configure_default as AisConfigure,
  CurrentRefinements_vue_default as AisCurrentRefinements,
  DynamicWidgets_default as AisDynamicWidgets,
  ConfigureRelatedItems_default as AisExperimentalConfigureRelatedItems,
  ExperimentalDynamicWidgets_default as AisExperimentalDynamicWidgets,
  HierarchicalMenu_vue_default as AisHierarchicalMenu,
  Highlight_vue_default as AisHighlight,
  Hits_vue_default as AisHits,
  HitsPerPage_vue_default as AisHitsPerPage,
  Index_default as AisIndex,
  InfiniteHits_vue_default as AisInfiniteHits,
  InstantSearch_default2 as AisInstantSearch,
  InstantSearchSsr_default as AisInstantSearchSsr,
  Menu_vue_default as AisMenu,
  MenuSelect_vue_default as AisMenuSelect,
  NumericMenu_vue_default as AisNumericMenu,
  Pagination_vue_default as AisPagination,
  Panel_vue_default as AisPanel,
  PoweredBy_vue_default as AisPoweredBy,
  QueryRuleContext_default as AisQueryRuleContext,
  QueryRuleCustomData_vue_default as AisQueryRuleCustomData,
  RangeInput_vue_default as AisRangeInput,
  RatingMenu_vue_default as AisRatingMenu,
  RefinementList_vue_default as AisRefinementList,
  RelevantSort_vue_default as AisRelevantSort,
  SearchBox_vue_default as AisSearchBox,
  Snippet_vue_default as AisSnippet,
  SortBy_vue_default as AisSortBy,
  StateResults_vue_default as AisStateResults,
  Stats_vue_default as AisStats,
  ToggleRefinement_vue_default as AisToggleRefinement,
  VoiceSearch_vue_default as AisVoiceSearch,
  o6 as createServerRootMixin,
  t as createSuitMixin,
  n3 as createWidgetMixin,
  vue_instantsearch_vue3_es_default as default
};
//# sourceMappingURL=vue-instantsearch_vue3_es.js.map
