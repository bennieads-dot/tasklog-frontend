import {
  makeRouterProps,
  useLink
} from "./chunk-BI2YMMUL.js";
import {
  makeDensityProps,
  useDensity
} from "./chunk-Y4QUIN62.js";
import {
  VIcon
} from "./chunk-2DTQAWVZ.js";
import {
  VDefaultsProvider
} from "./chunk-QDAYPKFF.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-KQUI4HDC.js";
import {
  useBackgroundColor,
  useTextColor
} from "./chunk-EEPDM3MC.js";
import {
  IconValue
} from "./chunk-AGHXXTQB.js";
import {
  makeTagProps
} from "./chunk-OUIKQSPG.js";
import {
  createSimpleFunctional,
  defineComponent,
  genericComponent,
  provideDefaults,
  useRender
} from "./chunk-QJAZDHZL.js";
import {
  Fragment,
  computed,
  createVNode,
  mergeProps,
  toRef
} from "./chunk-EFKF2LRE.js";

// node_modules/vuetify/lib/components/VBreadcrumbs/VBreadcrumbsDivider.mjs
var VBreadcrumbsDivider = createSimpleFunctional("v-breadcrumbs-divider", "li");

// node_modules/vuetify/lib/components/VBreadcrumbs/VBreadcrumbsItem.mjs
var VBreadcrumbsItem = defineComponent({
  name: "VBreadcrumbsItem",
  props: {
    active: Boolean,
    activeClass: String,
    activeColor: String,
    color: String,
    disabled: Boolean,
    title: String,
    ...makeRouterProps(),
    ...makeTagProps({
      tag: "li"
    })
  },
  setup(props, _ref) {
    let {
      slots,
      attrs
    } = _ref;
    const link = useLink(props, attrs);
    const isActive = computed(() => {
      var _link$isExactActive;
      return props.active || ((_link$isExactActive = link.isExactActive) == null ? void 0 : _link$isExactActive.value);
    });
    const color = computed(() => isActive.value ? props.activeColor : props.color);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(color);
    useRender(() => {
      var _slots$default, _slots$default2;
      const Tag = link.isLink.value ? "a" : props.tag;
      return createVNode(Tag, {
        "class": ["v-breadcrumbs-item", {
          "v-breadcrumbs-item--active": isActive.value,
          "v-breadcrumbs-item--disabled": props.disabled,
          "v-breadcrumbs-item--link": link.isLink.value,
          [`${props.activeClass}`]: isActive.value && props.activeClass
        }, textColorClasses.value],
        "style": [textColorStyles.value],
        "href": link.href.value,
        "aria-current": isActive.value ? "page" : void 0,
        "onClick": link.navigate
      }, {
        default: () => [(_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)) != null ? _slots$default : props.title]
      });
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VBreadcrumbs/VBreadcrumbs.mjs
import "/Users/benadams/Documents/Projects/flexy-vuejs-adminv1.2/package/vue3/minisidebar/node_modules/vuetify/lib/components/VBreadcrumbs/VBreadcrumbs.css";
var VBreadcrumbs = genericComponent()({
  name: "VBreadcrumbs",
  props: {
    activeClass: String,
    activeColor: String,
    bgColor: String,
    color: String,
    disabled: Boolean,
    divider: {
      type: String,
      default: "/"
    },
    icon: IconValue,
    items: {
      type: Array,
      default: () => []
    },
    ...makeDensityProps(),
    ...makeRoundedProps(),
    ...makeTagProps({
      tag: "ul"
    })
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "bgColor"));
    const {
      densityClasses
    } = useDensity(props);
    const {
      roundedClasses
    } = useRounded(props);
    provideDefaults({
      VBreadcrumbsItem: {
        activeClass: toRef(props, "activeClass"),
        activeColor: toRef(props, "activeColor"),
        color: toRef(props, "color"),
        disabled: toRef(props, "disabled")
      }
    });
    useRender(() => {
      var _slots$default;
      const hasPrepend = !!(slots.prepend || props.icon);
      return createVNode(props.tag, {
        "class": ["v-breadcrumbs", backgroundColorClasses.value, densityClasses.value, roundedClasses.value],
        "style": backgroundColorStyles.value
      }, {
        default: () => [hasPrepend && createVNode(VDefaultsProvider, {
          "key": "prepend",
          "defaults": {
            VIcon: {
              icon: props.icon,
              start: true
            }
          }
        }, {
          default: () => [createVNode("div", {
            "class": "v-breadcrumbs__prepend"
          }, [slots.prepend ? slots.prepend() : props.icon && createVNode(VIcon, null, null)])]
        }), props.items.map((item, index, array) => {
          var _slots$divider, _slots$divider2;
          return createVNode(Fragment, null, [createVNode(VBreadcrumbsItem, mergeProps({
            "key": index,
            "disabled": index >= array.length - 1
          }, typeof item === "string" ? {
            title: item
          } : item), {
            default: slots.title ? () => {
              var _slots$title;
              return (_slots$title = slots.title) == null ? void 0 : _slots$title.call(slots, {
                item,
                index
              });
            } : void 0
          }), index < array.length - 1 && createVNode(VBreadcrumbsDivider, null, {
            default: () => [(_slots$divider = (_slots$divider2 = slots.divider) == null ? void 0 : _slots$divider2.call(slots, {
              item,
              index
            })) != null ? _slots$divider : props.divider]
          })]);
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
      });
    });
    return {};
  }
});

export {
  VBreadcrumbsDivider,
  VBreadcrumbsItem,
  VBreadcrumbs
};
//# sourceMappingURL=chunk-EGXW5GCG.js.map
