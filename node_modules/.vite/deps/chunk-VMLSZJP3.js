import {
  VTextField
} from "./chunk-GDWVFFQD.js";
import {
  VList,
  VListItem,
  makeItemsProps,
  useItems
} from "./chunk-S3TNZM47.js";
import {
  VMenu
} from "./chunk-WV5256C5.js";
import {
  forwardRefs
} from "./chunk-LJBPEXTV.js";
import {
  VCheckboxBtn
} from "./chunk-IBKLIQIM.js";
import {
  VChip
} from "./chunk-YNBCO7U3.js";
import {
  VDialogTransition
} from "./chunk-OV3FARTX.js";
import {
  makeTransitionProps
} from "./chunk-S476EAAI.js";
import {
  useLocale
} from "./chunk-UC2XIHSQ.js";
import {
  useProxiedModel
} from "./chunk-7K224UN3.js";
import {
  VDefaultsProvider
} from "./chunk-QDAYPKFF.js";
import {
  IconValue
} from "./chunk-AGHXXTQB.js";
import {
  genericComponent,
  propsFactory,
  useRender,
  wrapInArray
} from "./chunk-QJAZDHZL.js";
import {
  Fragment,
  computed,
  createTextVNode,
  createVNode,
  mergeProps,
  ref
} from "./chunk-EFKF2LRE.js";

// node_modules/vuetify/lib/components/VSelect/VSelect.mjs
import "/Users/benadams/Documents/Projects/flexy-vuejs-adminv1.2/package/vue3/minisidebar/node_modules/vuetify/lib/components/VSelect/VSelect.css";
var makeSelectProps = propsFactory({
  chips: Boolean,
  closableChips: Boolean,
  eager: Boolean,
  hideNoData: Boolean,
  hideSelected: Boolean,
  menu: Boolean,
  menuIcon: {
    type: IconValue,
    default: "$dropdown"
  },
  menuProps: {
    type: Object
  },
  modelValue: {
    type: null,
    default: () => []
  },
  multiple: Boolean,
  noDataText: {
    type: String,
    default: "$vuetify.noDataText"
  },
  openOnClear: Boolean,
  ...makeItemsProps({
    itemChildren: false
  })
}, "select");
var VSelect = genericComponent()({
  name: "VSelect",
  props: {
    ...makeSelectProps(),
    ...makeTransitionProps({
      transition: {
        component: VDialogTransition
      }
    })
  },
  emits: {
    "update:modelValue": (val) => true,
    "update:menu": (val) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      t
    } = useLocale();
    const vTextFieldRef = ref();
    const menu = useProxiedModel(props, "menu");
    const {
      items,
      transformIn,
      transformOut
    } = useItems(props);
    const model = useProxiedModel(props, "modelValue", [], (v) => transformIn(wrapInArray(v)), (v) => {
      var _transformed$;
      const transformed = transformOut(v);
      return props.multiple ? transformed : (_transformed$ = transformed[0]) != null ? _transformed$ : null;
    });
    const selections = computed(() => {
      return model.value.map((v) => {
        return items.value.find((item) => item.value === v.value) || v;
      });
    });
    const selected = computed(() => selections.value.map((selection) => selection.props.value));
    function onClear(e) {
      model.value = [];
      if (props.openOnClear) {
        menu.value = true;
      }
    }
    function onClickControl() {
      if (props.hideNoData && !items.value.length)
        return;
      menu.value = !menu.value;
    }
    function onKeydown(e) {
      if (["Enter", "ArrowDown", " "].includes(e.key)) {
        menu.value = true;
      }
      if (["Escape", "Tab"].includes(e.key)) {
        menu.value = false;
      }
    }
    function select(item) {
      if (props.multiple) {
        const index = selected.value.findIndex((selection) => selection === item.value);
        if (index === -1) {
          model.value = [...model.value, item];
        } else {
          const value = [...model.value];
          value.splice(index, 1);
          model.value = value;
        }
      } else {
        model.value = [item];
        menu.value = false;
      }
    }
    useRender(() => {
      const hasChips = !!(props.chips || slots.chip);
      return createVNode(VTextField, {
        "ref": vTextFieldRef,
        "modelValue": model.value.map((v) => v.props.value).join(", "),
        "onUpdate:modelValue": (v) => {
          if (v == null)
            model.value = [];
        },
        "validationValue": props.modelValue,
        "class": ["v-select", {
          "v-select--active-menu": menu.value,
          "v-select--chips": !!props.chips,
          [`v-select--${props.multiple ? "multiple" : "single"}`]: true
        }],
        "appendInnerIcon": props.menuIcon,
        "readonly": true,
        "onClick:clear": onClear,
        "onClick:control": onClickControl,
        "onBlur": () => menu.value = false,
        "onKeydown": onKeydown
      }, {
        ...slots,
        default: () => {
          var _slots$noData, _slots$noData2, _slots$prependItem, _slots$appendItem;
          return createVNode(Fragment, null, [createVNode(VMenu, mergeProps({
            "modelValue": menu.value,
            "onUpdate:modelValue": ($event) => menu.value = $event,
            "activator": "parent",
            "contentClass": "v-select__content",
            "eager": props.eager,
            "openOnClick": false,
            "closeOnContentClick": false,
            "transition": props.transition
          }, props.menuProps), {
            default: () => [createVNode(VList, {
              "selected": selected.value,
              "selectStrategy": props.multiple ? "independent" : "single-independent",
              "onMousedown": (e) => e.preventDefault()
            }, {
              default: () => [!items.value.length && !props.hideNoData && ((_slots$noData = (_slots$noData2 = slots["no-data"]) == null ? void 0 : _slots$noData2.call(slots)) != null ? _slots$noData : createVNode(VListItem, {
                "title": t(props.noDataText)
              }, null)), (_slots$prependItem = slots["prepend-item"]) == null ? void 0 : _slots$prependItem.call(slots), items.value.map((item, index) => {
                var _slots$item, _slots$item2;
                return (_slots$item = (_slots$item2 = slots.item) == null ? void 0 : _slots$item2.call(slots, {
                  item,
                  index,
                  props: mergeProps(item.props, {
                    onClick: () => select(item)
                  })
                })) != null ? _slots$item : createVNode(VListItem, mergeProps({
                  "key": index
                }, item.props, {
                  "onClick": () => select(item)
                }), {
                  prepend: (_ref2) => {
                    let {
                      isSelected
                    } = _ref2;
                    return props.multiple && !props.hideSelected ? createVNode(VCheckboxBtn, {
                      "modelValue": isSelected,
                      "ripple": false
                    }, null) : void 0;
                  }
                });
              }), (_slots$appendItem = slots["append-item"]) == null ? void 0 : _slots$appendItem.call(slots)]
            })]
          }), selections.value.map((item, index) => {
            function onChipClose(e) {
              e.stopPropagation();
              e.preventDefault();
              select(item);
            }
            const slotProps = {
              "onClick:close": onChipClose,
              modelValue: true
            };
            return createVNode("div", {
              "key": index,
              "class": "v-select__selection"
            }, [hasChips ? createVNode(VDefaultsProvider, {
              "defaults": {
                VChip: {
                  closable: props.closableChips,
                  size: "small",
                  text: item.title
                }
              }
            }, {
              default: () => [slots.chip ? slots.chip({
                item,
                index,
                props: slotProps
              }) : createVNode(VChip, slotProps, null)]
            }) : slots.selection ? slots.selection({
              item,
              index
            }) : createVNode("span", {
              "class": "v-select__selection-text"
            }, [item.title, props.multiple && index < selections.value.length - 1 && createVNode("span", {
              "class": "v-select__selection-comma"
            }, [createTextVNode(",")])])]);
          })]);
        }
      });
    });
    return forwardRefs({
      menu,
      select
    }, vTextFieldRef);
  }
});

export {
  makeSelectProps,
  VSelect
};
//# sourceMappingURL=chunk-VMLSZJP3.js.map
