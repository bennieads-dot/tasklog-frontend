import {
  MaybeTransition,
  makeTransitionProps
} from "./chunk-S476EAAI.js";
import {
  useLocale
} from "./chunk-UC2XIHSQ.js";
import {
  makeLocationProps,
  useLocation
} from "./chunk-RTMWBNKZ.js";
import {
  VIcon
} from "./chunk-2DTQAWVZ.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-KQUI4HDC.js";
import {
  useBackgroundColor,
  useTextColor
} from "./chunk-EEPDM3MC.js";
import {
  IconValue
} from "./chunk-AGHXXTQB.js";
import {
  makeThemeProps,
  useTheme
} from "./chunk-VR2BH4NF.js";
import {
  makeTagProps
} from "./chunk-OUIKQSPG.js";
import {
  defineComponent,
  pick,
  useRender
} from "./chunk-QJAZDHZL.js";
import {
  createVNode,
  mergeProps,
  toRef,
  vShow,
  withDirectives
} from "./chunk-EFKF2LRE.js";

// node_modules/vuetify/lib/components/VBadge/VBadge.mjs
import "/Users/benadams/Documents/Projects/flexy-vuejs-adminv1.2/package/vue3/minisidebar/node_modules/vuetify/lib/components/VBadge/VBadge.css";
var VBadge = defineComponent({
  name: "VBadge",
  inheritAttrs: false,
  props: {
    bordered: Boolean,
    color: String,
    content: [Number, String],
    dot: Boolean,
    floating: Boolean,
    icon: IconValue,
    inline: Boolean,
    label: {
      type: String,
      default: "$vuetify.badge"
    },
    max: [Number, String],
    modelValue: {
      type: Boolean,
      default: true
    },
    offsetX: [Number, String],
    offsetY: [Number, String],
    textColor: String,
    ...makeLocationProps({
      location: "top end"
    }),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...makeThemeProps(),
    ...makeTransitionProps({
      transition: "scale-rotate-transition"
    })
  },
  setup(props, ctx) {
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "color"));
    const {
      roundedClasses
    } = useRounded(props);
    const {
      t
    } = useLocale();
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(toRef(props, "textColor"));
    const {
      themeClasses
    } = useTheme();
    const {
      locationStyles
    } = useLocation(props, true, (side) => {
      var _props$offsetY, _props$offsetX;
      const base = props.floating ? props.dot ? 2 : 4 : props.dot ? 8 : 12;
      return base + (["top", "bottom"].includes(side) ? +((_props$offsetY = props.offsetY) != null ? _props$offsetY : 0) : ["left", "right"].includes(side) ? +((_props$offsetX = props.offsetX) != null ? _props$offsetX : 0) : 0);
    });
    useRender(() => {
      var _ctx$slots$default, _ctx$slots, _ctx$slots$badge, _ctx$slots2;
      const value = Number(props.content);
      const content = !props.max || isNaN(value) ? props.content : value <= props.max ? value : `${props.max}+`;
      const [badgeAttrs, attrs] = pick(ctx.attrs, ["aria-atomic", "aria-label", "aria-live", "role", "title"]);
      return createVNode(props.tag, mergeProps({
        "class": ["v-badge", {
          "v-badge--bordered": props.bordered,
          "v-badge--dot": props.dot,
          "v-badge--floating": props.floating,
          "v-badge--inline": props.inline
        }]
      }, attrs), {
        default: () => [createVNode("div", {
          "class": "v-badge__wrapper"
        }, [(_ctx$slots$default = (_ctx$slots = ctx.slots).default) == null ? void 0 : _ctx$slots$default.call(_ctx$slots), createVNode(MaybeTransition, {
          "transition": props.transition
        }, {
          default: () => [withDirectives(createVNode("span", mergeProps({
            "class": ["v-badge__badge", themeClasses.value, backgroundColorClasses.value, roundedClasses.value, textColorClasses.value],
            "style": [backgroundColorStyles.value, textColorStyles.value, props.inline ? {} : locationStyles.value],
            "aria-atomic": "true",
            "aria-label": t(props.label, value),
            "aria-live": "polite",
            "role": "status"
          }, badgeAttrs), [props.dot ? void 0 : ctx.slots.badge ? (_ctx$slots$badge = (_ctx$slots2 = ctx.slots).badge) == null ? void 0 : _ctx$slots$badge.call(_ctx$slots2) : props.icon ? createVNode(VIcon, {
            "icon": props.icon
          }, null) : content]), [[vShow, props.modelValue]])]
        })])]
      });
    });
    return {};
  }
});

export {
  VBadge
};
//# sourceMappingURL=chunk-TDW6T2V6.js.map
