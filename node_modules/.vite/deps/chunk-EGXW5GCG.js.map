{
  "version": 3,
  "sources": ["../../vuetify/src/components/VBreadcrumbs/VBreadcrumbsDivider.tsx", "../../vuetify/src/components/VBreadcrumbs/VBreadcrumbsItem.tsx", "../../vuetify/src/components/VBreadcrumbs/VBreadcrumbs.tsx"],
  "sourcesContent": ["import { createSimpleFunctional } from '@/util'\n\nexport const VBreadcrumbsDivider = createSimpleFunctional('v-breadcrumbs-divider', 'li')\n", "// Composables\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeTagProps } from '@/composables/tag'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VBreadcrumbsItem = defineComponent({\n  name: 'VBreadcrumbsItem',\n\n  props: {\n    active: Boolean,\n    activeClass: String,\n    activeColor: String,\n    color: String,\n    disabled: Boolean,\n    title: String,\n\n    ...makeRouterProps(),\n    ...makeTagProps({ tag: 'li' }),\n  },\n\n  setup (props, { slots, attrs }) {\n    const link = useLink(props, attrs)\n    const isActive = computed(() => props.active || link.isExactActive?.value)\n    const color = computed(() => isActive.value ? props.activeColor : props.color)\n\n    const { textColorClasses, textColorStyles } = useTextColor(color)\n\n    useRender(() => {\n      const Tag = link.isLink.value ? 'a' : props.tag\n\n      return (\n        <Tag\n          class={[\n            'v-breadcrumbs-item',\n            {\n              'v-breadcrumbs-item--active': isActive.value,\n              'v-breadcrumbs-item--disabled': props.disabled,\n              'v-breadcrumbs-item--link': link.isLink.value,\n              [`${props.activeClass}`]: isActive.value && props.activeClass,\n            },\n            textColorClasses.value,\n          ]}\n          style={[\n            textColorStyles.value,\n          ]}\n          href={ link.href.value }\n          aria-current={ isActive.value ? 'page' : undefined }\n          onClick={ link.navigate }\n        >\n          { slots.default?.() ?? props.title }\n        </Tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBreadcrumbsItem = InstanceType<typeof VBreadcrumbsItem>\n", "// Styles\nimport './VBreadcrumbs.sass'\n\n// Components\nimport { VBreadcrumbsDivider } from './VBreadcrumbsDivider'\nimport { VBreadcrumbsItem } from './VBreadcrumbsItem'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { LinkProps } from '@/composables/router'\nimport type { MakeSlots } from '@/util'\nimport type { PropType } from 'vue'\n\nexport type BreadcrumbItem = string | (LinkProps & {\n  text: string\n  disabled?: boolean\n})\n\nexport const VBreadcrumbs = genericComponent<new <T>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    default: []\n    item: [T | number]\n  }>\n}>()({\n  name: 'VBreadcrumbs',\n\n  props: {\n    activeClass: String,\n    activeColor: String,\n    bgColor: String,\n    color: String,\n    disabled: Boolean,\n    divider: {\n      type: String,\n      default: '/',\n    },\n    icon: IconValue,\n    items: {\n      type: Array as PropType<BreadcrumbItem[]>,\n      default: () => ([]),\n    },\n\n    ...makeDensityProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps({ tag: 'ul' }),\n  },\n\n  setup (props, { slots }) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { densityClasses } = useDensity(props)\n\n    const { roundedClasses } = useRounded(props)\n\n    provideDefaults({\n      VBreadcrumbsItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor: toRef(props, 'activeColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n      },\n    })\n\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.icon)\n\n      return (\n        <props.tag\n          class={[\n            'v-breadcrumbs',\n            backgroundColorClasses.value,\n            densityClasses.value,\n            roundedClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n        >\n          { hasPrepend && (\n            <VDefaultsProvider\n              key=\"prepend\"\n              defaults={{\n                VIcon: {\n                  icon: props.icon,\n                  start: true,\n                },\n              }}\n            >\n              <div class=\"v-breadcrumbs__prepend\">\n                { slots.prepend\n                  ? slots.prepend()\n                  : props.icon && (<VIcon />)\n                }\n              </div>\n            </VDefaultsProvider>\n          ) }\n\n          { props.items.map((item, index, array) => (\n            <>\n              <VBreadcrumbsItem\n                key={ index }\n                disabled={ index >= array.length - 1 }\n                { ...(typeof item === 'string' ? { title: item } : item) }\n                v-slots={{\n                  default: slots.title ? () => slots.title?.({ item, index }) : undefined,\n                }}\n              />\n\n              { index < array.length - 1 && (\n                <VBreadcrumbsDivider>\n                  { slots.divider?.({ item, index }) ?? props.divider }\n                </VBreadcrumbsDivider>\n              ) }\n            </>\n          )) }\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBreadcrumbs = InstanceType<typeof VBreadcrumbs>\n"],
  "mappings": "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",
  "names": ["VBreadcrumbsDivider", "createSimpleFunctional", "VBreadcrumbsItem", "defineComponent", "name", "props", "active", "Boolean", "activeClass", "String", "activeColor", "color", "disabled", "title", "makeRouterProps", "makeTagProps", "tag", "setup", "slots", "attrs", "link", "useLink", "isActive", "computed", "isExactActive", "value", "textColorClasses", "textColorStyles", "useTextColor", "useRender", "Tag", "isLink", "href", "undefined", "navigate", "default", "VBreadcrumbs", "genericComponent", "name", "props", "activeClass", "String", "activeColor", "bgColor", "color", "disabled", "Boolean", "divider", "type", "default", "icon", "IconValue", "items", "Array", "makeDensityProps", "makeRoundedProps", "makeTagProps", "tag", "setup", "slots", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "toRef", "densityClasses", "useDensity", "roundedClasses", "useRounded", "provideDefaults", "VBreadcrumbsItem", "useRender", "hasPrepend", "prepend", "value", "VIcon", "start", "map", "item", "index", "array", "length", "title", "undefined"]
}
