{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSelect/VSelect.tsx"],
  "sourcesContent": ["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { makeItemsProps, useItems } from '@/composables/items'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\n\n// Utility\nimport { computed, mergeProps, ref } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { InternalItem } from '@/composables/items'\nimport type { MakeSlots } from '@/util'\nimport type { PropType } from 'vue'\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown',\n  },\n  menuProps: {\n    type: Object as PropType<VMenu['$props']>,\n  },\n  modelValue: {\n    type: null,\n    default: () => ([]),\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n\n  ...makeItemsProps({ itemChildren: false }),\n}, 'select')\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = T extends Primitive\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? Val<T, ReturnObject>[]\n    : Val<T, ReturnObject>\n\nexport const VSelect = genericComponent<new <\n  T,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<T, ReturnObject, Multiple> = Value<T, ReturnObject, Multiple>\n>() => {\n  $props: {\n    items?: readonly T[]\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: Readonly<V>\n    'onUpdate:modelValue'?: (val: V) => void\n  }\n  $slots: Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n    item: [{ item: T, index: number, props: Record<string, unknown> }]\n    chip: [{ item: T, index: number, props: Record<string, unknown> }]\n    selection: [{ item: T, index: number }]\n    'no-data': []\n  }>\n}>()({\n  name: 'VSelect',\n\n  props: {\n    ...makeSelectProps(),\n    ...makeTransitionProps({ transition: { component: VDialogTransition } }),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref<VTextField>()\n    const menu = useProxiedModel(props, 'menu')\n    const { items, transformIn, transformOut } = useItems(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => item.value === v.value) || v\n      })\n    })\n    const selected = computed(() => selections.value.map(selection => selection.props.value))\n\n    function onClear (e: MouseEvent) {\n      model.value = []\n\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onClickControl () {\n      if (props.hideNoData && !items.value.length) return\n\n      menu.value = !menu.value\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n    }\n    function select (item: InternalItem) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => selection === item.value)\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n        menu.value = false\n      }\n    }\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          modelValue={ model.value.map(v => v.props.value).join(', ') }\n          onUpdate:modelValue={ v => { if (v == null) model.value = [] } }\n          validationValue={ props.modelValue }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly\n          onClick:clear={ onClear }\n          onClick:control={ onClickControl }\n          onBlur={ () => menu.value = false }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-select__content\"\n                  eager={ props.eager }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  { ...props.menuProps }\n                >\n                  <VList\n                    selected={ selected.value }\n                    selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                    onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                  >\n                    { !items.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                      <VListItem title={ t(props.noDataText) } />\n                    )) }\n\n                    { slots['prepend-item']?.() }\n\n                    { items.value.map((item, index) => slots.item?.({\n                      item,\n                      index,\n                      props: mergeProps(item.props, { onClick: () => select(item) }),\n                    }) ?? (\n                      <VListItem\n                        key={ index }\n                        { ...item.props }\n                        onClick={ () => select(item) }\n                      >\n                        {{\n                          prepend: ({ isSelected }) => props.multiple && !props.hideSelected ? (\n                            <VCheckboxBtn modelValue={ isSelected } ripple={ false } />\n                          ) : undefined,\n                        }}\n                      </VListItem>\n                    )) }\n\n                    { slots['append-item']?.() }\n                  </VList>\n                </VMenu>\n\n                { selections.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                  }\n\n                  return (\n                    <div key={ index } class=\"v-select__selection\">\n                      { hasChips ? (\n                        <VDefaultsProvider\n                          defaults={{\n                            VChip: {\n                              closable: props.closableChips,\n                              size: 'small',\n                              text: item.title,\n                            },\n                          }}\n                        >\n                          { slots.chip\n                            ? slots.chip({ item, index, props: slotProps })\n                            : (<VChip { ...slotProps } />)\n                          }\n                        </VDefaultsProvider>\n                      ) : (\n                        slots.selection\n                          ? slots.selection({ item, index })\n                          : (\n                            <span class=\"v-select__selection-text\">\n                              { item.title }\n                              { props.multiple && (index < selections.value.length - 1) && (\n                                <span class=\"v-select__selection-comma\">,</span>\n                              ) }\n                            </span>\n                          )\n                      )}\n                    </div>\n                  )\n                }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      menu,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n"],
  "mappings": "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",
  "names": ["makeSelectProps", "propsFactory", "chips", "Boolean", "closableChips", "eager", "hideNoData", "hideSelected", "menu", "menuIcon", "type", "IconValue", "default", "menuProps", "Object", "modelValue", "multiple", "noDataText", "String", "openOnClear", "makeItemsProps", "itemChildren", "VSelect", "genericComponent", "name", "props", "makeTransitionProps", "transition", "component", "VDialogTransition", "emits", "val", "setup", "slots", "t", "useLocale", "vTextFieldRef", "ref", "useProxiedModel", "items", "transformIn", "transformOut", "useItems", "model", "v", "wrapInArray", "transformed", "selections", "computed", "value", "map", "find", "item", "selected", "selection", "onClear", "e", "onClickControl", "length", "onKeydown", "includes", "key", "select", "index", "findIndex", "splice", "useRender", "hasChips", "chip", "join", "preventDefault", "mergeProps", "onClick", "prepend", "isSelected", "undefined", "onChipClose", "stopPropagation", "slotProps", "VChip", "closable", "size", "text", "title", "forwardRefs"]
}
